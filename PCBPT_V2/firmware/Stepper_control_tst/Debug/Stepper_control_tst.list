
Stepper_control_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  080038b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080038b0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1e2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a9  00000000  00000000  0002f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f91  00000000  00000000  00032e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011487  00000000  00000000  00044de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a3a5  00000000  00000000  00056270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0615  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f08  00000000  00000000  000c0668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800384c 	.word	0x0800384c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800384c 	.word	0x0800384c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000226:	4a15      	ldr	r2, [pc, #84]	; (800027c <MX_USART1_UART_Init+0x5c>)
 8000228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <MX_USART1_UART_Init+0x58>)
 800022c:	22e1      	movs	r2, #225	; 0xe1
 800022e:	0252      	lsls	r2, r2, #9
 8000230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_USART1_UART_Init+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000240:	2200      	movs	r2, #0
 8000242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000246:	220c      	movs	r2, #12
 8000248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_USART1_UART_Init+0x58>)
 800024c:	2200      	movs	r2, #0
 800024e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000252:	2200      	movs	r2, #0
 8000254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000258:	2200      	movs	r2, #0
 800025a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <MX_USART1_UART_Init+0x58>)
 800025e:	2200      	movs	r2, #0
 8000260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <MX_USART1_UART_Init+0x58>)
 8000264:	0018      	movs	r0, r3
 8000266:	f002 fcef 	bl	8002c48 <HAL_UART_Init>
 800026a:	1e03      	subs	r3, r0, #0
 800026c:	d001      	beq.n	8000272 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 800026e:	f000 fae3 	bl	8000838 <Error_Handler>
  }
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000028 	.word	0x20000028
 800027c:	40013800 	.word	0x40013800

08000280 <HAL_UART_RxCpltCallback>:

// void Send_data_back(uint8_t * data2beback, uint16_t data_len, uint32_t timeout) {
//   HAL_UART_Transmit(&huart1, data2beback, data_len, timeout);
// }

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  memcpy(CMD_recv, CMD_recv_buffer, CMD_BUFFER_LEN);
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_UART_RxCpltCallback+0x28>)
 800028a:	4a08      	ldr	r2, [pc, #32]	; (80002ac <HAL_UART_RxCpltCallback+0x2c>)
 800028c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028e:	c313      	stmia	r3!, {r0, r1, r4}
 8000290:	ca03      	ldmia	r2!, {r0, r1}
 8000292:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Receive_DMA(&huart1, CMD_recv_buffer, CMD_BUFFER_LEN);
 8000294:	4905      	ldr	r1, [pc, #20]	; (80002ac <HAL_UART_RxCpltCallback+0x2c>)
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_UART_RxCpltCallback+0x30>)
 8000298:	2214      	movs	r2, #20
 800029a:	0018      	movs	r0, r3
 800029c:	f002 fd28 	bl	8002cf0 <HAL_UART_Receive_DMA>
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b003      	add	sp, #12
 80002a6:	bd90      	pop	{r4, r7, pc}
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	200000b0 	.word	0x200000b0
 80002b0:	20000028 	.word	0x20000028

080002b4 <DMA_init>:

void DMA_init(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, PIN_RS495_RE_Pin, GPIO_PIN_RESET);
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2200      	movs	r2, #0
 80002be:	2110      	movs	r1, #16
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fb3f 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_RS485_DE_Pin, GPIO_PIN_RESET);
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2200      	movs	r2, #0
 80002cc:	2102      	movs	r1, #2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fb38 	bl	8001944 <HAL_GPIO_WritePin>

  HAL_UART_Receive_DMA(&huart1, CMD_recv_buffer, CMD_BUFFER_LEN);
 80002d4:	4904      	ldr	r1, [pc, #16]	; (80002e8 <DMA_init+0x34>)
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <DMA_init+0x38>)
 80002d8:	2214      	movs	r2, #20
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 fd08 	bl	8002cf0 <HAL_UART_Receive_DMA>
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	200000b0 	.word	0x200000b0
 80002ec:	20000028 	.word	0x20000028

080002f0 <Parse_CMD>:

void Parse_CMD(uint8_t* cmd_recv) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  step_number      = 0;
 80002f8:	4b49      	ldr	r3, [pc, #292]	; (8000420 <Parse_CMD+0x130>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
  data_start_index = 0;
 80002fe:	4b49      	ldr	r3, [pc, #292]	; (8000424 <Parse_CMD+0x134>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
  data_stop_index  = 0;
 8000304:	4b48      	ldr	r3, [pc, #288]	; (8000428 <Parse_CMD+0x138>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]

  if (cmd_recv[0] == 'P') {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b50      	cmp	r3, #80	; 0x50
 8000310:	d000      	beq.n	8000314 <Parse_CMD+0x24>
 8000312:	e081      	b.n	8000418 <Parse_CMD+0x128>
    flash_led_once (50);
 8000314:	2032      	movs	r0, #50	; 0x32
 8000316:	f000 f88d 	bl	8000434 <flash_led_once>

    for (i = 1; i < CMD_BUFFER_LEN; i ++) {
 800031a:	4b44      	ldr	r3, [pc, #272]	; (800042c <Parse_CMD+0x13c>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	e01e      	b.n	8000360 <Parse_CMD+0x70>
      if (cmd_recv[i] == ME_ID) {
 8000322:	4b42      	ldr	r3, [pc, #264]	; (800042c <Parse_CMD+0x13c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	001a      	movs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	189b      	adds	r3, r3, r2
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b58      	cmp	r3, #88	; 0x58
 8000330:	d105      	bne.n	800033e <Parse_CMD+0x4e>
        data_start_index = i + 1;
 8000332:	4b3e      	ldr	r3, [pc, #248]	; (800042c <Parse_CMD+0x13c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	4b3a      	ldr	r3, [pc, #232]	; (8000424 <Parse_CMD+0x134>)
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	e00b      	b.n	8000356 <Parse_CMD+0x66>
      }
      else if (cmd_recv[i] > '9') {
 800033e:	4b3b      	ldr	r3, [pc, #236]	; (800042c <Parse_CMD+0x13c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	001a      	movs	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	189b      	adds	r3, r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b39      	cmp	r3, #57	; 0x39
 800034c:	d903      	bls.n	8000356 <Parse_CMD+0x66>
        data_stop_index = i;
 800034e:	4b37      	ldr	r3, [pc, #220]	; (800042c <Parse_CMD+0x13c>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b35      	ldr	r3, [pc, #212]	; (8000428 <Parse_CMD+0x138>)
 8000354:	601a      	str	r2, [r3, #0]
    for (i = 1; i < CMD_BUFFER_LEN; i ++) {
 8000356:	4b35      	ldr	r3, [pc, #212]	; (800042c <Parse_CMD+0x13c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <Parse_CMD+0x13c>)
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <Parse_CMD+0x13c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b13      	cmp	r3, #19
 8000366:	dddc      	ble.n	8000322 <Parse_CMD+0x32>
      }
    }

    for (i = data_start_index; i < data_stop_index; i ++) {
 8000368:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <Parse_CMD+0x134>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <Parse_CMD+0x13c>)
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	e03e      	b.n	80003f0 <Parse_CMD+0x100>
      if (cmd_recv[i] == '+') {
 8000372:	4b2e      	ldr	r3, [pc, #184]	; (800042c <Parse_CMD+0x13c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	001a      	movs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	189b      	adds	r3, r3, r2
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b2b      	cmp	r3, #43	; 0x2b
 8000380:	d103      	bne.n	800038a <Parse_CMD+0x9a>
        rotation_dir = CLKDIR;
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <Parse_CMD+0x140>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	e02d      	b.n	80003e6 <Parse_CMD+0xf6>
      }
      else if (cmd_recv[i] == '-') {
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <Parse_CMD+0x13c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	001a      	movs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	189b      	adds	r3, r3, r2
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b2d      	cmp	r3, #45	; 0x2d
 8000398:	d103      	bne.n	80003a2 <Parse_CMD+0xb2>
        rotation_dir = COUNTERCLKDIR;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <Parse_CMD+0x140>)
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	e021      	b.n	80003e6 <Parse_CMD+0xf6>
      }
      else if (cmd_recv[i] >= '0' && cmd_recv[i] <= '9') {
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <Parse_CMD+0x13c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	001a      	movs	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	189b      	adds	r3, r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b2f      	cmp	r3, #47	; 0x2f
 80003b0:	d919      	bls.n	80003e6 <Parse_CMD+0xf6>
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <Parse_CMD+0x13c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	001a      	movs	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	189b      	adds	r3, r3, r2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b39      	cmp	r3, #57	; 0x39
 80003c0:	d811      	bhi.n	80003e6 <Parse_CMD+0xf6>
          step_number = step_number * 10 + (uint32_t)(cmd_recv[i] - '0');
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <Parse_CMD+0x130>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	0013      	movs	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	189b      	adds	r3, r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	001a      	movs	r2, r3
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <Parse_CMD+0x13c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	0019      	movs	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	185b      	adds	r3, r3, r1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	18d3      	adds	r3, r2, r3
 80003de:	3b30      	subs	r3, #48	; 0x30
 80003e0:	001a      	movs	r2, r3
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <Parse_CMD+0x130>)
 80003e4:	601a      	str	r2, [r3, #0]
    for (i = data_start_index; i < data_stop_index; i ++) {
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <Parse_CMD+0x13c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <Parse_CMD+0x13c>)
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <Parse_CMD+0x13c>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <Parse_CMD+0x138>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbba      	blt.n	8000372 <Parse_CMD+0x82>
      }
    }

    move_steps(rotation_dir, step_number);
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <Parse_CMD+0x140>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <Parse_CMD+0x130>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	0019      	movs	r1, r3
 8000406:	0010      	movs	r0, r2
 8000408:	f000 fa6e 	bl	80008e8 <move_steps>

    memset(cmd_recv, 0, CMD_BUFFER_LEN);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2214      	movs	r2, #20
 8000410:	2100      	movs	r1, #0
 8000412:	0018      	movs	r0, r3
 8000414:	f003 fa12 	bl	800383c <memset>
  }

  // flash_led_once (50);
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000e4 	.word	0x200000e4
 8000424:	200000dc 	.word	0x200000dc
 8000428:	200000e0 	.word	0x200000e0
 800042c:	200000d8 	.word	0x200000d8
 8000430:	200000e8 	.word	0x200000e8

08000434 <flash_led_once>:
#include "debug_FZ.h"

void flash_led_once(uint32_t period) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_SET);
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <flash_led_once+0x30>)
 800043e:	2201      	movs	r2, #1
 8000440:	2102      	movs	r1, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fa7e 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_Delay(period);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fc2a 	bl	8000ca4 <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <flash_led_once+0x30>)
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fa74 	bl	8001944 <HAL_GPIO_WritePin>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	48000400 	.word	0x48000400

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fbb6 	bl	8000bdc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f82e 	bl	80004d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f95e 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8000478:	f000 f93e 	bl	80006f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800047c:	f7ff fed0 	bl	8000220 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000480:	f000 f88c 	bl	800059c <MX_ADC_Init>
  MX_TIM2_Init();
 8000484:	f000 f8e6 	bl	8000654 <MX_TIM2_Init>

  DMA_init();
 8000488:	f7ff ff14 	bl	80002b4 <DMA_init>

  stepper_init(MICROSTEP_1_8);
 800048c:	2003      	movs	r0, #3
 800048e:	f000 f9d9 	bl	8000844 <stepper_init>

  HAL_TIM_Base_Start_IT(&htim2);
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <main+0x5c>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 f809 	bl	80024ac <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_SET);
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <main+0x60>)
 800049c:	2201      	movs	r2, #1
 800049e:	2102      	movs	r1, #2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fa4f 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80004a6:	2064      	movs	r0, #100	; 0x64
 80004a8:	f000 fbfc 	bl	8000ca4 <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <main+0x60>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	2102      	movs	r1, #2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fa46 	bl	8001944 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Parse_CMD(CMD_recv);
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <main+0x64>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ff18 	bl	80002f0 <Parse_CMD>
 80004c0:	e7fa      	b.n	80004b8 <main+0x50>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	2000012c 	.word	0x2000012c
 80004c8:	48000400 	.word	0x48000400
 80004cc:	200000c4 	.word	0x200000c4

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b095      	sub	sp, #84	; 0x54
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2420      	movs	r4, #32
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2330      	movs	r3, #48	; 0x30
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f003 f9ab 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2310      	movs	r3, #16
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f003 f9a3 	bl	800383c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2310      	movs	r3, #16
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f003 f99c 	bl	800383c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2211      	movs	r2, #17
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2202      	movs	r2, #2
 8000522:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0252      	lsls	r2, r2, #9
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0312      	lsls	r2, r2, #12
 8000532:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	187b      	adds	r3, r7, r1
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fa39 	bl	80019b4 <HAL_RCC_OscConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000546:	f000 f977 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	2110      	movs	r1, #16
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2207      	movs	r2, #7
 8000550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2202      	movs	r2, #2
 8000556:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2101      	movs	r1, #1
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fd3d 	bl	8001fe8 <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000572:	f000 f961 	bl	8000838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000576:	003b      	movs	r3, r7
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fe73 	bl	8002270 <HAL_RCCEx_PeriphCLKConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800058e:	f000 f953 	bl	8000838 <Error_Handler>
  }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b015      	add	sp, #84	; 0x54
 8000598:	bd90      	pop	{r4, r7, pc}
	...

0800059c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	230c      	movs	r3, #12
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 f946 	bl	800383c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_ADC_Init+0xb0>)
 80005b2:	4a27      	ldr	r2, [pc, #156]	; (8000650 <MX_ADC_Init+0xb4>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <MX_ADC_Init+0xb0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_ADC_Init+0xb0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_ADC_Init+0xb0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_ADC_Init+0xb0>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC_Init+0xb0>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC_Init+0xb0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC_Init+0xb0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC_Init+0xb0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC_Init+0xb0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC_Init+0xb0>)
 80005ee:	22c2      	movs	r2, #194	; 0xc2
 80005f0:	32ff      	adds	r2, #255	; 0xff
 80005f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC_Init+0xb0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC_Init+0xb0>)
 80005fc:	2224      	movs	r2, #36	; 0x24
 80005fe:	2100      	movs	r1, #0
 8000600:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC_Init+0xb0>)
 8000604:	2201      	movs	r2, #1
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_ADC_Init+0xb0>)
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fb6e 	bl	8000cec <HAL_ADC_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000614:	f000 f910 	bl	8000838 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2212      	movs	r2, #18
 800061c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	0152      	lsls	r2, r2, #5
 8000624:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	0552      	lsls	r2, r2, #21
 800062c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800062e:	1d3a      	adds	r2, r7, #4
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_ADC_Init+0xb0>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fc99 	bl	8000f6c <HAL_ADC_ConfigChannel>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800063e:	f000 f8fb 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200000ec 	.word	0x200000ec
 8000650:	40012400 	.word	0x40012400

08000654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	2308      	movs	r3, #8
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2310      	movs	r3, #16
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f8e9 	bl	800383c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	003b      	movs	r3, r7
 800066c:	0018      	movs	r0, r3
 800066e:	2308      	movs	r3, #8
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f003 f8e2 	bl	800383c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM2_Init+0xa0>)
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	05d2      	lsls	r2, r2, #23
 800067e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM2_Init+0xa0>)
 8000682:	2264      	movs	r2, #100	; 0x64
 8000684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_TIM2_Init+0xa0>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM2_Init+0xa0>)
 800068e:	22a0      	movs	r2, #160	; 0xa0
 8000690:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_TIM2_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_TIM2_Init+0xa0>)
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM2_Init+0xa0>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 feb3 	bl	800240c <HAL_TIM_Base_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x5a>
    Error_Handler();
 80006aa:	f000 f8c5 	bl	8000838 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	2108      	movs	r1, #8
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0152      	lsls	r2, r2, #5
 80006b6:	601a      	str	r2, [r3, #0]

  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_TIM2_Init+0xa0>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 f856 	bl	8002770 <HAL_TIM_ConfigClockSource>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x78>
    Error_Handler();
 80006c8:	f000 f8b6 	bl	8000838 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80006d8:	003a      	movs	r2, r7
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_TIM2_Init+0xa0>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fa4a 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x98>
    Error_Handler();
 80006e8:	f000 f8a6 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b006      	add	sp, #24
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000012c 	.word	0x2000012c

080006f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_DMA_Init+0x38>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_DMA_Init+0x38>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_DMA_Init+0x38>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	200a      	movs	r0, #10
 800071c:	f000 fde0 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000720:	200a      	movs	r0, #10
 8000722:	f000 fdf2 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	240c      	movs	r4, #12
 800073c:	193b      	adds	r3, r7, r4
 800073e:	0018      	movs	r0, r3
 8000740:	2314      	movs	r3, #20
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f003 f879 	bl	800383c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <MX_GPIO_Init+0xf8>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0xf8>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	03c9      	lsls	r1, r1, #15
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0xf8>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	03db      	lsls	r3, r3, #15
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_GPIO_Init+0xf8>)
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_GPIO_Init+0xf8>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	0289      	lsls	r1, r1, #10
 8000770:	430a      	orrs	r2, r1
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_GPIO_Init+0xf8>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	029b      	lsls	r3, r3, #10
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_GPIO_Init+0xf8>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_GPIO_Init+0xf8>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	02c9      	lsls	r1, r1, #11
 800078c:	430a      	orrs	r2, r1
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xf8>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	02db      	lsls	r3, r3, #11
 8000798:	4013      	ands	r3, r2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_RS485_DE_Pin|PIN_RS495_RE_Pin|PIN_MS1_Pin|PIN_MS2_Pin
 800079e:	4924      	ldr	r1, [pc, #144]	; (8000830 <MX_GPIO_Init+0xfc>)
 80007a0:	2390      	movs	r3, #144	; 0x90
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 f8cc 	bl	8001944 <HAL_GPIO_WritePin>
                          |PIN_MS3_Pin|PIN_DIR_Pin|PIN_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	2102      	movs	r1, #2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 f8c6 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = PIN_LIMIT_SW_Pin;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIN_LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 80007ca:	193a      	adds	r2, r7, r4
 80007cc:	2390      	movs	r3, #144	; 0x90
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 ff4e 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_RS485_DE_Pin PIN_RS495_RE_Pin PIN_MS1_Pin PIN_MS2_Pin
                           PIN_MS3_Pin PIN_DIR_Pin PIN_STEP_Pin */
  GPIO_InitStruct.Pin = PIN_RS485_DE_Pin|PIN_RS495_RE_Pin|PIN_MS1_Pin|PIN_MS2_Pin
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_GPIO_Init+0xfc>)
 80007dc:	601a      	str	r2, [r3, #0]
                          |PIN_MS3_Pin|PIN_DIR_Pin|PIN_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	193a      	adds	r2, r7, r4
 80007f2:	2390      	movs	r3, #144	; 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 ff3b 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LED_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin;
 80007fe:	0021      	movs	r1, r4
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2202      	movs	r2, #2
 8000804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2201      	movs	r2, #1
 800080a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000818:	187b      	adds	r3, r7, r1
 800081a:	4a06      	ldr	r2, [pc, #24]	; (8000834 <MX_GPIO_Init+0x100>)
 800081c:	0019      	movs	r1, r3
 800081e:	0010      	movs	r0, r2
 8000820:	f000 ff28 	bl	8001674 <HAL_GPIO_Init>

}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b009      	add	sp, #36	; 0x24
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	000006f2 	.word	0x000006f2
 8000834:	48000400 	.word	0x48000400

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <stepper_init>:

static int i = 0;

volatile bool int_flag = false;

void stepper_init(uint8_t misro_stepping_confg) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
  ms1 = (misro_stepping_confg)      & 0x01;
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2201      	movs	r2, #1
 8000856:	401a      	ands	r2, r3
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <stepper_init+0x7c>)
 800085a:	601a      	str	r2, [r3, #0]
  ms2 = (misro_stepping_confg >> 1) & 0x01;
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	001a      	movs	r2, r3
 8000866:	2301      	movs	r3, #1
 8000868:	401a      	ands	r2, r3
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <stepper_init+0x80>)
 800086c:	601a      	str	r2, [r3, #0]
  ms3 = (misro_stepping_confg >> 2) & 0x01;
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	089b      	lsrs	r3, r3, #2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	001a      	movs	r2, r3
 8000878:	2301      	movs	r3, #1
 800087a:	401a      	ands	r2, r3
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <stepper_init+0x84>)
 800087e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, PIN_MS1_Pin, ms1);
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <stepper_init+0x7c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2120      	movs	r1, #32
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f859 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_MS2_Pin, ms2);
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <stepper_init+0x80>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f850 	bl	8001944 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_MS3_Pin, ms3);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <stepper_init+0x84>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 f847 	bl	8001944 <HAL_GPIO_WritePin>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	200001b8 	.word	0x200001b8
 80008c4:	200001bc 	.word	0x200001bc
 80008c8:	200001c0 	.word	0x200001c0

080008cc <HAL_TIM_PeriodElapsedCallback>:

  flash_led_once (50);
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  int_flag = true;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200001c8 	.word	0x200001c8

080008e8 <move_steps>:

void move_steps(unsigned int direction, uint32_t steps) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  // HAL_GPIO_WritePin(GPIOA, PIN_STEP_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, PIN_DIR_Pin, direction);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	0099      	lsls	r1, r3, #2
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f820 	bl	8001944 <HAL_GPIO_WritePin>

  uint32_t stp2move = 2*steps;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	60fb      	str	r3, [r7, #12]

  for (i = 0; i < stp2move; i++) {
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <move_steps+0x70>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e014      	b.n	800093c <move_steps+0x54>
    if (int_flag) {
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <move_steps+0x74>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00a      	beq.n	8000932 <move_steps+0x4a>
      int_flag = false;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <move_steps+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, PIN_STEP_Pin);
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	00da      	lsls	r2, r3, #3
 8000926:	2390      	movs	r3, #144	; 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f001 f826 	bl	800197e <HAL_GPIO_TogglePin>
  for (i = 0; i < stp2move; i++) {
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <move_steps+0x70>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <move_steps+0x70>)
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <move_steps+0x70>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	001a      	movs	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4293      	cmp	r3, r2
 8000946:	d8e4      	bhi.n	8000912 <move_steps+0x2a>
    }
  }

  flash_led_once (50);
 8000948:	2032      	movs	r0, #50	; 0x32
 800094a:	f7ff fd73 	bl	8000434 <flash_led_once>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200001c4 	.word	0x200001c4
 800095c:	200001c8 	.word	0x200001c8

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0549      	lsls	r1, r1, #21
 8000988:	430a      	orrs	r2, r1
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_MspInit+0x44>)
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	055b      	lsls	r3, r3, #21
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_ADC_MspInit+0x38>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10d      	bne.n	80009d6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_ADC_MspInit+0x3c>)
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_ADC_MspInit+0x3c>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0089      	lsls	r1, r1, #2
 80009c4:	430a      	orrs	r2, r1
 80009c6:	619a      	str	r2, [r3, #24]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_ADC_MspInit+0x3c>)
 80009ca:	699a      	ldr	r2, [r3, #24]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40012400 	.word	0x40012400
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d113      	bne.n	8000a24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_TIM_Base_MspInit+0x44>)
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_TIM_Base_MspInit+0x44>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	430a      	orrs	r2, r1
 8000a06:	61da      	str	r2, [r3, #28]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_TIM_Base_MspInit+0x44>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f000 fc61 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 fc73 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b004      	add	sp, #16
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	; 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fefa 	bl	800383c <memset>
  if(huart->Instance==USART1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <HAL_UART_MspInit+0xdc>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d158      	bne.n	8000b04 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	01c9      	lsls	r1, r1, #7
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	01db      	lsls	r3, r3, #7
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0289      	lsls	r1, r1, #10
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <HAL_UART_MspInit+0xe0>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	029b      	lsls	r3, r3, #10
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a8a:	0021      	movs	r1, r4
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2202      	movs	r2, #2
 8000a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fdde 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0xe8>)
 8000abc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fc2a 	bl	8001344 <HAL_DMA_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000af4:	f7ff fea0 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000afc:	675a      	str	r2, [r3, #116]	; 0x74
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_UART_MspInit+0xe4>)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b00b      	add	sp, #44	; 0x2c
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	20000174 	.word	0x20000174
 8000b18:	40020030 	.word	0x40020030

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f894 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  // flash_led_once(10);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fca4 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000174 	.word	0x20000174

08000b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <TIM2_IRQHandler+0x14>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f001 fcea 	bl	8002544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	2000012c 	.word	0x2000012c

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	f7ff fff6 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f002 fe1d 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fc55 	bl	8000468 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	080038a4 	.word	0x080038a4
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	200001d0 	.word	0x200001d0

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff feb5 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa75 	bl	8000108 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa70 	bl	8000108 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fb7d 	bl	800132a <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fb4a 	bl	80012e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200001cc 	.word	0x200001cc

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200001cc 	.word	0x200001cc

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e125      	b.n	8000f56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10a      	bne.n	8000d28 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2234      	movs	r2, #52	; 0x34
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fe40 	bl	80009a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d000      	beq.n	8000d34 <HAL_ADC_Init+0x48>
 8000d32:	e103      	b.n	8000f3c <HAL_ADC_Init+0x250>
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d000      	beq.n	8000d40 <HAL_ADC_Init+0x54>
 8000d3e:	e0fd      	b.n	8000f3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2204      	movs	r2, #4
 8000d48:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d4a:	d000      	beq.n	8000d4e <HAL_ADC_Init+0x62>
 8000d4c:	e0f6      	b.n	8000f3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d52:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <HAL_ADC_Init+0x274>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	2202      	movs	r2, #2
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d112      	bne.n	8000d92 <HAL_ADC_Init+0xa6>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d009      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	401a      	ands	r2, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d101      	bne.n	8000d92 <HAL_ADC_Init+0xa6>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d116      	bne.n	8000dc6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2218      	movs	r2, #24
 8000da0:	4393      	bics	r3, r2
 8000da2:	0019      	movs	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	0899      	lsrs	r1, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4964      	ldr	r1, [pc, #400]	; (8000f64 <HAL_ADC_Init+0x278>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7e1b      	ldrb	r3, [r3, #24]
 8000dda:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e5b      	ldrb	r3, [r3, #25]
 8000de0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000de2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7e9b      	ldrb	r3, [r3, #26]
 8000de8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d002      	beq.n	8000dfa <HAL_ADC_Init+0x10e>
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	e000      	b.n	8000dfc <HAL_ADC_Init+0x110>
 8000dfa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dfc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d101      	bne.n	8000e10 <HAL_ADC_Init+0x124>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e000      	b.n	8000e12 <HAL_ADC_Init+0x126>
 8000e10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2124      	movs	r1, #36	; 0x24
 8000e18:	5c5b      	ldrb	r3, [r3, r1]
 8000e1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7edb      	ldrb	r3, [r3, #27]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d115      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7e9b      	ldrb	r3, [r3, #26]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d105      	bne.n	8000e40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0252      	lsls	r2, r2, #9
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	e00b      	b.n	8000e58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e44:	2220      	movs	r2, #32
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e50:	2201      	movs	r2, #1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69da      	ldr	r2, [r3, #28]
 8000e5c:	23c2      	movs	r3, #194	; 0xc2
 8000e5e:	33ff      	adds	r3, #255	; 0xff
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d007      	beq.n	8000e74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68d9      	ldr	r1, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	055b      	lsls	r3, r3, #21
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d01b      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d017      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d013      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d00f      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d00b      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d003      	beq.n	8000ec8 <HAL_ADC_Init+0x1dc>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d112      	bne.n	8000eee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6959      	ldr	r1, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_ADC_Init+0x27c>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d10b      	bne.n	8000f16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f14:	e01c      	b.n	8000f50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1a:	2212      	movs	r2, #18
 8000f1c:	4393      	bics	r3, r2
 8000f1e:	2210      	movs	r2, #16
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f3a:	e009      	b.n	8000f50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f40:	2210      	movs	r2, #16
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	fffffefd 	.word	0xfffffefd
 8000f64:	fffe0219 	.word	0xfffe0219
 8000f68:	833fffe7 	.word	0x833fffe7

08000f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	055b      	lsls	r3, r3, #21
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d011      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d00d      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d009      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d005      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d001      	beq.n	8000fb2 <HAL_ADC_ConfigChannel+0x46>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2234      	movs	r2, #52	; 0x34
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x54>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e0d0      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1f6>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d000      	beq.n	8000fd6 <HAL_ADC_ConfigChannel+0x6a>
 8000fd4:	e0b4      	b.n	8001140 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a64      	ldr	r2, [pc, #400]	; (800116c <HAL_ADC_ConfigChannel+0x200>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x76>
 8000fe0:	e082      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	055b      	lsls	r3, r3, #21
 8001000:	429a      	cmp	r2, r3
 8001002:	d037      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d033      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2b02      	cmp	r3, #2
 8001012:	d02f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	2b03      	cmp	r3, #3
 800101a:	d02b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b04      	cmp	r3, #4
 8001022:	d027      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b05      	cmp	r3, #5
 800102a:	d023      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b06      	cmp	r3, #6
 8001032:	d01f      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	2b07      	cmp	r3, #7
 800103a:	d01b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2107      	movs	r1, #7
 8001048:	400b      	ands	r3, r1
 800104a:	429a      	cmp	r2, r3
 800104c:	d012      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2107      	movs	r1, #7
 800105a:	438a      	bics	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6959      	ldr	r1, [r3, #20]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2207      	movs	r2, #7
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d007      	beq.n	800108c <HAL_ADC_ConfigChannel+0x120>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b11      	cmp	r3, #17
 8001082:	d003      	beq.n	800108c <HAL_ADC_ConfigChannel+0x120>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b12      	cmp	r3, #18
 800108a:	d163      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b10      	cmp	r3, #16
 8001096:	d009      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x140>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b11      	cmp	r3, #17
 800109e:	d102      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x13a>
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	03db      	lsls	r3, r3, #15
 80010a4:	e004      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x144>
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	045b      	lsls	r3, r3, #17
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x144>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 80010b2:	430b      	orrs	r3, r1
 80010b4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d14a      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_ConfigChannel+0x208>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	492d      	ldr	r1, [pc, #180]	; (8001178 <HAL_ADC_ConfigChannel+0x20c>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	001a      	movs	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3b01      	subs	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f9      	bne.n	80010da <HAL_ADC_ConfigChannel+0x16e>
 80010e6:	e035      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2101      	movs	r1, #1
 80010f4:	4099      	lsls	r1, r3
 80010f6:	000b      	movs	r3, r1
 80010f8:	43d9      	mvns	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	400a      	ands	r2, r1
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b10      	cmp	r3, #16
 8001108:	d007      	beq.n	800111a <HAL_ADC_ConfigChannel+0x1ae>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b11      	cmp	r3, #17
 8001110:	d003      	beq.n	800111a <HAL_ADC_ConfigChannel+0x1ae>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d11c      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b10      	cmp	r3, #16
 8001124:	d007      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x1ca>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b11      	cmp	r3, #17
 800112c:	d101      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x1c6>
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_ConfigChannel+0x210>)
 8001130:	e002      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_ADC_ConfigChannel+0x214>)
 8001134:	e000      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_ConfigChannel+0x218>)
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_ADC_ConfigChannel+0x204>)
 800113a:	400b      	ands	r3, r1
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e009      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001144:	2220      	movs	r2, #32
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2234      	movs	r2, #52	; 0x34
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	00001001 	.word	0x00001001
 8001170:	40012708 	.word	0x40012708
 8001174:	20000000 	.word	0x20000000
 8001178:	000f4240 	.word	0x000f4240
 800117c:	ffbfffff 	.word	0xffbfffff
 8001180:	feffffff 	.word	0xfeffffff
 8001184:	ff7fffff 	.word	0xff7fffff

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b7f      	cmp	r3, #127	; 0x7f
 800119a:	d809      	bhi.n	80011b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	231f      	movs	r3, #31
 80011a4:	401a      	ands	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_EnableIRQ+0x30>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	4091      	lsls	r1, r2
 80011ac:	000a      	movs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
  }
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	0002      	movs	r2, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b7f      	cmp	r3, #127	; 0x7f
 80011d0:	d828      	bhi.n	8001224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d2:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <__NVIC_SetPriority+0xd4>)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	33c0      	adds	r3, #192	; 0xc0
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	589b      	ldr	r3, [r3, r2]
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	0011      	movs	r1, r2
 80011e8:	2203      	movs	r2, #3
 80011ea:	400a      	ands	r2, r1
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	21ff      	movs	r1, #255	; 0xff
 80011f0:	4091      	lsls	r1, r2
 80011f2:	000a      	movs	r2, r1
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	401a      	ands	r2, r3
 80011f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	401a      	ands	r2, r3
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0018      	movs	r0, r3
 8001208:	2303      	movs	r3, #3
 800120a:	4003      	ands	r3, r0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	481f      	ldr	r0, [pc, #124]	; (8001290 <__NVIC_SetPriority+0xd4>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	430a      	orrs	r2, r1
 800121c:	33c0      	adds	r3, #192	; 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001222:	e031      	b.n	8001288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <__NVIC_SetPriority+0xd8>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0019      	movs	r1, r3
 800122c:	230f      	movs	r3, #15
 800122e:	400b      	ands	r3, r1
 8001230:	3b08      	subs	r3, #8
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3306      	adds	r3, #6
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	; 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <__NVIC_SetPriority+0xd8>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	001c      	movs	r4, r3
 8001274:	230f      	movs	r3, #15
 8001276:	4023      	ands	r3, r4
 8001278:	3b08      	subs	r3, #8
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	430a      	orrs	r2, r1
 800127e:	3306      	adds	r3, #6
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	18c3      	adds	r3, r0, r3
 8001284:	3304      	adds	r3, #4
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b003      	add	sp, #12
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	045b      	lsls	r3, r3, #17
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d301      	bcc.n	80012b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ac:	2301      	movs	r3, #1
 80012ae:	e010      	b.n	80012d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <SysTick_Config+0x44>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	3a01      	subs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b8:	2301      	movs	r3, #1
 80012ba:	425b      	negs	r3, r3
 80012bc:	2103      	movs	r1, #3
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff7c 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x44>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x44>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	210f      	movs	r1, #15
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	1c02      	adds	r2, r0, #0
 80012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	0002      	movs	r2, r0
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff33 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ffaf 	bl	8001298 <SysTick_Config>
 800133a:	0003      	movs	r3, r0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e036      	b.n	80013c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2221      	movs	r2, #33	; 0x21
 800135e:	2102      	movs	r1, #2
 8001360:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_DMA_Init+0x8c>)
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f946 	bl	800163c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2221      	movs	r2, #33	; 0x21
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2220      	movs	r2, #32
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b004      	add	sp, #16
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	ffffc00f 	.word	0xffffc00f

080013d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2317      	movs	r3, #23
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_DMA_Start_IT+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e04f      	b.n	8001498 <HAL_DMA_Start_IT+0xc4>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2220      	movs	r2, #32
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2221      	movs	r2, #33	; 0x21
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d13a      	bne.n	8001482 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	; 0x21
 8001410:	2102      	movs	r1, #2
 8001412:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f8d7 	bl	80015e4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	210e      	movs	r1, #14
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00f      	b.n	8001470 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	210a      	movs	r1, #10
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2104      	movs	r1, #4
 800146c:	438a      	bics	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001492:	2317      	movs	r3, #23
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b006      	add	sp, #24
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2204      	movs	r2, #4
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	d024      	beq.n	8001512 <HAL_DMA_IRQHandler+0x72>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2204      	movs	r2, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	d020      	beq.n	8001512 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2220      	movs	r2, #32
 80014d8:	4013      	ands	r3, r2
 80014da:	d107      	bne.n	80014ec <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2104      	movs	r1, #4
 80014e8:	438a      	bics	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	2104      	movs	r1, #4
 80014f6:	4091      	lsls	r1, r2
 80014f8:	000a      	movs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d100      	bne.n	8001506 <HAL_DMA_IRQHandler+0x66>
 8001504:	e06a      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	0010      	movs	r0, r2
 800150e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001510:	e064      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2202      	movs	r2, #2
 8001518:	409a      	lsls	r2, r3
 800151a:	0013      	movs	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	d02b      	beq.n	800157a <HAL_DMA_IRQHandler+0xda>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d027      	beq.n	800157a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2220      	movs	r2, #32
 8001532:	4013      	ands	r3, r2
 8001534:	d10b      	bne.n	800154e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	210a      	movs	r1, #10
 8001542:	438a      	bics	r2, r1
 8001544:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2221      	movs	r2, #33	; 0x21
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	2102      	movs	r1, #2
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	0010      	movs	r0, r2
 8001576:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001578:	e030      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	d028      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2208      	movs	r2, #8
 800158e:	4013      	ands	r3, r2
 8001590:	d024      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	210e      	movs	r1, #14
 800159e:	438a      	bics	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015aa:	2101      	movs	r1, #1
 80015ac:	4091      	lsls	r1, r2
 80015ae:	000a      	movs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2221      	movs	r2, #33	; 0x21
 80015bc:	2101      	movs	r1, #1
 80015be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	0010      	movs	r0, r2
 80015d8:	4798      	blx	r3
    }
  }
}
 80015da:	e7ff      	b.n	80015dc <HAL_DMA_IRQHandler+0x13c>
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	2101      	movs	r1, #1
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d108      	bne.n	8001624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001622:	e007      	b.n	8001634 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <DMA_CalcBaseAndBitshift+0x30>)
 800164a:	4694      	mov	ip, r2
 800164c:	4463      	add	r3, ip
 800164e:	2114      	movs	r1, #20
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fd59 	bl	8000108 <__udivsi3>
 8001656:	0003      	movs	r3, r0
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <DMA_CalcBaseAndBitshift+0x34>)
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	bffdfff8 	.word	0xbffdfff8
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e149      	b.n	8001918 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <HAL_GPIO_Init+0x28>
 800169a:	e13a      	b.n	8001912 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	58d3      	ldr	r3, [r2, r3]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2207      	movs	r2, #7
 8001770:	4013      	ands	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2107      	movs	r1, #7
 800178a:	400b      	ands	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_GPIO_Init+0x174>
 80017e6:	e094      	b.n	8001912 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b51      	ldr	r3, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	589b      	ldr	r3, [r3, r2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2203      	movs	r2, #3
 8001812:	4013      	ands	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	409a      	lsls	r2, r3
 800181a:	0013      	movs	r3, r2
 800181c:	43da      	mvns	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	2390      	movs	r3, #144	; 0x90
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	429a      	cmp	r2, r3
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x1d6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x1d2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_GPIO_Init+0x2c8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x1ce>
 800183e:	2302      	movs	r3, #2
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 8001842:	2305      	movs	r3, #5
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x1d8>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	2103      	movs	r1, #3
 8001850:	400a      	ands	r2, r1
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	035b      	lsls	r3, r3, #13
 8001882:	4013      	ands	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	4013      	ands	r3, r2
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43da      	mvns	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	029b      	lsls	r3, r3, #10
 80018d6:	4013      	ands	r3, r2
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	4013      	ands	r3, r2
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	40da      	lsrs	r2, r3
 8001920:	1e13      	subs	r3, r2, #0
 8001922:	d000      	beq.n	8001926 <HAL_GPIO_Init+0x2b2>
 8001924:	e6ae      	b.n	8001684 <HAL_GPIO_Init+0x10>
  } 
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b006      	add	sp, #24
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	1c7b      	adds	r3, r7, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	000a      	movs	r2, r1
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001992:	1cbb      	adds	r3, r7, #2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	1cb9      	adds	r1, r7, #2
 80019a2:	8809      	ldrh	r1, [r1, #0]
 80019a4:	400b      	ands	r3, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e301      	b.n	8001fca <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	d100      	bne.n	80019d2 <HAL_RCC_OscConfig+0x1e>
 80019d0:	e08d      	b.n	8001aee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d2:	4bc3      	ldr	r3, [pc, #780]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	220c      	movs	r2, #12
 80019d8:	4013      	ands	r3, r2
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d00e      	beq.n	80019fc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019de:	4bc0      	ldr	r3, [pc, #768]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	220c      	movs	r2, #12
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x64>
 80019ea:	4bbd      	ldr	r3, [pc, #756]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	401a      	ands	r2, r3
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10d      	bne.n	8001a18 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4bb8      	ldr	r3, [pc, #736]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x56>
 8001a08:	e070      	b.n	8001aec <HAL_RCC_OscConfig+0x138>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d000      	beq.n	8001a14 <HAL_RCC_OscConfig+0x60>
 8001a12:	e06b      	b.n	8001aec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e2d8      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x7c>
 8001a20:	4baf      	ldr	r3, [pc, #700]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4bae      	ldr	r3, [pc, #696]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0249      	lsls	r1, r1, #9
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e02f      	b.n	8001a90 <HAL_RCC_OscConfig+0xdc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x9e>
 8001a38:	4ba9      	ldr	r3, [pc, #676]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	49a9      	ldr	r1, [pc, #676]	; (8001ce4 <HAL_RCC_OscConfig+0x330>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4ba6      	ldr	r3, [pc, #664]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	49a7      	ldr	r1, [pc, #668]	; (8001ce8 <HAL_RCC_OscConfig+0x334>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e01e      	b.n	8001a90 <HAL_RCC_OscConfig+0xdc>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10e      	bne.n	8001a78 <HAL_RCC_OscConfig+0xc4>
 8001a5a:	4ba1      	ldr	r3, [pc, #644]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4ba0      	ldr	r3, [pc, #640]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	02c9      	lsls	r1, r1, #11
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	4b9d      	ldr	r3, [pc, #628]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b9c      	ldr	r3, [pc, #624]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0249      	lsls	r1, r1, #9
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xdc>
 8001a78:	4b99      	ldr	r3, [pc, #612]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b98      	ldr	r3, [pc, #608]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	4999      	ldr	r1, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x330>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	4997      	ldr	r1, [pc, #604]	; (8001ce8 <HAL_RCC_OscConfig+0x334>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d014      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8fa 	bl	8000c90 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff f8f5 	bl	8000c90 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e28a      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0xee>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f8e5 	bl	8000c90 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f8e0 	bl	8000c90 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e275      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b80      	ldr	r3, [pc, #512]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x118>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d100      	bne.n	8001afa <HAL_RCC_OscConfig+0x146>
 8001af8:	e069      	b.n	8001bce <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	220c      	movs	r2, #12
 8001b00:	4013      	ands	r3, r2
 8001b02:	d00b      	beq.n	8001b1c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b04:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	220c      	movs	r2, #12
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d11c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x196>
 8001b10:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d116      	bne.n	8001b4a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1c:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e24b      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22f8      	movs	r2, #248	; 0xf8
 8001b38:	4393      	bics	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	00da      	lsls	r2, r3, #3
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b48:	e041      	b.n	8001bce <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d024      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f897 	bl	8000c90 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff f892 	bl	8000c90 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e227      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f1      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	22f8      	movs	r2, #248	; 0xf8
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00da      	lsls	r2, r3, #3
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9c:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f872 	bl	8000c90 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f86d 	bl	8000c90 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e202      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f1      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d036      	beq.n	8001c46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d019      	beq.n	8001c14 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	430a      	orrs	r2, r1
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f850 	bl	8000c90 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f84b 	bl	8000c90 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1e0      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d0f1      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x242>
 8001c12:	e018      	b.n	8001c46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f836 	bl	8000c90 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f831 	bl	8000c90 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1c6      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d1f1      	bne.n	8001c2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x29e>
 8001c50:	e0b4      	b.n	8001dbc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	201f      	movs	r0, #31
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	055b      	lsls	r3, r3, #21
 8001c62:	4013      	ands	r3, r2
 8001c64:	d110      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0549      	lsls	r1, r1, #21
 8001c70:	430a      	orrs	r2, r1
 8001c72:	61da      	str	r2, [r3, #28]
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	055b      	lsls	r3, r3, #21
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d11a      	bne.n	8001cca <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0049      	lsls	r1, r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fff5 	bl	8000c90 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7fe fff0 	bl	8000c90 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e185      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x33c>
 8001cd2:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	621a      	str	r2, [r3, #32]
 8001cde:	e035      	b.n	8001d4c <HAL_RCC_OscConfig+0x398>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	fffeffff 	.word	0xfffeffff
 8001ce8:	fffbffff 	.word	0xfffbffff
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x35e>
 8001cf8:	4bb6      	ldr	r3, [pc, #728]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001cfa:	6a1a      	ldr	r2, [r3, #32]
 8001cfc:	4bb5      	ldr	r3, [pc, #724]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	621a      	str	r2, [r3, #32]
 8001d04:	4bb3      	ldr	r3, [pc, #716]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4bb2      	ldr	r3, [pc, #712]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	621a      	str	r2, [r3, #32]
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x398>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x380>
 8001d1a:	4bae      	ldr	r3, [pc, #696]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	4bad      	ldr	r3, [pc, #692]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d20:	2104      	movs	r1, #4
 8001d22:	430a      	orrs	r2, r1
 8001d24:	621a      	str	r2, [r3, #32]
 8001d26:	4bab      	ldr	r3, [pc, #684]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	4baa      	ldr	r3, [pc, #680]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	621a      	str	r2, [r3, #32]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0x398>
 8001d34:	4ba7      	ldr	r3, [pc, #668]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	4ba6      	ldr	r3, [pc, #664]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	621a      	str	r2, [r3, #32]
 8001d40:	4ba4      	ldr	r3, [pc, #656]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4ba3      	ldr	r3, [pc, #652]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d46:	2104      	movs	r1, #4
 8001d48:	438a      	bics	r2, r1
 8001d4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d014      	beq.n	8001d7e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7fe ff9c 	bl	8000c90 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e009      	b.n	8001d72 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe ff97 	bl	8000c90 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4a9b      	ldr	r2, [pc, #620]	; (8001fd8 <HAL_RCC_OscConfig+0x624>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e12b      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	2202      	movs	r2, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
 8001d7c:	e013      	b.n	8001da6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7fe ff87 	bl	8000c90 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	e009      	b.n	8001d9c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ff82 	bl	8000c90 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	4a91      	ldr	r2, [pc, #580]	; (8001fd8 <HAL_RCC_OscConfig+0x624>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e116      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	4b8d      	ldr	r3, [pc, #564]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001da6:	231f      	movs	r3, #31
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001db6:	4989      	ldr	r1, [pc, #548]	; (8001fdc <HAL_RCC_OscConfig+0x628>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d12a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd2:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dda:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dde:	4b7d      	ldr	r3, [pc, #500]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff53 	bl	8000c90 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df0:	f7fe ff4e 	bl	8000c90 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0e3      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e02:	4b74      	ldr	r3, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d0f1      	beq.n	8001df0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e0c:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	22f8      	movs	r2, #248	; 0xf8
 8001e12:	4393      	bics	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	00da      	lsls	r2, r3, #3
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
 8001e22:	e034      	b.n	8001e8e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	3305      	adds	r3, #5
 8001e2a:	d111      	bne.n	8001e50 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e2c:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e32:	2104      	movs	r1, #4
 8001e34:	438a      	bics	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	22f8      	movs	r2, #248	; 0xf8
 8001e3e:	4393      	bics	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	00da      	lsls	r2, r3, #3
 8001e48:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4e:	e01e      	b.n	8001e8e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e56:	2104      	movs	r1, #4
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e5c:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	438a      	bics	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7fe ff12 	bl	8000c90 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e72:	f7fe ff0d 	bl	8000c90 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0a2      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f1      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d100      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4e4>
 8001e96:	e097      	b.n	8001fc8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	220c      	movs	r2, #12
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4f2>
 8001ea4:	e06b      	b.n	8001f7e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d14c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001eb4:	494a      	ldr	r1, [pc, #296]	; (8001fe0 <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe fee9 	bl	8000c90 <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fee4 	bl	8000c90 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e079      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	049b      	lsls	r3, r3, #18
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_RCC_OscConfig+0x630>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0449      	lsls	r1, r1, #17
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe feb7 	bl	8000c90 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe feb2 	bl	8000c90 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e047      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x574>
 8001f46:	e03f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x62c>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fe9c 	bl	8000c90 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fe97 	bl	8000c90 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e02c      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5aa>
 8001f7c:	e024      	b.n	8001fc8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01f      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_OscConfig+0x620>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	220f      	movs	r2, #15
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	23f0      	movs	r3, #240	; 0xf0
 8001fb8:	039b      	lsls	r3, r3, #14
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b008      	add	sp, #32
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	efffffff 	.word	0xefffffff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	ffc2ffff 	.word	0xffc2ffff

08001fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b3      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	4013      	ands	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d911      	bls.n	800202e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e09a      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d015      	beq.n	8002064 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2204      	movs	r2, #4
 800203e:	4013      	ands	r3, r2
 8002040:	d006      	beq.n	8002050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002048:	21e0      	movs	r1, #224	; 0xe0
 800204a:	00c9      	lsls	r1, r1, #3
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	22f0      	movs	r2, #240	; 0xf0
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d040      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	4013      	ands	r3, r2
 8002080:	d114      	bne.n	80020ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06e      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	049b      	lsls	r3, r3, #18
 8002096:	4013      	ands	r3, r2
 8002098:	d108      	bne.n	80020ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e062      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2202      	movs	r2, #2
 80020a4:	4013      	ands	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e05b      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fde6 	bl	8000c90 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c8:	e009      	b.n	80020de <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ca:	f7fe fde1 	bl	8000c90 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_RCC_ClockConfig+0x18c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e042      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	220c      	movs	r2, #12
 80020e4:	401a      	ands	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ec      	bne.n	80020ca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d211      	bcs.n	8002122 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x184>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e020      	b.n	8002164 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_RCC_ClockConfig+0x190>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002140:	f000 f820 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002144:	0001      	movs	r1, r0
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x188>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	220f      	movs	r2, #15
 800214e:	4013      	ands	r3, r2
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x194>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	000a      	movs	r2, r1
 8002156:	40da      	lsrs	r2, r3
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x198>)
 800215a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800215c:	2003      	movs	r0, #3
 800215e:	f7fe fd51 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b004      	add	sp, #16
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
 8002174:	00001388 	.word	0x00001388
 8002178:	fffff8ff 	.word	0xfffff8ff
 800217c:	08003864 	.word	0x08003864
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	220c      	movs	r2, #12
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x36>
 80021b2:	e02c      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b6:	613b      	str	r3, [r7, #16]
      break;
 80021b8:	e02c      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	220f      	movs	r2, #15
 80021c0:	4013      	ands	r3, r2
 80021c2:	4a19      	ldr	r2, [pc, #100]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	220f      	movs	r2, #15
 80021ce:	4013      	ands	r3, r2
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_RCC_GetSysClockFreq+0xa8>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	4013      	ands	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4810      	ldr	r0, [pc, #64]	; (8002224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e4:	f7fd ff90 	bl	8000108 <__udivsi3>
 80021e8:	0003      	movs	r3, r0
 80021ea:	001a      	movs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4353      	muls	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e009      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	000a      	movs	r2, r1
 80021f8:	0152      	lsls	r2, r2, #5
 80021fa:	1a52      	subs	r2, r2, r1
 80021fc:	0193      	lsls	r3, r2, #6
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	185b      	adds	r3, r3, r1
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e002      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002210:	613b      	str	r3, [r7, #16]
      break;
 8002212:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002214:	693b      	ldr	r3, [r7, #16]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	0800387c 	.word	0x0800387c
 800222c:	0800388c 	.word	0x0800388c

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_GetHCLKFreq+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002248:	f7ff fff2 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 800224c:	0001      	movs	r1, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	2207      	movs	r2, #7
 8002256:	4013      	ands	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_RCC_GetPCLK1Freq+0x28>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	40d9      	lsrs	r1, r3
 800225e:	000b      	movs	r3, r1
}    
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	08003874 	.word	0x08003874

08002270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	4013      	ands	r3, r2
 800228a:	d100      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800228c:	e08e      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2017      	movs	r0, #23
 8002290:	183b      	adds	r3, r7, r0
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	4013      	ands	r3, r2
 80022a0:	d110      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0549      	lsls	r1, r1, #21
 80022ac:	430a      	orrs	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d11a      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	0049      	lsls	r1, r1, #1
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fcd7 	bl	8000c90 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	e008      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe fcd2 	bl	8000c90 <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e077      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d034      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4013      	ands	r3, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d02c      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a33      	ldr	r2, [pc, #204]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0249      	lsls	r1, r1, #9
 800233c:	430a      	orrs	r2, r1
 800233e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002346:	492e      	ldr	r1, [pc, #184]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002348:	400a      	ands	r2, r1
 800234a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fc99 	bl	8000c90 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	e009      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7fe fc94 	bl	8000c90 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e038      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d0f0      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002388:	4013      	ands	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002392:	430a      	orrs	r2, r1
 8002394:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002396:	2317      	movs	r3, #23
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023a6:	4918      	ldr	r1, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	2203      	movs	r2, #3
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2220      	movs	r2, #32
 80023d0:	4013      	ands	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2210      	movs	r2, #16
 80023da:	4393      	bics	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b006      	add	sp, #24
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	fffffcff 	.word	0xfffffcff
 8002400:	fffeffff 	.word	0xfffeffff
 8002404:	00001388 	.word	0x00001388
 8002408:	efffffff 	.word	0xefffffff

0800240c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e042      	b.n	80024a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223d      	movs	r2, #61	; 0x3d
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223c      	movs	r2, #60	; 0x3c
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fad7 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223d      	movs	r2, #61	; 0x3d
 800243e:	2102      	movs	r1, #2
 8002440:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f000 fa83 	bl	8002958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2246      	movs	r2, #70	; 0x46
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223e      	movs	r2, #62	; 0x3e
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223f      	movs	r2, #63	; 0x3f
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2241      	movs	r2, #65	; 0x41
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2242      	movs	r2, #66	; 0x42
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2243      	movs	r2, #67	; 0x43
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2244      	movs	r2, #68	; 0x44
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2245      	movs	r2, #69	; 0x45
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223d      	movs	r2, #61	; 0x3d
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	223d      	movs	r2, #61	; 0x3d
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d001      	beq.n	80024c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e036      	b.n	8002532 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223d      	movs	r2, #61	; 0x3d
 80024c8:	2102      	movs	r1, #2
 80024ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_TIM_Base_Start_IT+0x90>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00a      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x50>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x50>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_TIM_Base_Start_IT+0x94>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2207      	movs	r2, #7
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d010      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	e007      	b.n	8002530 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d124      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d11d      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2203      	movs	r2, #3
 800256e:	4252      	negs	r2, r2
 8002570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2203      	movs	r2, #3
 8002580:	4013      	ands	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f9ce 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 800258c:	e007      	b.n	800259e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f9c1 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f9cd 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d125      	bne.n	80025fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2204      	movs	r2, #4
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11e      	bne.n	80025fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2205      	movs	r2, #5
 80025c6:	4252      	negs	r2, r2
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 f9a1 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 80025e6:	e007      	b.n	80025f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 f994 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f9a0 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2208      	movs	r2, #8
 8002606:	4013      	ands	r3, r2
 8002608:	2b08      	cmp	r3, #8
 800260a:	d124      	bne.n	8002656 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2208      	movs	r2, #8
 8002614:	4013      	ands	r3, r2
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11d      	bne.n	8002656 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2209      	movs	r2, #9
 8002620:	4252      	negs	r2, r2
 8002622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2204      	movs	r2, #4
 8002628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2203      	movs	r2, #3
 8002632:	4013      	ands	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 f975 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 800263e:	e007      	b.n	8002650 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 f968 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f974 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2210      	movs	r2, #16
 800265e:	4013      	ands	r3, r2
 8002660:	2b10      	cmp	r3, #16
 8002662:	d125      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2210      	movs	r2, #16
 800266c:	4013      	ands	r3, r2
 800266e:	2b10      	cmp	r3, #16
 8002670:	d11e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2211      	movs	r2, #17
 8002678:	4252      	negs	r2, r2
 800267a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2208      	movs	r2, #8
 8002680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	23c0      	movs	r3, #192	; 0xc0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 f948 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8002698:	e007      	b.n	80026aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f93b 	bl	8002918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f947 	bl	8002938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10f      	bne.n	80026de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4252      	negs	r2, r2
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe f8f7 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d10f      	bne.n	800270c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d108      	bne.n	800270c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2281      	movs	r2, #129	; 0x81
 8002700:	4252      	negs	r2, r2
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fa96 	bl	8002c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	4013      	ands	r3, r2
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d10f      	bne.n	800273a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	4013      	ands	r3, r2
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d108      	bne.n	800273a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2241      	movs	r2, #65	; 0x41
 800272e:	4252      	negs	r2, r2
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f907 	bl	8002948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2220      	movs	r2, #32
 8002742:	4013      	ands	r3, r2
 8002744:	2b20      	cmp	r3, #32
 8002746:	d10f      	bne.n	8002768 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	4013      	ands	r3, r2
 8002752:	2b20      	cmp	r3, #32
 8002754:	d108      	bne.n	8002768 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	4252      	negs	r2, r2
 800275e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fa60 	bl	8002c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223c      	movs	r2, #60	; 0x3c
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIM_ConfigClockSource+0x20>
 800278c:	2302      	movs	r3, #2
 800278e:	e0bc      	b.n	800290a <HAL_TIM_ConfigClockSource+0x19a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	223c      	movs	r2, #60	; 0x3c
 8002794:	2101      	movs	r1, #1
 8002796:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	223d      	movs	r2, #61	; 0x3d
 800279c:	2102      	movs	r1, #2
 800279e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2277      	movs	r2, #119	; 0x77
 80027ac:	4393      	bics	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_TIM_ConfigClockSource+0x1a4>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0192      	lsls	r2, r2, #6
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xde>
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0192      	lsls	r2, r2, #6
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d900      	bls.n	80027d6 <HAL_TIM_ConfigClockSource+0x66>
 80027d4:	e088      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0152      	lsls	r2, r2, #5
 80027da:	4293      	cmp	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x70>
 80027de:	e088      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x182>
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0152      	lsls	r2, r2, #5
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d900      	bls.n	80027ea <HAL_TIM_ConfigClockSource+0x7a>
 80027e8:	e07e      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 80027ea:	2b70      	cmp	r3, #112	; 0x70
 80027ec:	d018      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0xb0>
 80027ee:	d900      	bls.n	80027f2 <HAL_TIM_ConfigClockSource+0x82>
 80027f0:	e07a      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d04f      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x126>
 80027f6:	d900      	bls.n	80027fa <HAL_TIM_ConfigClockSource+0x8a>
 80027f8:	e076      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 80027fa:	2b50      	cmp	r3, #80	; 0x50
 80027fc:	d03b      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x106>
 80027fe:	d900      	bls.n	8002802 <HAL_TIM_ConfigClockSource+0x92>
 8002800:	e072      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d057      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x146>
 8002806:	d900      	bls.n	800280a <HAL_TIM_ConfigClockSource+0x9a>
 8002808:	e06e      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 800280a:	2b30      	cmp	r3, #48	; 0x30
 800280c:	d063      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x166>
 800280e:	d86b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d060      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x166>
 8002814:	d868      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d05d      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x166>
 800281a:	2b10      	cmp	r3, #16
 800281c:	d05b      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x166>
 800281e:	e063      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f000 f982 	bl	8002b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2277      	movs	r2, #119	; 0x77
 8002840:	4313      	orrs	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	609a      	str	r2, [r3, #8]
      break;
 800284c:	e052      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f000 f96b 	bl	8002b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	01c9      	lsls	r1, r1, #7
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e03e      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	001a      	movs	r2, r3
 8002884:	f000 f8de 	bl	8002a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f938 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 8002894:	e02e      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	001a      	movs	r2, r3
 80028a4:	f000 f8fc 	bl	8002aa0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2160      	movs	r1, #96	; 0x60
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f928 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e01e      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	001a      	movs	r2, r3
 80028c4:	f000 f8be 	bl	8002a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f918 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e00e      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0019      	movs	r1, r3
 80028e0:	0010      	movs	r0, r2
 80028e2:	f000 f90f 	bl	8002b04 <TIM_ITRx_SetConfig>
      break;
 80028e6:	e005      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80028e8:	230f      	movs	r3, #15
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
      break;
 80028f0:	e000      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80028f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	; 0x3d
 80028f8:	2101      	movs	r1, #1
 80028fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	223c      	movs	r2, #60	; 0x3c
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

  return status;
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	ffff00ff 	.word	0xffff00ff

08002918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <TIM_Base_SetConfig+0xd4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d008      	beq.n	8002982 <TIM_Base_SetConfig+0x2a>
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	05db      	lsls	r3, r3, #23
 8002976:	429a      	cmp	r2, r3
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x2a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <TIM_Base_SetConfig+0xd8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2270      	movs	r2, #112	; 0x70
 8002986:	4393      	bics	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <TIM_Base_SetConfig+0xd4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d014      	beq.n	80029c6 <TIM_Base_SetConfig+0x6e>
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d00f      	beq.n	80029c6 <TIM_Base_SetConfig+0x6e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <TIM_Base_SetConfig+0xd8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_Base_SetConfig+0x6e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <TIM_Base_SetConfig+0xdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0x6e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <TIM_Base_SetConfig+0xe0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0x6e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <TIM_Base_SetConfig+0xe4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <TIM_Base_SetConfig+0xe8>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	4393      	bics	r3, r2
 80029de:	001a      	movs	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <TIM_Base_SetConfig+0xd4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0xbe>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <TIM_Base_SetConfig+0xe0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0xbe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <TIM_Base_SetConfig+0xe4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d103      	bne.n	8002a1e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	615a      	str	r2, [r3, #20]
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b004      	add	sp, #16
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40002000 	.word	0x40002000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800
 8002a40:	fffffcff 	.word	0xfffffcff

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	001a      	movs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	22f0      	movs	r2, #240	; 0xf0
 8002a6e:	4393      	bics	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	220a      	movs	r2, #10
 8002a80:	4393      	bics	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <TIM_TI2_ConfigInputStage+0x60>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	031b      	lsls	r3, r3, #12
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	22a0      	movs	r2, #160	; 0xa0
 8002adc:	4393      	bics	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b006      	add	sp, #24
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	ffff0fff 	.word	0xffff0fff

08002b04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2270      	movs	r2, #112	; 0x70
 8002b18:	4393      	bics	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	2207      	movs	r2, #7
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <TIM_ETR_SetConfig+0x3c>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	021a      	lsls	r2, r3, #8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	ffff00ff 	.word	0xffff00ff

08002b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223c      	movs	r2, #60	; 0x3c
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e042      	b.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	223c      	movs	r2, #60	; 0x3c
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	223d      	movs	r2, #61	; 0x3d
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2270      	movs	r2, #112	; 0x70
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00a      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	05db      	lsls	r3, r3, #23
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d004      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	4393      	bics	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223d      	movs	r2, #61	; 0x3d
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223c      	movs	r2, #60	; 0x3c
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400

08002c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e044      	b.n	8002ce4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2278      	movs	r2, #120	; 0x78
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fd fedf 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 f8a2 	bl	8002dd4 <UART_SetConfig>
 8002c90:	0003      	movs	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e024      	b.n	8002ce4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f9bd 	bl	8003024 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	490d      	ldr	r1, [pc, #52]	; (8002cec <HAL_UART_Init+0xa4>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	212a      	movs	r1, #42	; 0x2a
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fa55 	bl	800318c <UART_CheckIdleState>
 8002ce2:	0003      	movs	r3, r0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	ffffb7ff 	.word	0xffffb7ff

08002cf0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	1dbb      	adds	r3, r7, #6
 8002cfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	589b      	ldr	r3, [r3, r2]
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d145      	bne.n	8002d94 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_UART_Receive_DMA+0x26>
 8002d0e:	1dbb      	adds	r3, r7, #6
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e03d      	b.n	8002d96 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	015b      	lsls	r3, r3, #5
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d109      	bne.n	8002d3a <HAL_UART_Receive_DMA+0x4a>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	d001      	beq.n	8002d3a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e02d      	b.n	8002d96 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	613b      	str	r3, [r7, #16]
  return(result);
 8002d54:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	04c9      	lsls	r1, r1, #19
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d82:	1dbb      	adds	r3, r7, #6
 8002d84:	881a      	ldrh	r2, [r3, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 fb10 	bl	80033b0 <UART_Start_Receive_DMA>
 8002d90:	0003      	movs	r3, r0
 8002d92:	e000      	b.n	8002d96 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b008      	add	sp, #32
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	1cbb      	adds	r3, r7, #2
 8002dca:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ddc:	231e      	movs	r3, #30
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a83      	ldr	r2, [pc, #524]	; (8003010 <UART_SetConfig+0x23c>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a7e      	ldr	r2, [pc, #504]	; (8003014 <UART_SetConfig+0x240>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a75      	ldr	r2, [pc, #468]	; (8003018 <UART_SetConfig+0x244>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e50:	4b72      	ldr	r3, [pc, #456]	; (800301c <UART_SetConfig+0x248>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	2203      	movs	r2, #3
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d00d      	beq.n	8002e78 <UART_SetConfig+0xa4>
 8002e5c:	d81b      	bhi.n	8002e96 <UART_SetConfig+0xc2>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d014      	beq.n	8002e8c <UART_SetConfig+0xb8>
 8002e62:	d818      	bhi.n	8002e96 <UART_SetConfig+0xc2>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <UART_SetConfig+0x9a>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00a      	beq.n	8002e82 <UART_SetConfig+0xae>
 8002e6c:	e013      	b.n	8002e96 <UART_SetConfig+0xc2>
 8002e6e:	231f      	movs	r3, #31
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e012      	b.n	8002e9e <UART_SetConfig+0xca>
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e00d      	b.n	8002e9e <UART_SetConfig+0xca>
 8002e82:	231f      	movs	r3, #31
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e008      	b.n	8002e9e <UART_SetConfig+0xca>
 8002e8c:	231f      	movs	r3, #31
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2208      	movs	r2, #8
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e003      	b.n	8002e9e <UART_SetConfig+0xca>
 8002e96:	231f      	movs	r3, #31
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d15c      	bne.n	8002f66 <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8002eac:	231f      	movs	r3, #31
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d015      	beq.n	8002ee2 <UART_SetConfig+0x10e>
 8002eb6:	dc18      	bgt.n	8002eea <UART_SetConfig+0x116>
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d00d      	beq.n	8002ed8 <UART_SetConfig+0x104>
 8002ebc:	dc15      	bgt.n	8002eea <UART_SetConfig+0x116>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <UART_SetConfig+0xf4>
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d005      	beq.n	8002ed2 <UART_SetConfig+0xfe>
 8002ec6:	e010      	b.n	8002eea <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f7ff f9bc 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	61bb      	str	r3, [r7, #24]
        break;
 8002ed0:	e012      	b.n	8002ef8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <UART_SetConfig+0x24c>)
 8002ed4:	61bb      	str	r3, [r7, #24]
        break;
 8002ed6:	e00f      	b.n	8002ef8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed8:	f7ff f954 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002edc:	0003      	movs	r3, r0
 8002ede:	61bb      	str	r3, [r7, #24]
        break;
 8002ee0:	e00a      	b.n	8002ef8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	61bb      	str	r3, [r7, #24]
        break;
 8002ee8:	e006      	b.n	8002ef8 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eee:	231e      	movs	r3, #30
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
        break;
 8002ef6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d100      	bne.n	8002f00 <UART_SetConfig+0x12c>
 8002efe:	e07a      	b.n	8002ff6 <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	005a      	lsls	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	18d2      	adds	r2, r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0019      	movs	r1, r3
 8002f12:	0010      	movs	r0, r2
 8002f14:	f7fd f8f8 	bl	8000108 <__udivsi3>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	d91c      	bls.n	8002f5c <UART_SetConfig+0x188>
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	025b      	lsls	r3, r3, #9
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d217      	bcs.n	8002f5c <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	200e      	movs	r0, #14
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	210f      	movs	r1, #15
 8002f36:	438a      	bics	r2, r1
 8002f38:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2207      	movs	r2, #7
 8002f42:	4013      	ands	r3, r2
 8002f44:	b299      	uxth	r1, r3
 8002f46:	183b      	adds	r3, r7, r0
 8002f48:	183a      	adds	r2, r7, r0
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	183a      	adds	r2, r7, r0
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e04c      	b.n	8002ff6 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002f5c:	231e      	movs	r3, #30
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e047      	b.n	8002ff6 <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f66:	231f      	movs	r3, #31
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d015      	beq.n	8002f9c <UART_SetConfig+0x1c8>
 8002f70:	dc18      	bgt.n	8002fa4 <UART_SetConfig+0x1d0>
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d00d      	beq.n	8002f92 <UART_SetConfig+0x1be>
 8002f76:	dc15      	bgt.n	8002fa4 <UART_SetConfig+0x1d0>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <UART_SetConfig+0x1ae>
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d005      	beq.n	8002f8c <UART_SetConfig+0x1b8>
 8002f80:	e010      	b.n	8002fa4 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f82:	f7ff f95f 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 8002f86:	0003      	movs	r3, r0
 8002f88:	61bb      	str	r3, [r7, #24]
        break;
 8002f8a:	e012      	b.n	8002fb2 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <UART_SetConfig+0x24c>)
 8002f8e:	61bb      	str	r3, [r7, #24]
        break;
 8002f90:	e00f      	b.n	8002fb2 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f92:	f7ff f8f7 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]
        break;
 8002f9a:	e00a      	b.n	8002fb2 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	61bb      	str	r3, [r7, #24]
        break;
 8002fa2:	e006      	b.n	8002fb2 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fa8:	231e      	movs	r3, #30
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
        break;
 8002fb0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01e      	beq.n	8002ff6 <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	085a      	lsrs	r2, r3, #1
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	18d2      	adds	r2, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f7fd f89d 	bl	8000108 <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d90a      	bls.n	8002fee <UART_SetConfig+0x21a>
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	025b      	lsls	r3, r3, #9
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d205      	bcs.n	8002fee <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	e003      	b.n	8002ff6 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8002fee:	231e      	movs	r3, #30
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003002:	231e      	movs	r3, #30
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b008      	add	sp, #32
 800300e:	bd80      	pop	{r7, pc}
 8003010:	ffff69f3 	.word	0xffff69f3
 8003014:	ffffcfff 	.word	0xffffcfff
 8003018:	fffff4ff 	.word	0xfffff4ff
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <UART_AdvFeatureConfig+0x144>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2202      	movs	r2, #2
 8003054:	4013      	ands	r3, r2
 8003056:	d00b      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a43      	ldr	r2, [pc, #268]	; (800316c <UART_AdvFeatureConfig+0x148>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2204      	movs	r2, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d00b      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <UART_AdvFeatureConfig+0x14c>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2208      	movs	r2, #8
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a34      	ldr	r2, [pc, #208]	; (8003174 <UART_AdvFeatureConfig+0x150>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2210      	movs	r2, #16
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <UART_AdvFeatureConfig+0x154>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2220      	movs	r2, #32
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <UART_AdvFeatureConfig+0x158>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	4013      	ands	r3, r2
 8003100:	d01d      	beq.n	800313e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <UART_AdvFeatureConfig+0x15c>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	035b      	lsls	r3, r3, #13
 8003122:	429a      	cmp	r2, r3
 8003124:	d10b      	bne.n	800313e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a15      	ldr	r2, [pc, #84]	; (8003184 <UART_AdvFeatureConfig+0x160>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	4013      	ands	r3, r2
 8003146:	d00b      	beq.n	8003160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <UART_AdvFeatureConfig+0x164>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fffdffff 	.word	0xfffdffff
 800316c:	fffeffff 	.word	0xfffeffff
 8003170:	fffbffff 	.word	0xfffbffff
 8003174:	ffff7fff 	.word	0xffff7fff
 8003178:	ffffefff 	.word	0xffffefff
 800317c:	ffffdfff 	.word	0xffffdfff
 8003180:	ffefffff 	.word	0xffefffff
 8003184:	ff9fffff 	.word	0xff9fffff
 8003188:	fff7ffff 	.word	0xfff7ffff

0800318c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b092      	sub	sp, #72	; 0x48
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2284      	movs	r2, #132	; 0x84
 8003198:	2100      	movs	r1, #0
 800319a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800319c:	f7fd fd78 	bl	8000c90 <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2208      	movs	r2, #8
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d12c      	bne.n	800320c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0391      	lsls	r1, r2, #14
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4a46      	ldr	r2, [pc, #280]	; (80032d4 <UART_CheckIdleState+0x148>)
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	f000 f88c 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d021      	beq.n	800320c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c8:	f3ef 8310 	mrs	r3, PRIMASK
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d2:	2301      	movs	r3, #1
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	438a      	bics	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2278      	movs	r2, #120	; 0x78
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e05f      	b.n	80032cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2204      	movs	r2, #4
 8003214:	4013      	ands	r3, r2
 8003216:	2b04      	cmp	r3, #4
 8003218:	d146      	bne.n	80032a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	03d1      	lsls	r1, r2, #15
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <UART_CheckIdleState+0x148>)
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	f000 f858 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d03b      	beq.n	80032a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003230:	f3ef 8310 	mrs	r3, PRIMASK
 8003234:	60fb      	str	r3, [r7, #12]
  return(result);
 8003236:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
 800323a:	2301      	movs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4921      	ldr	r1, [pc, #132]	; (80032d8 <UART_CheckIdleState+0x14c>)
 8003252:	400a      	ands	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003262:	f3ef 8310 	mrs	r3, PRIMASK
 8003266:	61bb      	str	r3, [r7, #24]
  return(result);
 8003268:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
 800326c:	2301      	movs	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	2120      	movs	r1, #32
 800329a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2278      	movs	r2, #120	; 0x78
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e011      	b.n	80032cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	2120      	movs	r1, #32
 80032b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2278      	movs	r2, #120	; 0x78
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b010      	add	sp, #64	; 0x40
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	01ffffff 	.word	0x01ffffff
 80032d8:	fffffedf 	.word	0xfffffedf

080032dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ec:	e04b      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3301      	adds	r3, #1
 80032f2:	d048      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f4:	f7fd fccc 	bl	8000c90 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04b      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2204      	movs	r2, #4
 8003316:	4013      	ands	r3, r2
 8003318:	d035      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	2208      	movs	r2, #8
 8003322:	4013      	ands	r3, r2
 8003324:	2b08      	cmp	r3, #8
 8003326:	d111      	bne.n	800334c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2208      	movs	r2, #8
 800332e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f900 	bl	8003538 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2284      	movs	r2, #132	; 0x84
 800333c:	2108      	movs	r1, #8
 800333e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2278      	movs	r2, #120	; 0x78
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02c      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	401a      	ands	r2, r3
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	429a      	cmp	r2, r3
 800335e:	d112      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 f8e3 	bl	8003538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2284      	movs	r2, #132	; 0x84
 8003376:	2120      	movs	r1, #32
 8003378:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2278      	movs	r2, #120	; 0x78
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e00f      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	425a      	negs	r2, r3
 8003396:	4153      	adcs	r3, r2
 8003398:	b2db      	uxtb	r3, r3
 800339a:	001a      	movs	r2, r3
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d0a4      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b090      	sub	sp, #64	; 0x40
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	1dbb      	adds	r3, r7, #6
 80033bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1dba      	adds	r2, r7, #6
 80033c8:	2158      	movs	r1, #88	; 0x58
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2284      	movs	r2, #132	; 0x84
 80033d2:	2100      	movs	r1, #0
 80033d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	2122      	movs	r1, #34	; 0x22
 80033dc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d028      	beq.n	8003438 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <UART_Start_Receive_DMA+0x134>)
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4a3d      	ldr	r2, [pc, #244]	; (80034e8 <UART_Start_Receive_DMA+0x138>)
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <UART_Start_Receive_DMA+0x13c>)
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	0019      	movs	r1, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	001a      	movs	r2, r3
 8003418:	1dbb      	adds	r3, r7, #6
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	f7fd ffda 	bl	80013d4 <HAL_DMA_Start_IT>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d009      	beq.n	8003438 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2284      	movs	r2, #132	; 0x84
 8003428:	2110      	movs	r1, #16
 800342a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	2120      	movs	r1, #32
 8003432:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e050      	b.n	80034da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d019      	beq.n	8003474 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344a:	2301      	movs	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	0049      	lsls	r1, r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	613b      	str	r3, [r7, #16]
  return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
 800347e:	2301      	movs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
 80034b0:	2301      	movs	r3, #1
 80034b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b010      	add	sp, #64	; 0x40
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	08003601 	.word	0x08003601
 80034e8:	0800372d 	.word	0x0800372d
 80034ec:	0800376f 	.word	0x0800376f

080034f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	2301      	movs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	21c0      	movs	r1, #192	; 0xc0
 800351a:	438a      	bics	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	; 0x38
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	617b      	str	r3, [r7, #20]
  return(result);
 8003546:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
 800354a:	2301      	movs	r3, #1
 800354c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4926      	ldr	r1, [pc, #152]	; (80035fc <UART_EndRxTransfer+0xc4>)
 8003562:	400a      	ands	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f383 8810 	msr	PRIMASK, r3
}
 8003570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003572:	f3ef 8310 	mrs	r3, PRIMASK
 8003576:	623b      	str	r3, [r7, #32]
  return(result);
 8003578:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	438a      	bics	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	f383 8810 	msr	PRIMASK, r3
}
 80035a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d118      	bne.n	80035de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	2301      	movs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2110      	movs	r1, #16
 80035ce:	438a      	bics	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	2120      	movs	r1, #32
 80035e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00e      	add	sp, #56	; 0x38
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	fffffedf 	.word	0xfffffedf

08003600 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b094      	sub	sp, #80	; 0x50
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d06f      	beq.n	80036f6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	225a      	movs	r2, #90	; 0x5a
 800361a:	2100      	movs	r1, #0
 800361c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8310 	mrs	r3, PRIMASK
 8003622:	61bb      	str	r3, [r7, #24]
  return(result);
 8003624:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	493a      	ldr	r1, [pc, #232]	; (8003728 <UART_DMAReceiveCplt+0x128>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
 800365a:	2301      	movs	r3, #1
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368a:	643b      	str	r3, [r7, #64]	; 0x40
 800368c:	2301      	movs	r3, #1
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2140      	movs	r1, #64	; 0x40
 80036a4:	438a      	bics	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d118      	bne.n	80036f6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036ca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	2301      	movs	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2110      	movs	r1, #16
 80036e6:	438a      	bics	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	2200      	movs	r2, #0
 80036fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003700:	2b01      	cmp	r3, #1
 8003702:	d108      	bne.n	8003716 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003706:	2258      	movs	r2, #88	; 0x58
 8003708:	5a9a      	ldrh	r2, [r3, r2]
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	0011      	movs	r1, r2
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff fb55 	bl	8002dbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003714:	e003      	b.n	800371e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	0018      	movs	r0, r3
 800371a:	f7fc fdb1 	bl	8000280 <HAL_UART_RxCpltCallback>
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b014      	add	sp, #80	; 0x50
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	fffffeff 	.word	0xfffffeff

0800372c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10a      	bne.n	800375e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2258      	movs	r2, #88	; 0x58
 800374c:	5a9b      	ldrh	r3, [r3, r2]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f7ff fb31 	bl	8002dbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800375c:	e003      	b.n	8003766 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fb1c 	bl	8002d9e <HAL_UART_RxHalfCpltCallback>
}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003780:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	589b      	ldr	r3, [r3, r2]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	4013      	ands	r3, r2
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d10a      	bne.n	80037ae <UART_DMAError+0x40>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b21      	cmp	r3, #33	; 0x21
 800379c:	d107      	bne.n	80037ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2252      	movs	r2, #82	; 0x52
 80037a2:	2100      	movs	r1, #0
 80037a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff fea1 	bl	80034f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2240      	movs	r2, #64	; 0x40
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d10a      	bne.n	80037d2 <UART_DMAError+0x64>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	d107      	bne.n	80037d2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	225a      	movs	r2, #90	; 0x5a
 80037c6:	2100      	movs	r1, #0
 80037c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff feb3 	bl	8003538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2284      	movs	r2, #132	; 0x84
 80037d6:	589b      	ldr	r3, [r3, r2]
 80037d8:	2210      	movs	r2, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2184      	movs	r1, #132	; 0x84
 80037e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff fae2 	bl	8002dae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b006      	add	sp, #24
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	2600      	movs	r6, #0
 80037f8:	4d0c      	ldr	r5, [pc, #48]	; (800382c <__libc_init_array+0x38>)
 80037fa:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fc:	1b64      	subs	r4, r4, r5
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	2600      	movs	r6, #0
 8003806:	f000 f821 	bl	800384c <_init>
 800380a:	4d0a      	ldr	r5, [pc, #40]	; (8003834 <__libc_init_array+0x40>)
 800380c:	4c0a      	ldr	r4, [pc, #40]	; (8003838 <__libc_init_array+0x44>)
 800380e:	1b64      	subs	r4, r4, r5
 8003810:	10a4      	asrs	r4, r4, #2
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	00b3      	lsls	r3, r6, #2
 800381a:	58eb      	ldr	r3, [r5, r3]
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	00b3      	lsls	r3, r6, #2
 8003824:	58eb      	ldr	r3, [r5, r3]
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	0800389c 	.word	0x0800389c
 8003830:	0800389c 	.word	0x0800389c
 8003834:	0800389c 	.word	0x0800389c
 8003838:	080038a0 	.word	0x080038a0

0800383c <memset>:
 800383c:	0003      	movs	r3, r0
 800383e:	1882      	adds	r2, r0, r2
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	7019      	strb	r1, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
