
Stepper_control_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080057fc  080057fc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057fc  080057fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005804  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000018  08005818  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08005818  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f290  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b3  00000000  00000000  0002f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012145  00000000  00000000  00032f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114d2  00000000  00000000  0004505d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ac03  00000000  00000000  0005652f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003170  00000000  00000000  000c1184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800572c 	.word	0x0800572c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	0800572c 	.word	0x0800572c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff23 	bl	800107c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fe73 	bl	8000f2c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff15 	bl	800107c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ff0b 	bl	800107c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fe9b 	bl	8000fb0 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe91 	bl	8000fb0 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_ul2d>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	0006      	movs	r6, r0
 80002a0:	0008      	movs	r0, r1
 80002a2:	f001 fdb3 	bl	8001e0c <__aeabi_ui2d>
 80002a6:	2200      	movs	r2, #0
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <__aeabi_ul2d+0x28>)
 80002aa:	f000 ff4b 	bl	8001144 <__aeabi_dmul>
 80002ae:	000d      	movs	r5, r1
 80002b0:	0004      	movs	r4, r0
 80002b2:	0030      	movs	r0, r6
 80002b4:	f001 fdaa 	bl	8001e0c <__aeabi_ui2d>
 80002b8:	002b      	movs	r3, r5
 80002ba:	0022      	movs	r2, r4
 80002bc:	f000 f804 	bl	80002c8 <__aeabi_dadd>
 80002c0:	bd70      	pop	{r4, r5, r6, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	41f00000 	.word	0x41f00000

080002c8 <__aeabi_dadd>:
 80002c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ca:	464f      	mov	r7, r9
 80002cc:	4646      	mov	r6, r8
 80002ce:	46d6      	mov	lr, sl
 80002d0:	000d      	movs	r5, r1
 80002d2:	0004      	movs	r4, r0
 80002d4:	b5c0      	push	{r6, r7, lr}
 80002d6:	001f      	movs	r7, r3
 80002d8:	0011      	movs	r1, r2
 80002da:	0328      	lsls	r0, r5, #12
 80002dc:	0f62      	lsrs	r2, r4, #29
 80002de:	0a40      	lsrs	r0, r0, #9
 80002e0:	4310      	orrs	r0, r2
 80002e2:	007a      	lsls	r2, r7, #1
 80002e4:	0d52      	lsrs	r2, r2, #21
 80002e6:	00e3      	lsls	r3, r4, #3
 80002e8:	033c      	lsls	r4, r7, #12
 80002ea:	4691      	mov	r9, r2
 80002ec:	0a64      	lsrs	r4, r4, #9
 80002ee:	0ffa      	lsrs	r2, r7, #31
 80002f0:	0f4f      	lsrs	r7, r1, #29
 80002f2:	006e      	lsls	r6, r5, #1
 80002f4:	4327      	orrs	r7, r4
 80002f6:	4692      	mov	sl, r2
 80002f8:	46b8      	mov	r8, r7
 80002fa:	0d76      	lsrs	r6, r6, #21
 80002fc:	0fed      	lsrs	r5, r5, #31
 80002fe:	00c9      	lsls	r1, r1, #3
 8000300:	4295      	cmp	r5, r2
 8000302:	d100      	bne.n	8000306 <__aeabi_dadd+0x3e>
 8000304:	e099      	b.n	800043a <__aeabi_dadd+0x172>
 8000306:	464c      	mov	r4, r9
 8000308:	1b34      	subs	r4, r6, r4
 800030a:	46a4      	mov	ip, r4
 800030c:	2c00      	cmp	r4, #0
 800030e:	dc00      	bgt.n	8000312 <__aeabi_dadd+0x4a>
 8000310:	e07c      	b.n	800040c <__aeabi_dadd+0x144>
 8000312:	464a      	mov	r2, r9
 8000314:	2a00      	cmp	r2, #0
 8000316:	d100      	bne.n	800031a <__aeabi_dadd+0x52>
 8000318:	e0b8      	b.n	800048c <__aeabi_dadd+0x1c4>
 800031a:	4ac5      	ldr	r2, [pc, #788]	; (8000630 <__aeabi_dadd+0x368>)
 800031c:	4296      	cmp	r6, r2
 800031e:	d100      	bne.n	8000322 <__aeabi_dadd+0x5a>
 8000320:	e11c      	b.n	800055c <__aeabi_dadd+0x294>
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	003c      	movs	r4, r7
 8000326:	0412      	lsls	r2, r2, #16
 8000328:	4314      	orrs	r4, r2
 800032a:	46a0      	mov	r8, r4
 800032c:	4662      	mov	r2, ip
 800032e:	2a38      	cmp	r2, #56	; 0x38
 8000330:	dd00      	ble.n	8000334 <__aeabi_dadd+0x6c>
 8000332:	e161      	b.n	80005f8 <__aeabi_dadd+0x330>
 8000334:	2a1f      	cmp	r2, #31
 8000336:	dd00      	ble.n	800033a <__aeabi_dadd+0x72>
 8000338:	e1cc      	b.n	80006d4 <__aeabi_dadd+0x40c>
 800033a:	4664      	mov	r4, ip
 800033c:	2220      	movs	r2, #32
 800033e:	1b12      	subs	r2, r2, r4
 8000340:	4644      	mov	r4, r8
 8000342:	4094      	lsls	r4, r2
 8000344:	000f      	movs	r7, r1
 8000346:	46a1      	mov	r9, r4
 8000348:	4664      	mov	r4, ip
 800034a:	4091      	lsls	r1, r2
 800034c:	40e7      	lsrs	r7, r4
 800034e:	464c      	mov	r4, r9
 8000350:	1e4a      	subs	r2, r1, #1
 8000352:	4191      	sbcs	r1, r2
 8000354:	433c      	orrs	r4, r7
 8000356:	4642      	mov	r2, r8
 8000358:	4321      	orrs	r1, r4
 800035a:	4664      	mov	r4, ip
 800035c:	40e2      	lsrs	r2, r4
 800035e:	1a80      	subs	r0, r0, r2
 8000360:	1a5c      	subs	r4, r3, r1
 8000362:	42a3      	cmp	r3, r4
 8000364:	419b      	sbcs	r3, r3
 8000366:	425f      	negs	r7, r3
 8000368:	1bc7      	subs	r7, r0, r7
 800036a:	023b      	lsls	r3, r7, #8
 800036c:	d400      	bmi.n	8000370 <__aeabi_dadd+0xa8>
 800036e:	e0d0      	b.n	8000512 <__aeabi_dadd+0x24a>
 8000370:	027f      	lsls	r7, r7, #9
 8000372:	0a7f      	lsrs	r7, r7, #9
 8000374:	2f00      	cmp	r7, #0
 8000376:	d100      	bne.n	800037a <__aeabi_dadd+0xb2>
 8000378:	e0ff      	b.n	800057a <__aeabi_dadd+0x2b2>
 800037a:	0038      	movs	r0, r7
 800037c:	f001 fd6c 	bl	8001e58 <__clzsi2>
 8000380:	0001      	movs	r1, r0
 8000382:	3908      	subs	r1, #8
 8000384:	2320      	movs	r3, #32
 8000386:	0022      	movs	r2, r4
 8000388:	1a5b      	subs	r3, r3, r1
 800038a:	408f      	lsls	r7, r1
 800038c:	40da      	lsrs	r2, r3
 800038e:	408c      	lsls	r4, r1
 8000390:	4317      	orrs	r7, r2
 8000392:	42b1      	cmp	r1, r6
 8000394:	da00      	bge.n	8000398 <__aeabi_dadd+0xd0>
 8000396:	e0ff      	b.n	8000598 <__aeabi_dadd+0x2d0>
 8000398:	1b89      	subs	r1, r1, r6
 800039a:	1c4b      	adds	r3, r1, #1
 800039c:	2b1f      	cmp	r3, #31
 800039e:	dd00      	ble.n	80003a2 <__aeabi_dadd+0xda>
 80003a0:	e0a8      	b.n	80004f4 <__aeabi_dadd+0x22c>
 80003a2:	2220      	movs	r2, #32
 80003a4:	0039      	movs	r1, r7
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	0020      	movs	r0, r4
 80003aa:	4094      	lsls	r4, r2
 80003ac:	4091      	lsls	r1, r2
 80003ae:	40d8      	lsrs	r0, r3
 80003b0:	1e62      	subs	r2, r4, #1
 80003b2:	4194      	sbcs	r4, r2
 80003b4:	40df      	lsrs	r7, r3
 80003b6:	2600      	movs	r6, #0
 80003b8:	4301      	orrs	r1, r0
 80003ba:	430c      	orrs	r4, r1
 80003bc:	0763      	lsls	r3, r4, #29
 80003be:	d009      	beq.n	80003d4 <__aeabi_dadd+0x10c>
 80003c0:	230f      	movs	r3, #15
 80003c2:	4023      	ands	r3, r4
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	d005      	beq.n	80003d4 <__aeabi_dadd+0x10c>
 80003c8:	1d23      	adds	r3, r4, #4
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	41a4      	sbcs	r4, r4
 80003ce:	4264      	negs	r4, r4
 80003d0:	193f      	adds	r7, r7, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	023b      	lsls	r3, r7, #8
 80003d6:	d400      	bmi.n	80003da <__aeabi_dadd+0x112>
 80003d8:	e09e      	b.n	8000518 <__aeabi_dadd+0x250>
 80003da:	4b95      	ldr	r3, [pc, #596]	; (8000630 <__aeabi_dadd+0x368>)
 80003dc:	3601      	adds	r6, #1
 80003de:	429e      	cmp	r6, r3
 80003e0:	d100      	bne.n	80003e4 <__aeabi_dadd+0x11c>
 80003e2:	e0b7      	b.n	8000554 <__aeabi_dadd+0x28c>
 80003e4:	4a93      	ldr	r2, [pc, #588]	; (8000634 <__aeabi_dadd+0x36c>)
 80003e6:	08e4      	lsrs	r4, r4, #3
 80003e8:	4017      	ands	r7, r2
 80003ea:	077b      	lsls	r3, r7, #29
 80003ec:	0571      	lsls	r1, r6, #21
 80003ee:	027f      	lsls	r7, r7, #9
 80003f0:	4323      	orrs	r3, r4
 80003f2:	0b3f      	lsrs	r7, r7, #12
 80003f4:	0d4a      	lsrs	r2, r1, #21
 80003f6:	0512      	lsls	r2, r2, #20
 80003f8:	433a      	orrs	r2, r7
 80003fa:	07ed      	lsls	r5, r5, #31
 80003fc:	432a      	orrs	r2, r5
 80003fe:	0018      	movs	r0, r3
 8000400:	0011      	movs	r1, r2
 8000402:	bce0      	pop	{r5, r6, r7}
 8000404:	46ba      	mov	sl, r7
 8000406:	46b1      	mov	r9, r6
 8000408:	46a8      	mov	r8, r5
 800040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800040c:	2c00      	cmp	r4, #0
 800040e:	d04b      	beq.n	80004a8 <__aeabi_dadd+0x1e0>
 8000410:	464c      	mov	r4, r9
 8000412:	1ba4      	subs	r4, r4, r6
 8000414:	46a4      	mov	ip, r4
 8000416:	2e00      	cmp	r6, #0
 8000418:	d000      	beq.n	800041c <__aeabi_dadd+0x154>
 800041a:	e123      	b.n	8000664 <__aeabi_dadd+0x39c>
 800041c:	0004      	movs	r4, r0
 800041e:	431c      	orrs	r4, r3
 8000420:	d100      	bne.n	8000424 <__aeabi_dadd+0x15c>
 8000422:	e1af      	b.n	8000784 <__aeabi_dadd+0x4bc>
 8000424:	4662      	mov	r2, ip
 8000426:	1e54      	subs	r4, r2, #1
 8000428:	2a01      	cmp	r2, #1
 800042a:	d100      	bne.n	800042e <__aeabi_dadd+0x166>
 800042c:	e215      	b.n	800085a <__aeabi_dadd+0x592>
 800042e:	4d80      	ldr	r5, [pc, #512]	; (8000630 <__aeabi_dadd+0x368>)
 8000430:	45ac      	cmp	ip, r5
 8000432:	d100      	bne.n	8000436 <__aeabi_dadd+0x16e>
 8000434:	e1c8      	b.n	80007c8 <__aeabi_dadd+0x500>
 8000436:	46a4      	mov	ip, r4
 8000438:	e11b      	b.n	8000672 <__aeabi_dadd+0x3aa>
 800043a:	464a      	mov	r2, r9
 800043c:	1ab2      	subs	r2, r6, r2
 800043e:	4694      	mov	ip, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	dc00      	bgt.n	8000446 <__aeabi_dadd+0x17e>
 8000444:	e0ac      	b.n	80005a0 <__aeabi_dadd+0x2d8>
 8000446:	464a      	mov	r2, r9
 8000448:	2a00      	cmp	r2, #0
 800044a:	d043      	beq.n	80004d4 <__aeabi_dadd+0x20c>
 800044c:	4a78      	ldr	r2, [pc, #480]	; (8000630 <__aeabi_dadd+0x368>)
 800044e:	4296      	cmp	r6, r2
 8000450:	d100      	bne.n	8000454 <__aeabi_dadd+0x18c>
 8000452:	e1af      	b.n	80007b4 <__aeabi_dadd+0x4ec>
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	003c      	movs	r4, r7
 8000458:	0412      	lsls	r2, r2, #16
 800045a:	4314      	orrs	r4, r2
 800045c:	46a0      	mov	r8, r4
 800045e:	4662      	mov	r2, ip
 8000460:	2a38      	cmp	r2, #56	; 0x38
 8000462:	dc67      	bgt.n	8000534 <__aeabi_dadd+0x26c>
 8000464:	2a1f      	cmp	r2, #31
 8000466:	dc00      	bgt.n	800046a <__aeabi_dadd+0x1a2>
 8000468:	e15f      	b.n	800072a <__aeabi_dadd+0x462>
 800046a:	4647      	mov	r7, r8
 800046c:	3a20      	subs	r2, #32
 800046e:	40d7      	lsrs	r7, r2
 8000470:	4662      	mov	r2, ip
 8000472:	2a20      	cmp	r2, #32
 8000474:	d005      	beq.n	8000482 <__aeabi_dadd+0x1ba>
 8000476:	4664      	mov	r4, ip
 8000478:	2240      	movs	r2, #64	; 0x40
 800047a:	1b12      	subs	r2, r2, r4
 800047c:	4644      	mov	r4, r8
 800047e:	4094      	lsls	r4, r2
 8000480:	4321      	orrs	r1, r4
 8000482:	1e4a      	subs	r2, r1, #1
 8000484:	4191      	sbcs	r1, r2
 8000486:	000c      	movs	r4, r1
 8000488:	433c      	orrs	r4, r7
 800048a:	e057      	b.n	800053c <__aeabi_dadd+0x274>
 800048c:	003a      	movs	r2, r7
 800048e:	430a      	orrs	r2, r1
 8000490:	d100      	bne.n	8000494 <__aeabi_dadd+0x1cc>
 8000492:	e105      	b.n	80006a0 <__aeabi_dadd+0x3d8>
 8000494:	0022      	movs	r2, r4
 8000496:	3a01      	subs	r2, #1
 8000498:	2c01      	cmp	r4, #1
 800049a:	d100      	bne.n	800049e <__aeabi_dadd+0x1d6>
 800049c:	e182      	b.n	80007a4 <__aeabi_dadd+0x4dc>
 800049e:	4c64      	ldr	r4, [pc, #400]	; (8000630 <__aeabi_dadd+0x368>)
 80004a0:	45a4      	cmp	ip, r4
 80004a2:	d05b      	beq.n	800055c <__aeabi_dadd+0x294>
 80004a4:	4694      	mov	ip, r2
 80004a6:	e741      	b.n	800032c <__aeabi_dadd+0x64>
 80004a8:	4c63      	ldr	r4, [pc, #396]	; (8000638 <__aeabi_dadd+0x370>)
 80004aa:	1c77      	adds	r7, r6, #1
 80004ac:	4227      	tst	r7, r4
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x1ea>
 80004b0:	e0c4      	b.n	800063c <__aeabi_dadd+0x374>
 80004b2:	0004      	movs	r4, r0
 80004b4:	431c      	orrs	r4, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_dadd+0x1f4>
 80004ba:	e169      	b.n	8000790 <__aeabi_dadd+0x4c8>
 80004bc:	2c00      	cmp	r4, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x1fa>
 80004c0:	e1bf      	b.n	8000842 <__aeabi_dadd+0x57a>
 80004c2:	4644      	mov	r4, r8
 80004c4:	430c      	orrs	r4, r1
 80004c6:	d000      	beq.n	80004ca <__aeabi_dadd+0x202>
 80004c8:	e1d0      	b.n	800086c <__aeabi_dadd+0x5a4>
 80004ca:	0742      	lsls	r2, r0, #29
 80004cc:	08db      	lsrs	r3, r3, #3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	08c0      	lsrs	r0, r0, #3
 80004d2:	e029      	b.n	8000528 <__aeabi_dadd+0x260>
 80004d4:	003a      	movs	r2, r7
 80004d6:	430a      	orrs	r2, r1
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0x214>
 80004da:	e170      	b.n	80007be <__aeabi_dadd+0x4f6>
 80004dc:	4662      	mov	r2, ip
 80004de:	4664      	mov	r4, ip
 80004e0:	3a01      	subs	r2, #1
 80004e2:	2c01      	cmp	r4, #1
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x220>
 80004e6:	e0e0      	b.n	80006aa <__aeabi_dadd+0x3e2>
 80004e8:	4c51      	ldr	r4, [pc, #324]	; (8000630 <__aeabi_dadd+0x368>)
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d100      	bne.n	80004f0 <__aeabi_dadd+0x228>
 80004ee:	e161      	b.n	80007b4 <__aeabi_dadd+0x4ec>
 80004f0:	4694      	mov	ip, r2
 80004f2:	e7b4      	b.n	800045e <__aeabi_dadd+0x196>
 80004f4:	003a      	movs	r2, r7
 80004f6:	391f      	subs	r1, #31
 80004f8:	40ca      	lsrs	r2, r1
 80004fa:	0011      	movs	r1, r2
 80004fc:	2b20      	cmp	r3, #32
 80004fe:	d003      	beq.n	8000508 <__aeabi_dadd+0x240>
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	409f      	lsls	r7, r3
 8000506:	433c      	orrs	r4, r7
 8000508:	1e63      	subs	r3, r4, #1
 800050a:	419c      	sbcs	r4, r3
 800050c:	2700      	movs	r7, #0
 800050e:	2600      	movs	r6, #0
 8000510:	430c      	orrs	r4, r1
 8000512:	0763      	lsls	r3, r4, #29
 8000514:	d000      	beq.n	8000518 <__aeabi_dadd+0x250>
 8000516:	e753      	b.n	80003c0 <__aeabi_dadd+0xf8>
 8000518:	46b4      	mov	ip, r6
 800051a:	08e4      	lsrs	r4, r4, #3
 800051c:	077b      	lsls	r3, r7, #29
 800051e:	4323      	orrs	r3, r4
 8000520:	08f8      	lsrs	r0, r7, #3
 8000522:	4a43      	ldr	r2, [pc, #268]	; (8000630 <__aeabi_dadd+0x368>)
 8000524:	4594      	cmp	ip, r2
 8000526:	d01d      	beq.n	8000564 <__aeabi_dadd+0x29c>
 8000528:	4662      	mov	r2, ip
 800052a:	0307      	lsls	r7, r0, #12
 800052c:	0552      	lsls	r2, r2, #21
 800052e:	0b3f      	lsrs	r7, r7, #12
 8000530:	0d52      	lsrs	r2, r2, #21
 8000532:	e760      	b.n	80003f6 <__aeabi_dadd+0x12e>
 8000534:	4644      	mov	r4, r8
 8000536:	430c      	orrs	r4, r1
 8000538:	1e62      	subs	r2, r4, #1
 800053a:	4194      	sbcs	r4, r2
 800053c:	18e4      	adds	r4, r4, r3
 800053e:	429c      	cmp	r4, r3
 8000540:	419b      	sbcs	r3, r3
 8000542:	425f      	negs	r7, r3
 8000544:	183f      	adds	r7, r7, r0
 8000546:	023b      	lsls	r3, r7, #8
 8000548:	d5e3      	bpl.n	8000512 <__aeabi_dadd+0x24a>
 800054a:	4b39      	ldr	r3, [pc, #228]	; (8000630 <__aeabi_dadd+0x368>)
 800054c:	3601      	adds	r6, #1
 800054e:	429e      	cmp	r6, r3
 8000550:	d000      	beq.n	8000554 <__aeabi_dadd+0x28c>
 8000552:	e0b5      	b.n	80006c0 <__aeabi_dadd+0x3f8>
 8000554:	0032      	movs	r2, r6
 8000556:	2700      	movs	r7, #0
 8000558:	2300      	movs	r3, #0
 800055a:	e74c      	b.n	80003f6 <__aeabi_dadd+0x12e>
 800055c:	0742      	lsls	r2, r0, #29
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	4313      	orrs	r3, r2
 8000562:	08c0      	lsrs	r0, r0, #3
 8000564:	001a      	movs	r2, r3
 8000566:	4302      	orrs	r2, r0
 8000568:	d100      	bne.n	800056c <__aeabi_dadd+0x2a4>
 800056a:	e1e1      	b.n	8000930 <__aeabi_dadd+0x668>
 800056c:	2780      	movs	r7, #128	; 0x80
 800056e:	033f      	lsls	r7, r7, #12
 8000570:	4307      	orrs	r7, r0
 8000572:	033f      	lsls	r7, r7, #12
 8000574:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <__aeabi_dadd+0x368>)
 8000576:	0b3f      	lsrs	r7, r7, #12
 8000578:	e73d      	b.n	80003f6 <__aeabi_dadd+0x12e>
 800057a:	0020      	movs	r0, r4
 800057c:	f001 fc6c 	bl	8001e58 <__clzsi2>
 8000580:	0001      	movs	r1, r0
 8000582:	3118      	adds	r1, #24
 8000584:	291f      	cmp	r1, #31
 8000586:	dc00      	bgt.n	800058a <__aeabi_dadd+0x2c2>
 8000588:	e6fc      	b.n	8000384 <__aeabi_dadd+0xbc>
 800058a:	3808      	subs	r0, #8
 800058c:	4084      	lsls	r4, r0
 800058e:	0027      	movs	r7, r4
 8000590:	2400      	movs	r4, #0
 8000592:	42b1      	cmp	r1, r6
 8000594:	db00      	blt.n	8000598 <__aeabi_dadd+0x2d0>
 8000596:	e6ff      	b.n	8000398 <__aeabi_dadd+0xd0>
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <__aeabi_dadd+0x36c>)
 800059a:	1a76      	subs	r6, r6, r1
 800059c:	4017      	ands	r7, r2
 800059e:	e70d      	b.n	80003bc <__aeabi_dadd+0xf4>
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	d02f      	beq.n	8000604 <__aeabi_dadd+0x33c>
 80005a4:	464a      	mov	r2, r9
 80005a6:	1b92      	subs	r2, r2, r6
 80005a8:	4694      	mov	ip, r2
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d100      	bne.n	80005b0 <__aeabi_dadd+0x2e8>
 80005ae:	e0ad      	b.n	800070c <__aeabi_dadd+0x444>
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <__aeabi_dadd+0x368>)
 80005b2:	4591      	cmp	r9, r2
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x2f0>
 80005b6:	e10f      	b.n	80007d8 <__aeabi_dadd+0x510>
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	0412      	lsls	r2, r2, #16
 80005bc:	4310      	orrs	r0, r2
 80005be:	4662      	mov	r2, ip
 80005c0:	2a38      	cmp	r2, #56	; 0x38
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_dadd+0x2fe>
 80005c4:	e10f      	b.n	80007e6 <__aeabi_dadd+0x51e>
 80005c6:	2a1f      	cmp	r2, #31
 80005c8:	dd00      	ble.n	80005cc <__aeabi_dadd+0x304>
 80005ca:	e180      	b.n	80008ce <__aeabi_dadd+0x606>
 80005cc:	4664      	mov	r4, ip
 80005ce:	2220      	movs	r2, #32
 80005d0:	001e      	movs	r6, r3
 80005d2:	1b12      	subs	r2, r2, r4
 80005d4:	4667      	mov	r7, ip
 80005d6:	0004      	movs	r4, r0
 80005d8:	4093      	lsls	r3, r2
 80005da:	4094      	lsls	r4, r2
 80005dc:	40fe      	lsrs	r6, r7
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	4193      	sbcs	r3, r2
 80005e2:	40f8      	lsrs	r0, r7
 80005e4:	4334      	orrs	r4, r6
 80005e6:	431c      	orrs	r4, r3
 80005e8:	4480      	add	r8, r0
 80005ea:	1864      	adds	r4, r4, r1
 80005ec:	428c      	cmp	r4, r1
 80005ee:	41bf      	sbcs	r7, r7
 80005f0:	427f      	negs	r7, r7
 80005f2:	464e      	mov	r6, r9
 80005f4:	4447      	add	r7, r8
 80005f6:	e7a6      	b.n	8000546 <__aeabi_dadd+0x27e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	430a      	orrs	r2, r1
 80005fc:	0011      	movs	r1, r2
 80005fe:	1e4a      	subs	r2, r1, #1
 8000600:	4191      	sbcs	r1, r2
 8000602:	e6ad      	b.n	8000360 <__aeabi_dadd+0x98>
 8000604:	4c0c      	ldr	r4, [pc, #48]	; (8000638 <__aeabi_dadd+0x370>)
 8000606:	1c72      	adds	r2, r6, #1
 8000608:	4222      	tst	r2, r4
 800060a:	d000      	beq.n	800060e <__aeabi_dadd+0x346>
 800060c:	e0a1      	b.n	8000752 <__aeabi_dadd+0x48a>
 800060e:	0002      	movs	r2, r0
 8000610:	431a      	orrs	r2, r3
 8000612:	2e00      	cmp	r6, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_dadd+0x350>
 8000616:	e0fa      	b.n	800080e <__aeabi_dadd+0x546>
 8000618:	2a00      	cmp	r2, #0
 800061a:	d100      	bne.n	800061e <__aeabi_dadd+0x356>
 800061c:	e145      	b.n	80008aa <__aeabi_dadd+0x5e2>
 800061e:	003a      	movs	r2, r7
 8000620:	430a      	orrs	r2, r1
 8000622:	d000      	beq.n	8000626 <__aeabi_dadd+0x35e>
 8000624:	e146      	b.n	80008b4 <__aeabi_dadd+0x5ec>
 8000626:	0742      	lsls	r2, r0, #29
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	4313      	orrs	r3, r2
 800062c:	08c0      	lsrs	r0, r0, #3
 800062e:	e77b      	b.n	8000528 <__aeabi_dadd+0x260>
 8000630:	000007ff 	.word	0x000007ff
 8000634:	ff7fffff 	.word	0xff7fffff
 8000638:	000007fe 	.word	0x000007fe
 800063c:	4647      	mov	r7, r8
 800063e:	1a5c      	subs	r4, r3, r1
 8000640:	1bc2      	subs	r2, r0, r7
 8000642:	42a3      	cmp	r3, r4
 8000644:	41bf      	sbcs	r7, r7
 8000646:	427f      	negs	r7, r7
 8000648:	46b9      	mov	r9, r7
 800064a:	0017      	movs	r7, r2
 800064c:	464a      	mov	r2, r9
 800064e:	1abf      	subs	r7, r7, r2
 8000650:	023a      	lsls	r2, r7, #8
 8000652:	d500      	bpl.n	8000656 <__aeabi_dadd+0x38e>
 8000654:	e08d      	b.n	8000772 <__aeabi_dadd+0x4aa>
 8000656:	0023      	movs	r3, r4
 8000658:	433b      	orrs	r3, r7
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x396>
 800065c:	e68a      	b.n	8000374 <__aeabi_dadd+0xac>
 800065e:	2000      	movs	r0, #0
 8000660:	2500      	movs	r5, #0
 8000662:	e761      	b.n	8000528 <__aeabi_dadd+0x260>
 8000664:	4cb4      	ldr	r4, [pc, #720]	; (8000938 <__aeabi_dadd+0x670>)
 8000666:	45a1      	cmp	r9, r4
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x3a4>
 800066a:	e0ad      	b.n	80007c8 <__aeabi_dadd+0x500>
 800066c:	2480      	movs	r4, #128	; 0x80
 800066e:	0424      	lsls	r4, r4, #16
 8000670:	4320      	orrs	r0, r4
 8000672:	4664      	mov	r4, ip
 8000674:	2c38      	cmp	r4, #56	; 0x38
 8000676:	dc3d      	bgt.n	80006f4 <__aeabi_dadd+0x42c>
 8000678:	4662      	mov	r2, ip
 800067a:	2c1f      	cmp	r4, #31
 800067c:	dd00      	ble.n	8000680 <__aeabi_dadd+0x3b8>
 800067e:	e0b7      	b.n	80007f0 <__aeabi_dadd+0x528>
 8000680:	2520      	movs	r5, #32
 8000682:	001e      	movs	r6, r3
 8000684:	1b2d      	subs	r5, r5, r4
 8000686:	0004      	movs	r4, r0
 8000688:	40ab      	lsls	r3, r5
 800068a:	40ac      	lsls	r4, r5
 800068c:	40d6      	lsrs	r6, r2
 800068e:	40d0      	lsrs	r0, r2
 8000690:	4642      	mov	r2, r8
 8000692:	1e5d      	subs	r5, r3, #1
 8000694:	41ab      	sbcs	r3, r5
 8000696:	4334      	orrs	r4, r6
 8000698:	1a12      	subs	r2, r2, r0
 800069a:	4690      	mov	r8, r2
 800069c:	4323      	orrs	r3, r4
 800069e:	e02c      	b.n	80006fa <__aeabi_dadd+0x432>
 80006a0:	0742      	lsls	r2, r0, #29
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	08c0      	lsrs	r0, r0, #3
 80006a8:	e73b      	b.n	8000522 <__aeabi_dadd+0x25a>
 80006aa:	185c      	adds	r4, r3, r1
 80006ac:	429c      	cmp	r4, r3
 80006ae:	419b      	sbcs	r3, r3
 80006b0:	4440      	add	r0, r8
 80006b2:	425b      	negs	r3, r3
 80006b4:	18c7      	adds	r7, r0, r3
 80006b6:	2601      	movs	r6, #1
 80006b8:	023b      	lsls	r3, r7, #8
 80006ba:	d400      	bmi.n	80006be <__aeabi_dadd+0x3f6>
 80006bc:	e729      	b.n	8000512 <__aeabi_dadd+0x24a>
 80006be:	2602      	movs	r6, #2
 80006c0:	4a9e      	ldr	r2, [pc, #632]	; (800093c <__aeabi_dadd+0x674>)
 80006c2:	0863      	lsrs	r3, r4, #1
 80006c4:	4017      	ands	r7, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	4014      	ands	r4, r2
 80006ca:	431c      	orrs	r4, r3
 80006cc:	07fb      	lsls	r3, r7, #31
 80006ce:	431c      	orrs	r4, r3
 80006d0:	087f      	lsrs	r7, r7, #1
 80006d2:	e673      	b.n	80003bc <__aeabi_dadd+0xf4>
 80006d4:	4644      	mov	r4, r8
 80006d6:	3a20      	subs	r2, #32
 80006d8:	40d4      	lsrs	r4, r2
 80006da:	4662      	mov	r2, ip
 80006dc:	2a20      	cmp	r2, #32
 80006de:	d005      	beq.n	80006ec <__aeabi_dadd+0x424>
 80006e0:	4667      	mov	r7, ip
 80006e2:	2240      	movs	r2, #64	; 0x40
 80006e4:	1bd2      	subs	r2, r2, r7
 80006e6:	4647      	mov	r7, r8
 80006e8:	4097      	lsls	r7, r2
 80006ea:	4339      	orrs	r1, r7
 80006ec:	1e4a      	subs	r2, r1, #1
 80006ee:	4191      	sbcs	r1, r2
 80006f0:	4321      	orrs	r1, r4
 80006f2:	e635      	b.n	8000360 <__aeabi_dadd+0x98>
 80006f4:	4303      	orrs	r3, r0
 80006f6:	1e58      	subs	r0, r3, #1
 80006f8:	4183      	sbcs	r3, r0
 80006fa:	1acc      	subs	r4, r1, r3
 80006fc:	42a1      	cmp	r1, r4
 80006fe:	41bf      	sbcs	r7, r7
 8000700:	4643      	mov	r3, r8
 8000702:	427f      	negs	r7, r7
 8000704:	4655      	mov	r5, sl
 8000706:	464e      	mov	r6, r9
 8000708:	1bdf      	subs	r7, r3, r7
 800070a:	e62e      	b.n	800036a <__aeabi_dadd+0xa2>
 800070c:	0002      	movs	r2, r0
 800070e:	431a      	orrs	r2, r3
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0x44c>
 8000712:	e0bd      	b.n	8000890 <__aeabi_dadd+0x5c8>
 8000714:	4662      	mov	r2, ip
 8000716:	4664      	mov	r4, ip
 8000718:	3a01      	subs	r2, #1
 800071a:	2c01      	cmp	r4, #1
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x458>
 800071e:	e0e5      	b.n	80008ec <__aeabi_dadd+0x624>
 8000720:	4c85      	ldr	r4, [pc, #532]	; (8000938 <__aeabi_dadd+0x670>)
 8000722:	45a4      	cmp	ip, r4
 8000724:	d058      	beq.n	80007d8 <__aeabi_dadd+0x510>
 8000726:	4694      	mov	ip, r2
 8000728:	e749      	b.n	80005be <__aeabi_dadd+0x2f6>
 800072a:	4664      	mov	r4, ip
 800072c:	2220      	movs	r2, #32
 800072e:	1b12      	subs	r2, r2, r4
 8000730:	4644      	mov	r4, r8
 8000732:	4094      	lsls	r4, r2
 8000734:	000f      	movs	r7, r1
 8000736:	46a1      	mov	r9, r4
 8000738:	4664      	mov	r4, ip
 800073a:	4091      	lsls	r1, r2
 800073c:	40e7      	lsrs	r7, r4
 800073e:	464c      	mov	r4, r9
 8000740:	1e4a      	subs	r2, r1, #1
 8000742:	4191      	sbcs	r1, r2
 8000744:	433c      	orrs	r4, r7
 8000746:	4642      	mov	r2, r8
 8000748:	430c      	orrs	r4, r1
 800074a:	4661      	mov	r1, ip
 800074c:	40ca      	lsrs	r2, r1
 800074e:	1880      	adds	r0, r0, r2
 8000750:	e6f4      	b.n	800053c <__aeabi_dadd+0x274>
 8000752:	4c79      	ldr	r4, [pc, #484]	; (8000938 <__aeabi_dadd+0x670>)
 8000754:	42a2      	cmp	r2, r4
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x492>
 8000758:	e6fd      	b.n	8000556 <__aeabi_dadd+0x28e>
 800075a:	1859      	adds	r1, r3, r1
 800075c:	4299      	cmp	r1, r3
 800075e:	419b      	sbcs	r3, r3
 8000760:	4440      	add	r0, r8
 8000762:	425f      	negs	r7, r3
 8000764:	19c7      	adds	r7, r0, r7
 8000766:	07fc      	lsls	r4, r7, #31
 8000768:	0849      	lsrs	r1, r1, #1
 800076a:	0016      	movs	r6, r2
 800076c:	430c      	orrs	r4, r1
 800076e:	087f      	lsrs	r7, r7, #1
 8000770:	e6cf      	b.n	8000512 <__aeabi_dadd+0x24a>
 8000772:	1acc      	subs	r4, r1, r3
 8000774:	42a1      	cmp	r1, r4
 8000776:	41bf      	sbcs	r7, r7
 8000778:	4643      	mov	r3, r8
 800077a:	427f      	negs	r7, r7
 800077c:	1a18      	subs	r0, r3, r0
 800077e:	4655      	mov	r5, sl
 8000780:	1bc7      	subs	r7, r0, r7
 8000782:	e5f7      	b.n	8000374 <__aeabi_dadd+0xac>
 8000784:	08c9      	lsrs	r1, r1, #3
 8000786:	077b      	lsls	r3, r7, #29
 8000788:	4655      	mov	r5, sl
 800078a:	430b      	orrs	r3, r1
 800078c:	08f8      	lsrs	r0, r7, #3
 800078e:	e6c8      	b.n	8000522 <__aeabi_dadd+0x25a>
 8000790:	2c00      	cmp	r4, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_dadd+0x4ce>
 8000794:	e081      	b.n	800089a <__aeabi_dadd+0x5d2>
 8000796:	4643      	mov	r3, r8
 8000798:	430b      	orrs	r3, r1
 800079a:	d115      	bne.n	80007c8 <__aeabi_dadd+0x500>
 800079c:	2080      	movs	r0, #128	; 0x80
 800079e:	2500      	movs	r5, #0
 80007a0:	0300      	lsls	r0, r0, #12
 80007a2:	e6e3      	b.n	800056c <__aeabi_dadd+0x2a4>
 80007a4:	1a5c      	subs	r4, r3, r1
 80007a6:	42a3      	cmp	r3, r4
 80007a8:	419b      	sbcs	r3, r3
 80007aa:	1bc7      	subs	r7, r0, r7
 80007ac:	425b      	negs	r3, r3
 80007ae:	2601      	movs	r6, #1
 80007b0:	1aff      	subs	r7, r7, r3
 80007b2:	e5da      	b.n	800036a <__aeabi_dadd+0xa2>
 80007b4:	0742      	lsls	r2, r0, #29
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	08c0      	lsrs	r0, r0, #3
 80007bc:	e6d2      	b.n	8000564 <__aeabi_dadd+0x29c>
 80007be:	0742      	lsls	r2, r0, #29
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	08c0      	lsrs	r0, r0, #3
 80007c6:	e6ac      	b.n	8000522 <__aeabi_dadd+0x25a>
 80007c8:	4643      	mov	r3, r8
 80007ca:	4642      	mov	r2, r8
 80007cc:	08c9      	lsrs	r1, r1, #3
 80007ce:	075b      	lsls	r3, r3, #29
 80007d0:	4655      	mov	r5, sl
 80007d2:	430b      	orrs	r3, r1
 80007d4:	08d0      	lsrs	r0, r2, #3
 80007d6:	e6c5      	b.n	8000564 <__aeabi_dadd+0x29c>
 80007d8:	4643      	mov	r3, r8
 80007da:	4642      	mov	r2, r8
 80007dc:	075b      	lsls	r3, r3, #29
 80007de:	08c9      	lsrs	r1, r1, #3
 80007e0:	430b      	orrs	r3, r1
 80007e2:	08d0      	lsrs	r0, r2, #3
 80007e4:	e6be      	b.n	8000564 <__aeabi_dadd+0x29c>
 80007e6:	4303      	orrs	r3, r0
 80007e8:	001c      	movs	r4, r3
 80007ea:	1e63      	subs	r3, r4, #1
 80007ec:	419c      	sbcs	r4, r3
 80007ee:	e6fc      	b.n	80005ea <__aeabi_dadd+0x322>
 80007f0:	0002      	movs	r2, r0
 80007f2:	3c20      	subs	r4, #32
 80007f4:	40e2      	lsrs	r2, r4
 80007f6:	0014      	movs	r4, r2
 80007f8:	4662      	mov	r2, ip
 80007fa:	2a20      	cmp	r2, #32
 80007fc:	d003      	beq.n	8000806 <__aeabi_dadd+0x53e>
 80007fe:	2540      	movs	r5, #64	; 0x40
 8000800:	1aad      	subs	r5, r5, r2
 8000802:	40a8      	lsls	r0, r5
 8000804:	4303      	orrs	r3, r0
 8000806:	1e58      	subs	r0, r3, #1
 8000808:	4183      	sbcs	r3, r0
 800080a:	4323      	orrs	r3, r4
 800080c:	e775      	b.n	80006fa <__aeabi_dadd+0x432>
 800080e:	2a00      	cmp	r2, #0
 8000810:	d0e2      	beq.n	80007d8 <__aeabi_dadd+0x510>
 8000812:	003a      	movs	r2, r7
 8000814:	430a      	orrs	r2, r1
 8000816:	d0cd      	beq.n	80007b4 <__aeabi_dadd+0x4ec>
 8000818:	0742      	lsls	r2, r0, #29
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	4313      	orrs	r3, r2
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	08c0      	lsrs	r0, r0, #3
 8000822:	0312      	lsls	r2, r2, #12
 8000824:	4210      	tst	r0, r2
 8000826:	d006      	beq.n	8000836 <__aeabi_dadd+0x56e>
 8000828:	08fc      	lsrs	r4, r7, #3
 800082a:	4214      	tst	r4, r2
 800082c:	d103      	bne.n	8000836 <__aeabi_dadd+0x56e>
 800082e:	0020      	movs	r0, r4
 8000830:	08cb      	lsrs	r3, r1, #3
 8000832:	077a      	lsls	r2, r7, #29
 8000834:	4313      	orrs	r3, r2
 8000836:	0f5a      	lsrs	r2, r3, #29
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	0752      	lsls	r2, r2, #29
 800083c:	08db      	lsrs	r3, r3, #3
 800083e:	4313      	orrs	r3, r2
 8000840:	e690      	b.n	8000564 <__aeabi_dadd+0x29c>
 8000842:	4643      	mov	r3, r8
 8000844:	430b      	orrs	r3, r1
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x582>
 8000848:	e709      	b.n	800065e <__aeabi_dadd+0x396>
 800084a:	4643      	mov	r3, r8
 800084c:	4642      	mov	r2, r8
 800084e:	08c9      	lsrs	r1, r1, #3
 8000850:	075b      	lsls	r3, r3, #29
 8000852:	4655      	mov	r5, sl
 8000854:	430b      	orrs	r3, r1
 8000856:	08d0      	lsrs	r0, r2, #3
 8000858:	e666      	b.n	8000528 <__aeabi_dadd+0x260>
 800085a:	1acc      	subs	r4, r1, r3
 800085c:	42a1      	cmp	r1, r4
 800085e:	4189      	sbcs	r1, r1
 8000860:	1a3f      	subs	r7, r7, r0
 8000862:	4249      	negs	r1, r1
 8000864:	4655      	mov	r5, sl
 8000866:	2601      	movs	r6, #1
 8000868:	1a7f      	subs	r7, r7, r1
 800086a:	e57e      	b.n	800036a <__aeabi_dadd+0xa2>
 800086c:	4642      	mov	r2, r8
 800086e:	1a5c      	subs	r4, r3, r1
 8000870:	1a87      	subs	r7, r0, r2
 8000872:	42a3      	cmp	r3, r4
 8000874:	4192      	sbcs	r2, r2
 8000876:	4252      	negs	r2, r2
 8000878:	1abf      	subs	r7, r7, r2
 800087a:	023a      	lsls	r2, r7, #8
 800087c:	d53d      	bpl.n	80008fa <__aeabi_dadd+0x632>
 800087e:	1acc      	subs	r4, r1, r3
 8000880:	42a1      	cmp	r1, r4
 8000882:	4189      	sbcs	r1, r1
 8000884:	4643      	mov	r3, r8
 8000886:	4249      	negs	r1, r1
 8000888:	1a1f      	subs	r7, r3, r0
 800088a:	4655      	mov	r5, sl
 800088c:	1a7f      	subs	r7, r7, r1
 800088e:	e595      	b.n	80003bc <__aeabi_dadd+0xf4>
 8000890:	077b      	lsls	r3, r7, #29
 8000892:	08c9      	lsrs	r1, r1, #3
 8000894:	430b      	orrs	r3, r1
 8000896:	08f8      	lsrs	r0, r7, #3
 8000898:	e643      	b.n	8000522 <__aeabi_dadd+0x25a>
 800089a:	4644      	mov	r4, r8
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	430c      	orrs	r4, r1
 80008a0:	d130      	bne.n	8000904 <__aeabi_dadd+0x63c>
 80008a2:	0742      	lsls	r2, r0, #29
 80008a4:	4313      	orrs	r3, r2
 80008a6:	08c0      	lsrs	r0, r0, #3
 80008a8:	e65c      	b.n	8000564 <__aeabi_dadd+0x29c>
 80008aa:	077b      	lsls	r3, r7, #29
 80008ac:	08c9      	lsrs	r1, r1, #3
 80008ae:	430b      	orrs	r3, r1
 80008b0:	08f8      	lsrs	r0, r7, #3
 80008b2:	e639      	b.n	8000528 <__aeabi_dadd+0x260>
 80008b4:	185c      	adds	r4, r3, r1
 80008b6:	429c      	cmp	r4, r3
 80008b8:	419b      	sbcs	r3, r3
 80008ba:	4440      	add	r0, r8
 80008bc:	425b      	negs	r3, r3
 80008be:	18c7      	adds	r7, r0, r3
 80008c0:	023b      	lsls	r3, r7, #8
 80008c2:	d400      	bmi.n	80008c6 <__aeabi_dadd+0x5fe>
 80008c4:	e625      	b.n	8000512 <__aeabi_dadd+0x24a>
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <__aeabi_dadd+0x674>)
 80008c8:	2601      	movs	r6, #1
 80008ca:	401f      	ands	r7, r3
 80008cc:	e621      	b.n	8000512 <__aeabi_dadd+0x24a>
 80008ce:	0004      	movs	r4, r0
 80008d0:	3a20      	subs	r2, #32
 80008d2:	40d4      	lsrs	r4, r2
 80008d4:	4662      	mov	r2, ip
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d004      	beq.n	80008e4 <__aeabi_dadd+0x61c>
 80008da:	2240      	movs	r2, #64	; 0x40
 80008dc:	4666      	mov	r6, ip
 80008de:	1b92      	subs	r2, r2, r6
 80008e0:	4090      	lsls	r0, r2
 80008e2:	4303      	orrs	r3, r0
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	4193      	sbcs	r3, r2
 80008e8:	431c      	orrs	r4, r3
 80008ea:	e67e      	b.n	80005ea <__aeabi_dadd+0x322>
 80008ec:	185c      	adds	r4, r3, r1
 80008ee:	428c      	cmp	r4, r1
 80008f0:	4189      	sbcs	r1, r1
 80008f2:	4440      	add	r0, r8
 80008f4:	4249      	negs	r1, r1
 80008f6:	1847      	adds	r7, r0, r1
 80008f8:	e6dd      	b.n	80006b6 <__aeabi_dadd+0x3ee>
 80008fa:	0023      	movs	r3, r4
 80008fc:	433b      	orrs	r3, r7
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x63a>
 8000900:	e6ad      	b.n	800065e <__aeabi_dadd+0x396>
 8000902:	e606      	b.n	8000512 <__aeabi_dadd+0x24a>
 8000904:	0744      	lsls	r4, r0, #29
 8000906:	4323      	orrs	r3, r4
 8000908:	2480      	movs	r4, #128	; 0x80
 800090a:	08c0      	lsrs	r0, r0, #3
 800090c:	0324      	lsls	r4, r4, #12
 800090e:	4220      	tst	r0, r4
 8000910:	d008      	beq.n	8000924 <__aeabi_dadd+0x65c>
 8000912:	4642      	mov	r2, r8
 8000914:	08d6      	lsrs	r6, r2, #3
 8000916:	4226      	tst	r6, r4
 8000918:	d104      	bne.n	8000924 <__aeabi_dadd+0x65c>
 800091a:	4655      	mov	r5, sl
 800091c:	0030      	movs	r0, r6
 800091e:	08cb      	lsrs	r3, r1, #3
 8000920:	0751      	lsls	r1, r2, #29
 8000922:	430b      	orrs	r3, r1
 8000924:	0f5a      	lsrs	r2, r3, #29
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	0752      	lsls	r2, r2, #29
 800092c:	4313      	orrs	r3, r2
 800092e:	e619      	b.n	8000564 <__aeabi_dadd+0x29c>
 8000930:	2300      	movs	r3, #0
 8000932:	4a01      	ldr	r2, [pc, #4]	; (8000938 <__aeabi_dadd+0x670>)
 8000934:	001f      	movs	r7, r3
 8000936:	e55e      	b.n	80003f6 <__aeabi_dadd+0x12e>
 8000938:	000007ff 	.word	0x000007ff
 800093c:	ff7fffff 	.word	0xff7fffff

08000940 <__aeabi_ddiv>:
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000942:	4657      	mov	r7, sl
 8000944:	464e      	mov	r6, r9
 8000946:	4645      	mov	r5, r8
 8000948:	46de      	mov	lr, fp
 800094a:	b5e0      	push	{r5, r6, r7, lr}
 800094c:	4681      	mov	r9, r0
 800094e:	0005      	movs	r5, r0
 8000950:	030c      	lsls	r4, r1, #12
 8000952:	0048      	lsls	r0, r1, #1
 8000954:	4692      	mov	sl, r2
 8000956:	001f      	movs	r7, r3
 8000958:	b085      	sub	sp, #20
 800095a:	0b24      	lsrs	r4, r4, #12
 800095c:	0d40      	lsrs	r0, r0, #21
 800095e:	0fce      	lsrs	r6, r1, #31
 8000960:	2800      	cmp	r0, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_ddiv+0x26>
 8000964:	e156      	b.n	8000c14 <__aeabi_ddiv+0x2d4>
 8000966:	4bd4      	ldr	r3, [pc, #848]	; (8000cb8 <__aeabi_ddiv+0x378>)
 8000968:	4298      	cmp	r0, r3
 800096a:	d100      	bne.n	800096e <__aeabi_ddiv+0x2e>
 800096c:	e172      	b.n	8000c54 <__aeabi_ddiv+0x314>
 800096e:	0f6b      	lsrs	r3, r5, #29
 8000970:	00e4      	lsls	r4, r4, #3
 8000972:	431c      	orrs	r4, r3
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	4323      	orrs	r3, r4
 800097a:	4698      	mov	r8, r3
 800097c:	4bcf      	ldr	r3, [pc, #828]	; (8000cbc <__aeabi_ddiv+0x37c>)
 800097e:	00ed      	lsls	r5, r5, #3
 8000980:	469b      	mov	fp, r3
 8000982:	2300      	movs	r3, #0
 8000984:	4699      	mov	r9, r3
 8000986:	4483      	add	fp, r0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	033c      	lsls	r4, r7, #12
 800098c:	007b      	lsls	r3, r7, #1
 800098e:	4650      	mov	r0, sl
 8000990:	0b24      	lsrs	r4, r4, #12
 8000992:	0d5b      	lsrs	r3, r3, #21
 8000994:	0fff      	lsrs	r7, r7, #31
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <__aeabi_ddiv+0x5c>
 800099a:	e11f      	b.n	8000bdc <__aeabi_ddiv+0x29c>
 800099c:	4ac6      	ldr	r2, [pc, #792]	; (8000cb8 <__aeabi_ddiv+0x378>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_ddiv+0x64>
 80009a2:	e162      	b.n	8000c6a <__aeabi_ddiv+0x32a>
 80009a4:	49c5      	ldr	r1, [pc, #788]	; (8000cbc <__aeabi_ddiv+0x37c>)
 80009a6:	0f42      	lsrs	r2, r0, #29
 80009a8:	468c      	mov	ip, r1
 80009aa:	00e4      	lsls	r4, r4, #3
 80009ac:	4659      	mov	r1, fp
 80009ae:	4314      	orrs	r4, r2
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	4463      	add	r3, ip
 80009b4:	0412      	lsls	r2, r2, #16
 80009b6:	1acb      	subs	r3, r1, r3
 80009b8:	4314      	orrs	r4, r2
 80009ba:	469b      	mov	fp, r3
 80009bc:	00c2      	lsls	r2, r0, #3
 80009be:	2000      	movs	r0, #0
 80009c0:	0033      	movs	r3, r6
 80009c2:	407b      	eors	r3, r7
 80009c4:	469a      	mov	sl, r3
 80009c6:	464b      	mov	r3, r9
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d827      	bhi.n	8000a1c <__aeabi_ddiv+0xdc>
 80009cc:	49bc      	ldr	r1, [pc, #752]	; (8000cc0 <__aeabi_ddiv+0x380>)
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	58cb      	ldr	r3, [r1, r3]
 80009d2:	469f      	mov	pc, r3
 80009d4:	46b2      	mov	sl, r6
 80009d6:	9b00      	ldr	r3, [sp, #0]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d016      	beq.n	8000a0a <__aeabi_ddiv+0xca>
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d100      	bne.n	80009e2 <__aeabi_ddiv+0xa2>
 80009e0:	e28e      	b.n	8000f00 <__aeabi_ddiv+0x5c0>
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d000      	beq.n	80009e8 <__aeabi_ddiv+0xa8>
 80009e6:	e0d9      	b.n	8000b9c <__aeabi_ddiv+0x25c>
 80009e8:	2300      	movs	r3, #0
 80009ea:	2400      	movs	r4, #0
 80009ec:	2500      	movs	r5, #0
 80009ee:	4652      	mov	r2, sl
 80009f0:	051b      	lsls	r3, r3, #20
 80009f2:	4323      	orrs	r3, r4
 80009f4:	07d2      	lsls	r2, r2, #31
 80009f6:	4313      	orrs	r3, r2
 80009f8:	0028      	movs	r0, r5
 80009fa:	0019      	movs	r1, r3
 80009fc:	b005      	add	sp, #20
 80009fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000a00:	46bb      	mov	fp, r7
 8000a02:	46b2      	mov	sl, r6
 8000a04:	46a9      	mov	r9, r5
 8000a06:	46a0      	mov	r8, r4
 8000a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0a:	2400      	movs	r4, #0
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	4baa      	ldr	r3, [pc, #680]	; (8000cb8 <__aeabi_ddiv+0x378>)
 8000a10:	e7ed      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000a12:	46ba      	mov	sl, r7
 8000a14:	46a0      	mov	r8, r4
 8000a16:	0015      	movs	r5, r2
 8000a18:	9000      	str	r0, [sp, #0]
 8000a1a:	e7dc      	b.n	80009d6 <__aeabi_ddiv+0x96>
 8000a1c:	4544      	cmp	r4, r8
 8000a1e:	d200      	bcs.n	8000a22 <__aeabi_ddiv+0xe2>
 8000a20:	e1c7      	b.n	8000db2 <__aeabi_ddiv+0x472>
 8000a22:	d100      	bne.n	8000a26 <__aeabi_ddiv+0xe6>
 8000a24:	e1c2      	b.n	8000dac <__aeabi_ddiv+0x46c>
 8000a26:	2301      	movs	r3, #1
 8000a28:	425b      	negs	r3, r3
 8000a2a:	469c      	mov	ip, r3
 8000a2c:	002e      	movs	r6, r5
 8000a2e:	4640      	mov	r0, r8
 8000a30:	2500      	movs	r5, #0
 8000a32:	44e3      	add	fp, ip
 8000a34:	0223      	lsls	r3, r4, #8
 8000a36:	0e14      	lsrs	r4, r2, #24
 8000a38:	431c      	orrs	r4, r3
 8000a3a:	0c1b      	lsrs	r3, r3, #16
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	0423      	lsls	r3, r4, #16
 8000a40:	0c1f      	lsrs	r7, r3, #16
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	4649      	mov	r1, r9
 8000a46:	9200      	str	r2, [sp, #0]
 8000a48:	9701      	str	r7, [sp, #4]
 8000a4a:	f7ff fbe3 	bl	8000214 <__aeabi_uidivmod>
 8000a4e:	0002      	movs	r2, r0
 8000a50:	437a      	muls	r2, r7
 8000a52:	040b      	lsls	r3, r1, #16
 8000a54:	0c31      	lsrs	r1, r6, #16
 8000a56:	4680      	mov	r8, r0
 8000a58:	4319      	orrs	r1, r3
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	d907      	bls.n	8000a6e <__aeabi_ddiv+0x12e>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	425b      	negs	r3, r3
 8000a62:	469c      	mov	ip, r3
 8000a64:	1909      	adds	r1, r1, r4
 8000a66:	44e0      	add	r8, ip
 8000a68:	428c      	cmp	r4, r1
 8000a6a:	d800      	bhi.n	8000a6e <__aeabi_ddiv+0x12e>
 8000a6c:	e207      	b.n	8000e7e <__aeabi_ddiv+0x53e>
 8000a6e:	1a88      	subs	r0, r1, r2
 8000a70:	4649      	mov	r1, r9
 8000a72:	f7ff fbcf 	bl	8000214 <__aeabi_uidivmod>
 8000a76:	0409      	lsls	r1, r1, #16
 8000a78:	468c      	mov	ip, r1
 8000a7a:	0431      	lsls	r1, r6, #16
 8000a7c:	4666      	mov	r6, ip
 8000a7e:	9a01      	ldr	r2, [sp, #4]
 8000a80:	0c09      	lsrs	r1, r1, #16
 8000a82:	4342      	muls	r2, r0
 8000a84:	0003      	movs	r3, r0
 8000a86:	4331      	orrs	r1, r6
 8000a88:	428a      	cmp	r2, r1
 8000a8a:	d904      	bls.n	8000a96 <__aeabi_ddiv+0x156>
 8000a8c:	1909      	adds	r1, r1, r4
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	428c      	cmp	r4, r1
 8000a92:	d800      	bhi.n	8000a96 <__aeabi_ddiv+0x156>
 8000a94:	e1ed      	b.n	8000e72 <__aeabi_ddiv+0x532>
 8000a96:	1a88      	subs	r0, r1, r2
 8000a98:	4642      	mov	r2, r8
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	4690      	mov	r8, r2
 8000aa0:	4641      	mov	r1, r8
 8000aa2:	9b00      	ldr	r3, [sp, #0]
 8000aa4:	040e      	lsls	r6, r1, #16
 8000aa6:	0c1b      	lsrs	r3, r3, #16
 8000aa8:	001f      	movs	r7, r3
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	9b00      	ldr	r3, [sp, #0]
 8000aae:	0c36      	lsrs	r6, r6, #16
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	0c19      	lsrs	r1, r3, #16
 8000ab4:	000b      	movs	r3, r1
 8000ab6:	4373      	muls	r3, r6
 8000ab8:	0c12      	lsrs	r2, r2, #16
 8000aba:	437e      	muls	r6, r7
 8000abc:	9103      	str	r1, [sp, #12]
 8000abe:	4351      	muls	r1, r2
 8000ac0:	437a      	muls	r2, r7
 8000ac2:	0c1f      	lsrs	r7, r3, #16
 8000ac4:	46bc      	mov	ip, r7
 8000ac6:	1876      	adds	r6, r6, r1
 8000ac8:	4466      	add	r6, ip
 8000aca:	42b1      	cmp	r1, r6
 8000acc:	d903      	bls.n	8000ad6 <__aeabi_ddiv+0x196>
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	0249      	lsls	r1, r1, #9
 8000ad2:	468c      	mov	ip, r1
 8000ad4:	4462      	add	r2, ip
 8000ad6:	0c31      	lsrs	r1, r6, #16
 8000ad8:	188a      	adds	r2, r1, r2
 8000ada:	0431      	lsls	r1, r6, #16
 8000adc:	041e      	lsls	r6, r3, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	198e      	adds	r6, r1, r6
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d302      	bcc.n	8000aec <__aeabi_ddiv+0x1ac>
 8000ae6:	d112      	bne.n	8000b0e <__aeabi_ddiv+0x1ce>
 8000ae8:	42b5      	cmp	r5, r6
 8000aea:	d210      	bcs.n	8000b0e <__aeabi_ddiv+0x1ce>
 8000aec:	4643      	mov	r3, r8
 8000aee:	1e59      	subs	r1, r3, #1
 8000af0:	9b00      	ldr	r3, [sp, #0]
 8000af2:	469c      	mov	ip, r3
 8000af4:	4465      	add	r5, ip
 8000af6:	001f      	movs	r7, r3
 8000af8:	429d      	cmp	r5, r3
 8000afa:	419b      	sbcs	r3, r3
 8000afc:	425b      	negs	r3, r3
 8000afe:	191b      	adds	r3, r3, r4
 8000b00:	18c0      	adds	r0, r0, r3
 8000b02:	4284      	cmp	r4, r0
 8000b04:	d200      	bcs.n	8000b08 <__aeabi_ddiv+0x1c8>
 8000b06:	e1a0      	b.n	8000e4a <__aeabi_ddiv+0x50a>
 8000b08:	d100      	bne.n	8000b0c <__aeabi_ddiv+0x1cc>
 8000b0a:	e19b      	b.n	8000e44 <__aeabi_ddiv+0x504>
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	1bae      	subs	r6, r5, r6
 8000b10:	42b5      	cmp	r5, r6
 8000b12:	41ad      	sbcs	r5, r5
 8000b14:	1a80      	subs	r0, r0, r2
 8000b16:	426d      	negs	r5, r5
 8000b18:	1b40      	subs	r0, r0, r5
 8000b1a:	4284      	cmp	r4, r0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_ddiv+0x1e0>
 8000b1e:	e1d5      	b.n	8000ecc <__aeabi_ddiv+0x58c>
 8000b20:	4649      	mov	r1, r9
 8000b22:	f7ff fb77 	bl	8000214 <__aeabi_uidivmod>
 8000b26:	9a01      	ldr	r2, [sp, #4]
 8000b28:	040b      	lsls	r3, r1, #16
 8000b2a:	4342      	muls	r2, r0
 8000b2c:	0c31      	lsrs	r1, r6, #16
 8000b2e:	0005      	movs	r5, r0
 8000b30:	4319      	orrs	r1, r3
 8000b32:	428a      	cmp	r2, r1
 8000b34:	d900      	bls.n	8000b38 <__aeabi_ddiv+0x1f8>
 8000b36:	e16c      	b.n	8000e12 <__aeabi_ddiv+0x4d2>
 8000b38:	1a88      	subs	r0, r1, r2
 8000b3a:	4649      	mov	r1, r9
 8000b3c:	f7ff fb6a 	bl	8000214 <__aeabi_uidivmod>
 8000b40:	9a01      	ldr	r2, [sp, #4]
 8000b42:	0436      	lsls	r6, r6, #16
 8000b44:	4342      	muls	r2, r0
 8000b46:	0409      	lsls	r1, r1, #16
 8000b48:	0c36      	lsrs	r6, r6, #16
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	430e      	orrs	r6, r1
 8000b4e:	42b2      	cmp	r2, r6
 8000b50:	d900      	bls.n	8000b54 <__aeabi_ddiv+0x214>
 8000b52:	e153      	b.n	8000dfc <__aeabi_ddiv+0x4bc>
 8000b54:	9803      	ldr	r0, [sp, #12]
 8000b56:	1ab6      	subs	r6, r6, r2
 8000b58:	0002      	movs	r2, r0
 8000b5a:	042d      	lsls	r5, r5, #16
 8000b5c:	431d      	orrs	r5, r3
 8000b5e:	9f02      	ldr	r7, [sp, #8]
 8000b60:	042b      	lsls	r3, r5, #16
 8000b62:	0c1b      	lsrs	r3, r3, #16
 8000b64:	435a      	muls	r2, r3
 8000b66:	437b      	muls	r3, r7
 8000b68:	469c      	mov	ip, r3
 8000b6a:	0c29      	lsrs	r1, r5, #16
 8000b6c:	4348      	muls	r0, r1
 8000b6e:	0c13      	lsrs	r3, r2, #16
 8000b70:	4484      	add	ip, r0
 8000b72:	4463      	add	r3, ip
 8000b74:	4379      	muls	r1, r7
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d903      	bls.n	8000b82 <__aeabi_ddiv+0x242>
 8000b7a:	2080      	movs	r0, #128	; 0x80
 8000b7c:	0240      	lsls	r0, r0, #9
 8000b7e:	4684      	mov	ip, r0
 8000b80:	4461      	add	r1, ip
 8000b82:	0c18      	lsrs	r0, r3, #16
 8000b84:	0412      	lsls	r2, r2, #16
 8000b86:	041b      	lsls	r3, r3, #16
 8000b88:	0c12      	lsrs	r2, r2, #16
 8000b8a:	1841      	adds	r1, r0, r1
 8000b8c:	189b      	adds	r3, r3, r2
 8000b8e:	428e      	cmp	r6, r1
 8000b90:	d200      	bcs.n	8000b94 <__aeabi_ddiv+0x254>
 8000b92:	e0ff      	b.n	8000d94 <__aeabi_ddiv+0x454>
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x258>
 8000b96:	e0fa      	b.n	8000d8e <__aeabi_ddiv+0x44e>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	431d      	orrs	r5, r3
 8000b9c:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <__aeabi_ddiv+0x384>)
 8000b9e:	445a      	add	r2, fp
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	dc00      	bgt.n	8000ba6 <__aeabi_ddiv+0x266>
 8000ba4:	e0aa      	b.n	8000cfc <__aeabi_ddiv+0x3bc>
 8000ba6:	076b      	lsls	r3, r5, #29
 8000ba8:	d000      	beq.n	8000bac <__aeabi_ddiv+0x26c>
 8000baa:	e13d      	b.n	8000e28 <__aeabi_ddiv+0x4e8>
 8000bac:	08ed      	lsrs	r5, r5, #3
 8000bae:	4643      	mov	r3, r8
 8000bb0:	01db      	lsls	r3, r3, #7
 8000bb2:	d506      	bpl.n	8000bc2 <__aeabi_ddiv+0x282>
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <__aeabi_ddiv+0x388>)
 8000bb8:	401a      	ands	r2, r3
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	00d2      	lsls	r2, r2, #3
 8000bc0:	445a      	add	r2, fp
 8000bc2:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <__aeabi_ddiv+0x38c>)
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dd00      	ble.n	8000bca <__aeabi_ddiv+0x28a>
 8000bc8:	e71f      	b.n	8000a0a <__aeabi_ddiv+0xca>
 8000bca:	4643      	mov	r3, r8
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	431d      	orrs	r5, r3
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	0552      	lsls	r2, r2, #21
 8000bd4:	025c      	lsls	r4, r3, #9
 8000bd6:	0b24      	lsrs	r4, r4, #12
 8000bd8:	0d53      	lsrs	r3, r2, #21
 8000bda:	e708      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000bdc:	4652      	mov	r2, sl
 8000bde:	4322      	orrs	r2, r4
 8000be0:	d100      	bne.n	8000be4 <__aeabi_ddiv+0x2a4>
 8000be2:	e07b      	b.n	8000cdc <__aeabi_ddiv+0x39c>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_ddiv+0x2aa>
 8000be8:	e0fa      	b.n	8000de0 <__aeabi_ddiv+0x4a0>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f001 f934 	bl	8001e58 <__clzsi2>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	3a0b      	subs	r2, #11
 8000bf4:	231d      	movs	r3, #29
 8000bf6:	0001      	movs	r1, r0
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	4652      	mov	r2, sl
 8000bfc:	3908      	subs	r1, #8
 8000bfe:	40da      	lsrs	r2, r3
 8000c00:	408c      	lsls	r4, r1
 8000c02:	4314      	orrs	r4, r2
 8000c04:	4652      	mov	r2, sl
 8000c06:	408a      	lsls	r2, r1
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <__aeabi_ddiv+0x390>)
 8000c0a:	4458      	add	r0, fp
 8000c0c:	469b      	mov	fp, r3
 8000c0e:	4483      	add	fp, r0
 8000c10:	2000      	movs	r0, #0
 8000c12:	e6d5      	b.n	80009c0 <__aeabi_ddiv+0x80>
 8000c14:	464b      	mov	r3, r9
 8000c16:	4323      	orrs	r3, r4
 8000c18:	4698      	mov	r8, r3
 8000c1a:	d044      	beq.n	8000ca6 <__aeabi_ddiv+0x366>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0x2e2>
 8000c20:	e0ce      	b.n	8000dc0 <__aeabi_ddiv+0x480>
 8000c22:	0020      	movs	r0, r4
 8000c24:	f001 f918 	bl	8001e58 <__clzsi2>
 8000c28:	0001      	movs	r1, r0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	390b      	subs	r1, #11
 8000c2e:	231d      	movs	r3, #29
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	4649      	mov	r1, r9
 8000c34:	0010      	movs	r0, r2
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	3808      	subs	r0, #8
 8000c3a:	4084      	lsls	r4, r0
 8000c3c:	000b      	movs	r3, r1
 8000c3e:	464d      	mov	r5, r9
 8000c40:	4323      	orrs	r3, r4
 8000c42:	4698      	mov	r8, r3
 8000c44:	4085      	lsls	r5, r0
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <__aeabi_ddiv+0x394>)
 8000c48:	1a83      	subs	r3, r0, r2
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4699      	mov	r9, r3
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	e69a      	b.n	800098a <__aeabi_ddiv+0x4a>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d11d      	bne.n	8000c98 <__aeabi_ddiv+0x358>
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	4699      	mov	r9, r3
 8000c60:	3b06      	subs	r3, #6
 8000c62:	2500      	movs	r5, #0
 8000c64:	4683      	mov	fp, r0
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	e68f      	b.n	800098a <__aeabi_ddiv+0x4a>
 8000c6a:	4652      	mov	r2, sl
 8000c6c:	4322      	orrs	r2, r4
 8000c6e:	d109      	bne.n	8000c84 <__aeabi_ddiv+0x344>
 8000c70:	2302      	movs	r3, #2
 8000c72:	4649      	mov	r1, r9
 8000c74:	4319      	orrs	r1, r3
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <__aeabi_ddiv+0x398>)
 8000c78:	4689      	mov	r9, r1
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	2002      	movs	r0, #2
 8000c80:	44e3      	add	fp, ip
 8000c82:	e69d      	b.n	80009c0 <__aeabi_ddiv+0x80>
 8000c84:	2303      	movs	r3, #3
 8000c86:	464a      	mov	r2, r9
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <__aeabi_ddiv+0x398>)
 8000c8c:	4691      	mov	r9, r2
 8000c8e:	469c      	mov	ip, r3
 8000c90:	4652      	mov	r2, sl
 8000c92:	2003      	movs	r0, #3
 8000c94:	44e3      	add	fp, ip
 8000c96:	e693      	b.n	80009c0 <__aeabi_ddiv+0x80>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	4699      	mov	r9, r3
 8000c9c:	3b09      	subs	r3, #9
 8000c9e:	46a0      	mov	r8, r4
 8000ca0:	4683      	mov	fp, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	e671      	b.n	800098a <__aeabi_ddiv+0x4a>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	4699      	mov	r9, r3
 8000caa:	2300      	movs	r3, #0
 8000cac:	469b      	mov	fp, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	e669      	b.n	800098a <__aeabi_ddiv+0x4a>
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	000007ff 	.word	0x000007ff
 8000cbc:	fffffc01 	.word	0xfffffc01
 8000cc0:	08005744 	.word	0x08005744
 8000cc4:	000003ff 	.word	0x000003ff
 8000cc8:	feffffff 	.word	0xfeffffff
 8000ccc:	000007fe 	.word	0x000007fe
 8000cd0:	000003f3 	.word	0x000003f3
 8000cd4:	fffffc0d 	.word	0xfffffc0d
 8000cd8:	fffff801 	.word	0xfffff801
 8000cdc:	4649      	mov	r1, r9
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	4689      	mov	r9, r1
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e66a      	b.n	80009c0 <__aeabi_ddiv+0x80>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	469a      	mov	sl, r3
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <__aeabi_ddiv+0x5dc>)
 8000cf4:	0324      	lsls	r4, r4, #12
 8000cf6:	e67a      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000cf8:	2501      	movs	r5, #1
 8000cfa:	426d      	negs	r5, r5
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	2b38      	cmp	r3, #56	; 0x38
 8000d02:	dd00      	ble.n	8000d06 <__aeabi_ddiv+0x3c6>
 8000d04:	e670      	b.n	80009e8 <__aeabi_ddiv+0xa8>
 8000d06:	2b1f      	cmp	r3, #31
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x3cc>
 8000d0a:	e0bf      	b.n	8000e8c <__aeabi_ddiv+0x54c>
 8000d0c:	211f      	movs	r1, #31
 8000d0e:	4249      	negs	r1, r1
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	4641      	mov	r1, r8
 8000d14:	40d1      	lsrs	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	2b20      	cmp	r3, #32
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_ddiv+0x3e6>
 8000d1c:	4641      	mov	r1, r8
 8000d1e:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <__aeabi_ddiv+0x5e0>)
 8000d20:	445b      	add	r3, fp
 8000d22:	4099      	lsls	r1, r3
 8000d24:	430d      	orrs	r5, r1
 8000d26:	1e6b      	subs	r3, r5, #1
 8000d28:	419d      	sbcs	r5, r3
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	432a      	orrs	r2, r5
 8000d2e:	001d      	movs	r5, r3
 8000d30:	2400      	movs	r4, #0
 8000d32:	4015      	ands	r5, r2
 8000d34:	4213      	tst	r3, r2
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0x3fa>
 8000d38:	e0d4      	b.n	8000ee4 <__aeabi_ddiv+0x5a4>
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4011      	ands	r1, r2
 8000d40:	2904      	cmp	r1, #4
 8000d42:	d100      	bne.n	8000d46 <__aeabi_ddiv+0x406>
 8000d44:	e0cb      	b.n	8000ede <__aeabi_ddiv+0x59e>
 8000d46:	1d11      	adds	r1, r2, #4
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	4192      	sbcs	r2, r2
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	000a      	movs	r2, r1
 8000d52:	0219      	lsls	r1, r3, #8
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_ddiv+0x418>
 8000d56:	e0c2      	b.n	8000ede <__aeabi_ddiv+0x59e>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	2500      	movs	r5, #0
 8000d5e:	e646      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	4641      	mov	r1, r8
 8000d64:	031b      	lsls	r3, r3, #12
 8000d66:	4219      	tst	r1, r3
 8000d68:	d008      	beq.n	8000d7c <__aeabi_ddiv+0x43c>
 8000d6a:	421c      	tst	r4, r3
 8000d6c:	d106      	bne.n	8000d7c <__aeabi_ddiv+0x43c>
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	0324      	lsls	r4, r4, #12
 8000d72:	46ba      	mov	sl, r7
 8000d74:	0015      	movs	r5, r2
 8000d76:	4b69      	ldr	r3, [pc, #420]	; (8000f1c <__aeabi_ddiv+0x5dc>)
 8000d78:	0b24      	lsrs	r4, r4, #12
 8000d7a:	e638      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000d7c:	2480      	movs	r4, #128	; 0x80
 8000d7e:	4643      	mov	r3, r8
 8000d80:	0324      	lsls	r4, r4, #12
 8000d82:	431c      	orrs	r4, r3
 8000d84:	0324      	lsls	r4, r4, #12
 8000d86:	46b2      	mov	sl, r6
 8000d88:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <__aeabi_ddiv+0x5dc>)
 8000d8a:	0b24      	lsrs	r4, r4, #12
 8000d8c:	e62f      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x454>
 8000d92:	e703      	b.n	8000b9c <__aeabi_ddiv+0x25c>
 8000d94:	19a6      	adds	r6, r4, r6
 8000d96:	1e68      	subs	r0, r5, #1
 8000d98:	42a6      	cmp	r6, r4
 8000d9a:	d200      	bcs.n	8000d9e <__aeabi_ddiv+0x45e>
 8000d9c:	e08d      	b.n	8000eba <__aeabi_ddiv+0x57a>
 8000d9e:	428e      	cmp	r6, r1
 8000da0:	d200      	bcs.n	8000da4 <__aeabi_ddiv+0x464>
 8000da2:	e0a3      	b.n	8000eec <__aeabi_ddiv+0x5ac>
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0x468>
 8000da6:	e0b3      	b.n	8000f10 <__aeabi_ddiv+0x5d0>
 8000da8:	0005      	movs	r5, r0
 8000daa:	e6f5      	b.n	8000b98 <__aeabi_ddiv+0x258>
 8000dac:	42aa      	cmp	r2, r5
 8000dae:	d900      	bls.n	8000db2 <__aeabi_ddiv+0x472>
 8000db0:	e639      	b.n	8000a26 <__aeabi_ddiv+0xe6>
 8000db2:	4643      	mov	r3, r8
 8000db4:	07de      	lsls	r6, r3, #31
 8000db6:	0858      	lsrs	r0, r3, #1
 8000db8:	086b      	lsrs	r3, r5, #1
 8000dba:	431e      	orrs	r6, r3
 8000dbc:	07ed      	lsls	r5, r5, #31
 8000dbe:	e639      	b.n	8000a34 <__aeabi_ddiv+0xf4>
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	f001 f849 	bl	8001e58 <__clzsi2>
 8000dc6:	0001      	movs	r1, r0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	3115      	adds	r1, #21
 8000dcc:	3220      	adds	r2, #32
 8000dce:	291c      	cmp	r1, #28
 8000dd0:	dc00      	bgt.n	8000dd4 <__aeabi_ddiv+0x494>
 8000dd2:	e72c      	b.n	8000c2e <__aeabi_ddiv+0x2ee>
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	3808      	subs	r0, #8
 8000dd8:	4083      	lsls	r3, r0
 8000dda:	2500      	movs	r5, #0
 8000ddc:	4698      	mov	r8, r3
 8000dde:	e732      	b.n	8000c46 <__aeabi_ddiv+0x306>
 8000de0:	f001 f83a 	bl	8001e58 <__clzsi2>
 8000de4:	0003      	movs	r3, r0
 8000de6:	001a      	movs	r2, r3
 8000de8:	3215      	adds	r2, #21
 8000dea:	3020      	adds	r0, #32
 8000dec:	2a1c      	cmp	r2, #28
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x4b2>
 8000df0:	e700      	b.n	8000bf4 <__aeabi_ddiv+0x2b4>
 8000df2:	4654      	mov	r4, sl
 8000df4:	3b08      	subs	r3, #8
 8000df6:	2200      	movs	r2, #0
 8000df8:	409c      	lsls	r4, r3
 8000dfa:	e705      	b.n	8000c08 <__aeabi_ddiv+0x2c8>
 8000dfc:	1936      	adds	r6, r6, r4
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	42b4      	cmp	r4, r6
 8000e02:	d900      	bls.n	8000e06 <__aeabi_ddiv+0x4c6>
 8000e04:	e6a6      	b.n	8000b54 <__aeabi_ddiv+0x214>
 8000e06:	42b2      	cmp	r2, r6
 8000e08:	d800      	bhi.n	8000e0c <__aeabi_ddiv+0x4cc>
 8000e0a:	e6a3      	b.n	8000b54 <__aeabi_ddiv+0x214>
 8000e0c:	1e83      	subs	r3, r0, #2
 8000e0e:	1936      	adds	r6, r6, r4
 8000e10:	e6a0      	b.n	8000b54 <__aeabi_ddiv+0x214>
 8000e12:	1909      	adds	r1, r1, r4
 8000e14:	3d01      	subs	r5, #1
 8000e16:	428c      	cmp	r4, r1
 8000e18:	d900      	bls.n	8000e1c <__aeabi_ddiv+0x4dc>
 8000e1a:	e68d      	b.n	8000b38 <__aeabi_ddiv+0x1f8>
 8000e1c:	428a      	cmp	r2, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x4e2>
 8000e20:	e68a      	b.n	8000b38 <__aeabi_ddiv+0x1f8>
 8000e22:	1e85      	subs	r5, r0, #2
 8000e24:	1909      	adds	r1, r1, r4
 8000e26:	e687      	b.n	8000b38 <__aeabi_ddiv+0x1f8>
 8000e28:	230f      	movs	r3, #15
 8000e2a:	402b      	ands	r3, r5
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0x4f2>
 8000e30:	e6bc      	b.n	8000bac <__aeabi_ddiv+0x26c>
 8000e32:	2305      	movs	r3, #5
 8000e34:	425b      	negs	r3, r3
 8000e36:	42ab      	cmp	r3, r5
 8000e38:	419b      	sbcs	r3, r3
 8000e3a:	3504      	adds	r5, #4
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	08ed      	lsrs	r5, r5, #3
 8000e40:	4498      	add	r8, r3
 8000e42:	e6b4      	b.n	8000bae <__aeabi_ddiv+0x26e>
 8000e44:	42af      	cmp	r7, r5
 8000e46:	d900      	bls.n	8000e4a <__aeabi_ddiv+0x50a>
 8000e48:	e660      	b.n	8000b0c <__aeabi_ddiv+0x1cc>
 8000e4a:	4282      	cmp	r2, r0
 8000e4c:	d804      	bhi.n	8000e58 <__aeabi_ddiv+0x518>
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_ddiv+0x512>
 8000e50:	e65c      	b.n	8000b0c <__aeabi_ddiv+0x1cc>
 8000e52:	42ae      	cmp	r6, r5
 8000e54:	d800      	bhi.n	8000e58 <__aeabi_ddiv+0x518>
 8000e56:	e659      	b.n	8000b0c <__aeabi_ddiv+0x1cc>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	9b00      	ldr	r3, [sp, #0]
 8000e60:	44e0      	add	r8, ip
 8000e62:	469c      	mov	ip, r3
 8000e64:	4465      	add	r5, ip
 8000e66:	429d      	cmp	r5, r3
 8000e68:	419b      	sbcs	r3, r3
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	191b      	adds	r3, r3, r4
 8000e6e:	18c0      	adds	r0, r0, r3
 8000e70:	e64d      	b.n	8000b0e <__aeabi_ddiv+0x1ce>
 8000e72:	428a      	cmp	r2, r1
 8000e74:	d800      	bhi.n	8000e78 <__aeabi_ddiv+0x538>
 8000e76:	e60e      	b.n	8000a96 <__aeabi_ddiv+0x156>
 8000e78:	1e83      	subs	r3, r0, #2
 8000e7a:	1909      	adds	r1, r1, r4
 8000e7c:	e60b      	b.n	8000a96 <__aeabi_ddiv+0x156>
 8000e7e:	428a      	cmp	r2, r1
 8000e80:	d800      	bhi.n	8000e84 <__aeabi_ddiv+0x544>
 8000e82:	e5f4      	b.n	8000a6e <__aeabi_ddiv+0x12e>
 8000e84:	1e83      	subs	r3, r0, #2
 8000e86:	4698      	mov	r8, r3
 8000e88:	1909      	adds	r1, r1, r4
 8000e8a:	e5f0      	b.n	8000a6e <__aeabi_ddiv+0x12e>
 8000e8c:	4925      	ldr	r1, [pc, #148]	; (8000f24 <__aeabi_ddiv+0x5e4>)
 8000e8e:	0028      	movs	r0, r5
 8000e90:	4459      	add	r1, fp
 8000e92:	408d      	lsls	r5, r1
 8000e94:	4642      	mov	r2, r8
 8000e96:	408a      	lsls	r2, r1
 8000e98:	1e69      	subs	r1, r5, #1
 8000e9a:	418d      	sbcs	r5, r1
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	40d8      	lsrs	r0, r3
 8000ea0:	40d9      	lsrs	r1, r3
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	432a      	orrs	r2, r5
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	0751      	lsls	r1, r2, #29
 8000eaa:	d100      	bne.n	8000eae <__aeabi_ddiv+0x56e>
 8000eac:	e751      	b.n	8000d52 <__aeabi_ddiv+0x412>
 8000eae:	210f      	movs	r1, #15
 8000eb0:	4011      	ands	r1, r2
 8000eb2:	2904      	cmp	r1, #4
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_ddiv+0x578>
 8000eb6:	e746      	b.n	8000d46 <__aeabi_ddiv+0x406>
 8000eb8:	e74b      	b.n	8000d52 <__aeabi_ddiv+0x412>
 8000eba:	0005      	movs	r5, r0
 8000ebc:	428e      	cmp	r6, r1
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_ddiv+0x582>
 8000ec0:	e66a      	b.n	8000b98 <__aeabi_ddiv+0x258>
 8000ec2:	9a00      	ldr	r2, [sp, #0]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d000      	beq.n	8000eca <__aeabi_ddiv+0x58a>
 8000ec8:	e666      	b.n	8000b98 <__aeabi_ddiv+0x258>
 8000eca:	e667      	b.n	8000b9c <__aeabi_ddiv+0x25c>
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <__aeabi_ddiv+0x5e8>)
 8000ece:	445a      	add	r2, fp
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_ddiv+0x596>
 8000ed4:	e710      	b.n	8000cf8 <__aeabi_ddiv+0x3b8>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	4498      	add	r8, r3
 8000edc:	e667      	b.n	8000bae <__aeabi_ddiv+0x26e>
 8000ede:	075d      	lsls	r5, r3, #29
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	0b1c      	lsrs	r4, r3, #12
 8000ee4:	08d2      	lsrs	r2, r2, #3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4315      	orrs	r5, r2
 8000eea:	e580      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000eec:	9800      	ldr	r0, [sp, #0]
 8000eee:	3d02      	subs	r5, #2
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	41bf      	sbcs	r7, r7
 8000ef6:	427f      	negs	r7, r7
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	1936      	adds	r6, r6, r4
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	e7dd      	b.n	8000ebc <__aeabi_ddiv+0x57c>
 8000f00:	2480      	movs	r4, #128	; 0x80
 8000f02:	4643      	mov	r3, r8
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	431c      	orrs	r4, r3
 8000f08:	0324      	lsls	r4, r4, #12
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__aeabi_ddiv+0x5dc>)
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	e56e      	b.n	80009ee <__aeabi_ddiv+0xae>
 8000f10:	9a00      	ldr	r2, [sp, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3ea      	bcc.n	8000eec <__aeabi_ddiv+0x5ac>
 8000f16:	0005      	movs	r5, r0
 8000f18:	e7d3      	b.n	8000ec2 <__aeabi_ddiv+0x582>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	000007ff 	.word	0x000007ff
 8000f20:	0000043e 	.word	0x0000043e
 8000f24:	0000041e 	.word	0x0000041e
 8000f28:	000003ff 	.word	0x000003ff

08000f2c <__eqdf2>:
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	464e      	mov	r6, r9
 8000f30:	4645      	mov	r5, r8
 8000f32:	46de      	mov	lr, fp
 8000f34:	4657      	mov	r7, sl
 8000f36:	4690      	mov	r8, r2
 8000f38:	b5e0      	push	{r5, r6, r7, lr}
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	031a      	lsls	r2, r3, #12
 8000f3e:	0b12      	lsrs	r2, r2, #12
 8000f40:	0005      	movs	r5, r0
 8000f42:	4684      	mov	ip, r0
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <__eqdf2+0x80>)
 8000f46:	030e      	lsls	r6, r1, #12
 8000f48:	004c      	lsls	r4, r1, #1
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	005a      	lsls	r2, r3, #1
 8000f4e:	0fdb      	lsrs	r3, r3, #31
 8000f50:	469b      	mov	fp, r3
 8000f52:	0b36      	lsrs	r6, r6, #12
 8000f54:	0d64      	lsrs	r4, r4, #21
 8000f56:	0fc9      	lsrs	r1, r1, #31
 8000f58:	0d52      	lsrs	r2, r2, #21
 8000f5a:	4284      	cmp	r4, r0
 8000f5c:	d019      	beq.n	8000f92 <__eqdf2+0x66>
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	d010      	beq.n	8000f84 <__eqdf2+0x58>
 8000f62:	2001      	movs	r0, #1
 8000f64:	4294      	cmp	r4, r2
 8000f66:	d10e      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f68:	454e      	cmp	r6, r9
 8000f6a:	d10c      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	45c4      	cmp	ip, r8
 8000f70:	d109      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f72:	4559      	cmp	r1, fp
 8000f74:	d017      	beq.n	8000fa6 <__eqdf2+0x7a>
 8000f76:	2c00      	cmp	r4, #0
 8000f78:	d105      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	4328      	orrs	r0, r5
 8000f7e:	1e43      	subs	r3, r0, #1
 8000f80:	4198      	sbcs	r0, r3
 8000f82:	e000      	b.n	8000f86 <__eqdf2+0x5a>
 8000f84:	2001      	movs	r0, #1
 8000f86:	bcf0      	pop	{r4, r5, r6, r7}
 8000f88:	46bb      	mov	fp, r7
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	46a9      	mov	r9, r5
 8000f8e:	46a0      	mov	r8, r4
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f92:	0033      	movs	r3, r6
 8000f94:	2001      	movs	r0, #1
 8000f96:	432b      	orrs	r3, r5
 8000f98:	d1f5      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f9a:	42a2      	cmp	r2, r4
 8000f9c:	d1f3      	bne.n	8000f86 <__eqdf2+0x5a>
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	433b      	orrs	r3, r7
 8000fa2:	d1f0      	bne.n	8000f86 <__eqdf2+0x5a>
 8000fa4:	e7e2      	b.n	8000f6c <__eqdf2+0x40>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	e7ed      	b.n	8000f86 <__eqdf2+0x5a>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	000007ff 	.word	0x000007ff

08000fb0 <__gedf2>:
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	4647      	mov	r7, r8
 8000fb4:	46ce      	mov	lr, r9
 8000fb6:	0004      	movs	r4, r0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	0016      	movs	r6, r2
 8000fbc:	031b      	lsls	r3, r3, #12
 8000fbe:	0b1b      	lsrs	r3, r3, #12
 8000fc0:	4d2d      	ldr	r5, [pc, #180]	; (8001078 <__gedf2+0xc8>)
 8000fc2:	004a      	lsls	r2, r1, #1
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	0043      	lsls	r3, r0, #1
 8000fca:	030f      	lsls	r7, r1, #12
 8000fcc:	46a4      	mov	ip, r4
 8000fce:	46b0      	mov	r8, r6
 8000fd0:	0b3f      	lsrs	r7, r7, #12
 8000fd2:	0d52      	lsrs	r2, r2, #21
 8000fd4:	0fc9      	lsrs	r1, r1, #31
 8000fd6:	0d5b      	lsrs	r3, r3, #21
 8000fd8:	0fc0      	lsrs	r0, r0, #31
 8000fda:	42aa      	cmp	r2, r5
 8000fdc:	d021      	beq.n	8001022 <__gedf2+0x72>
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	d013      	beq.n	800100a <__gedf2+0x5a>
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d122      	bne.n	800102c <__gedf2+0x7c>
 8000fe6:	433c      	orrs	r4, r7
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <__gedf2+0x42>
 8000fec:	464d      	mov	r5, r9
 8000fee:	432e      	orrs	r6, r5
 8000ff0:	d022      	beq.n	8001038 <__gedf2+0x88>
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	d010      	beq.n	8001018 <__gedf2+0x68>
 8000ff6:	4281      	cmp	r1, r0
 8000ff8:	d022      	beq.n	8001040 <__gedf2+0x90>
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	3901      	subs	r1, #1
 8000ffe:	4008      	ands	r0, r1
 8001000:	3801      	subs	r0, #1
 8001002:	bcc0      	pop	{r6, r7}
 8001004:	46b9      	mov	r9, r7
 8001006:	46b0      	mov	r8, r6
 8001008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100a:	464d      	mov	r5, r9
 800100c:	432e      	orrs	r6, r5
 800100e:	d129      	bne.n	8001064 <__gedf2+0xb4>
 8001010:	2a00      	cmp	r2, #0
 8001012:	d1f0      	bne.n	8000ff6 <__gedf2+0x46>
 8001014:	433c      	orrs	r4, r7
 8001016:	d1ee      	bne.n	8000ff6 <__gedf2+0x46>
 8001018:	2800      	cmp	r0, #0
 800101a:	d1f2      	bne.n	8001002 <__gedf2+0x52>
 800101c:	2001      	movs	r0, #1
 800101e:	4240      	negs	r0, r0
 8001020:	e7ef      	b.n	8001002 <__gedf2+0x52>
 8001022:	003d      	movs	r5, r7
 8001024:	4325      	orrs	r5, r4
 8001026:	d11d      	bne.n	8001064 <__gedf2+0xb4>
 8001028:	4293      	cmp	r3, r2
 800102a:	d0ee      	beq.n	800100a <__gedf2+0x5a>
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e2      	bne.n	8000ff6 <__gedf2+0x46>
 8001030:	464c      	mov	r4, r9
 8001032:	4326      	orrs	r6, r4
 8001034:	d1df      	bne.n	8000ff6 <__gedf2+0x46>
 8001036:	e7e0      	b.n	8000ffa <__gedf2+0x4a>
 8001038:	2000      	movs	r0, #0
 800103a:	2c00      	cmp	r4, #0
 800103c:	d0e1      	beq.n	8001002 <__gedf2+0x52>
 800103e:	e7dc      	b.n	8000ffa <__gedf2+0x4a>
 8001040:	429a      	cmp	r2, r3
 8001042:	dc0a      	bgt.n	800105a <__gedf2+0xaa>
 8001044:	dbe8      	blt.n	8001018 <__gedf2+0x68>
 8001046:	454f      	cmp	r7, r9
 8001048:	d8d7      	bhi.n	8000ffa <__gedf2+0x4a>
 800104a:	d00e      	beq.n	800106a <__gedf2+0xba>
 800104c:	2000      	movs	r0, #0
 800104e:	454f      	cmp	r7, r9
 8001050:	d2d7      	bcs.n	8001002 <__gedf2+0x52>
 8001052:	2900      	cmp	r1, #0
 8001054:	d0e2      	beq.n	800101c <__gedf2+0x6c>
 8001056:	0008      	movs	r0, r1
 8001058:	e7d3      	b.n	8001002 <__gedf2+0x52>
 800105a:	4243      	negs	r3, r0
 800105c:	4158      	adcs	r0, r3
 800105e:	0040      	lsls	r0, r0, #1
 8001060:	3801      	subs	r0, #1
 8001062:	e7ce      	b.n	8001002 <__gedf2+0x52>
 8001064:	2002      	movs	r0, #2
 8001066:	4240      	negs	r0, r0
 8001068:	e7cb      	b.n	8001002 <__gedf2+0x52>
 800106a:	45c4      	cmp	ip, r8
 800106c:	d8c5      	bhi.n	8000ffa <__gedf2+0x4a>
 800106e:	2000      	movs	r0, #0
 8001070:	45c4      	cmp	ip, r8
 8001072:	d2c6      	bcs.n	8001002 <__gedf2+0x52>
 8001074:	e7ed      	b.n	8001052 <__gedf2+0xa2>
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff

0800107c <__ledf2>:
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	4647      	mov	r7, r8
 8001080:	46ce      	mov	lr, r9
 8001082:	0004      	movs	r4, r0
 8001084:	0018      	movs	r0, r3
 8001086:	0016      	movs	r6, r2
 8001088:	031b      	lsls	r3, r3, #12
 800108a:	0b1b      	lsrs	r3, r3, #12
 800108c:	4d2c      	ldr	r5, [pc, #176]	; (8001140 <__ledf2+0xc4>)
 800108e:	004a      	lsls	r2, r1, #1
 8001090:	4699      	mov	r9, r3
 8001092:	b580      	push	{r7, lr}
 8001094:	0043      	lsls	r3, r0, #1
 8001096:	030f      	lsls	r7, r1, #12
 8001098:	46a4      	mov	ip, r4
 800109a:	46b0      	mov	r8, r6
 800109c:	0b3f      	lsrs	r7, r7, #12
 800109e:	0d52      	lsrs	r2, r2, #21
 80010a0:	0fc9      	lsrs	r1, r1, #31
 80010a2:	0d5b      	lsrs	r3, r3, #21
 80010a4:	0fc0      	lsrs	r0, r0, #31
 80010a6:	42aa      	cmp	r2, r5
 80010a8:	d00d      	beq.n	80010c6 <__ledf2+0x4a>
 80010aa:	42ab      	cmp	r3, r5
 80010ac:	d010      	beq.n	80010d0 <__ledf2+0x54>
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d127      	bne.n	8001102 <__ledf2+0x86>
 80010b2:	433c      	orrs	r4, r7
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <__ledf2+0x60>
 80010b8:	464d      	mov	r5, r9
 80010ba:	432e      	orrs	r6, r5
 80010bc:	d10e      	bne.n	80010dc <__ledf2+0x60>
 80010be:	2000      	movs	r0, #0
 80010c0:	2c00      	cmp	r4, #0
 80010c2:	d015      	beq.n	80010f0 <__ledf2+0x74>
 80010c4:	e00e      	b.n	80010e4 <__ledf2+0x68>
 80010c6:	003d      	movs	r5, r7
 80010c8:	4325      	orrs	r5, r4
 80010ca:	d110      	bne.n	80010ee <__ledf2+0x72>
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d118      	bne.n	8001102 <__ledf2+0x86>
 80010d0:	464d      	mov	r5, r9
 80010d2:	432e      	orrs	r6, r5
 80010d4:	d10b      	bne.n	80010ee <__ledf2+0x72>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d102      	bne.n	80010e0 <__ledf2+0x64>
 80010da:	433c      	orrs	r4, r7
 80010dc:	2c00      	cmp	r4, #0
 80010de:	d00b      	beq.n	80010f8 <__ledf2+0x7c>
 80010e0:	4281      	cmp	r1, r0
 80010e2:	d014      	beq.n	800110e <__ledf2+0x92>
 80010e4:	2002      	movs	r0, #2
 80010e6:	3901      	subs	r1, #1
 80010e8:	4008      	ands	r0, r1
 80010ea:	3801      	subs	r0, #1
 80010ec:	e000      	b.n	80010f0 <__ledf2+0x74>
 80010ee:	2002      	movs	r0, #2
 80010f0:	bcc0      	pop	{r6, r7}
 80010f2:	46b9      	mov	r9, r7
 80010f4:	46b0      	mov	r8, r6
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d1f9      	bne.n	80010f0 <__ledf2+0x74>
 80010fc:	2001      	movs	r0, #1
 80010fe:	4240      	negs	r0, r0
 8001100:	e7f6      	b.n	80010f0 <__ledf2+0x74>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ec      	bne.n	80010e0 <__ledf2+0x64>
 8001106:	464c      	mov	r4, r9
 8001108:	4326      	orrs	r6, r4
 800110a:	d1e9      	bne.n	80010e0 <__ledf2+0x64>
 800110c:	e7ea      	b.n	80010e4 <__ledf2+0x68>
 800110e:	429a      	cmp	r2, r3
 8001110:	dd04      	ble.n	800111c <__ledf2+0xa0>
 8001112:	4243      	negs	r3, r0
 8001114:	4158      	adcs	r0, r3
 8001116:	0040      	lsls	r0, r0, #1
 8001118:	3801      	subs	r0, #1
 800111a:	e7e9      	b.n	80010f0 <__ledf2+0x74>
 800111c:	429a      	cmp	r2, r3
 800111e:	dbeb      	blt.n	80010f8 <__ledf2+0x7c>
 8001120:	454f      	cmp	r7, r9
 8001122:	d8df      	bhi.n	80010e4 <__ledf2+0x68>
 8001124:	d006      	beq.n	8001134 <__ledf2+0xb8>
 8001126:	2000      	movs	r0, #0
 8001128:	454f      	cmp	r7, r9
 800112a:	d2e1      	bcs.n	80010f0 <__ledf2+0x74>
 800112c:	2900      	cmp	r1, #0
 800112e:	d0e5      	beq.n	80010fc <__ledf2+0x80>
 8001130:	0008      	movs	r0, r1
 8001132:	e7dd      	b.n	80010f0 <__ledf2+0x74>
 8001134:	45c4      	cmp	ip, r8
 8001136:	d8d5      	bhi.n	80010e4 <__ledf2+0x68>
 8001138:	2000      	movs	r0, #0
 800113a:	45c4      	cmp	ip, r8
 800113c:	d2d8      	bcs.n	80010f0 <__ledf2+0x74>
 800113e:	e7f5      	b.n	800112c <__ledf2+0xb0>
 8001140:	000007ff 	.word	0x000007ff

08001144 <__aeabi_dmul>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	4657      	mov	r7, sl
 8001148:	464e      	mov	r6, r9
 800114a:	4645      	mov	r5, r8
 800114c:	46de      	mov	lr, fp
 800114e:	b5e0      	push	{r5, r6, r7, lr}
 8001150:	4698      	mov	r8, r3
 8001152:	030c      	lsls	r4, r1, #12
 8001154:	004b      	lsls	r3, r1, #1
 8001156:	0006      	movs	r6, r0
 8001158:	4692      	mov	sl, r2
 800115a:	b087      	sub	sp, #28
 800115c:	0b24      	lsrs	r4, r4, #12
 800115e:	0d5b      	lsrs	r3, r3, #21
 8001160:	0fcf      	lsrs	r7, r1, #31
 8001162:	2b00      	cmp	r3, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_dmul+0x24>
 8001166:	e15c      	b.n	8001422 <__aeabi_dmul+0x2de>
 8001168:	4ad9      	ldr	r2, [pc, #868]	; (80014d0 <__aeabi_dmul+0x38c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d100      	bne.n	8001170 <__aeabi_dmul+0x2c>
 800116e:	e175      	b.n	800145c <__aeabi_dmul+0x318>
 8001170:	0f42      	lsrs	r2, r0, #29
 8001172:	00e4      	lsls	r4, r4, #3
 8001174:	4314      	orrs	r4, r2
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0412      	lsls	r2, r2, #16
 800117a:	4314      	orrs	r4, r2
 800117c:	4ad5      	ldr	r2, [pc, #852]	; (80014d4 <__aeabi_dmul+0x390>)
 800117e:	00c5      	lsls	r5, r0, #3
 8001180:	4694      	mov	ip, r2
 8001182:	4463      	add	r3, ip
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	4699      	mov	r9, r3
 800118a:	469b      	mov	fp, r3
 800118c:	4643      	mov	r3, r8
 800118e:	4642      	mov	r2, r8
 8001190:	031e      	lsls	r6, r3, #12
 8001192:	0fd2      	lsrs	r2, r2, #31
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4650      	mov	r0, sl
 8001198:	4690      	mov	r8, r2
 800119a:	0b36      	lsrs	r6, r6, #12
 800119c:	0d5b      	lsrs	r3, r3, #21
 800119e:	d100      	bne.n	80011a2 <__aeabi_dmul+0x5e>
 80011a0:	e120      	b.n	80013e4 <__aeabi_dmul+0x2a0>
 80011a2:	4acb      	ldr	r2, [pc, #812]	; (80014d0 <__aeabi_dmul+0x38c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d100      	bne.n	80011aa <__aeabi_dmul+0x66>
 80011a8:	e162      	b.n	8001470 <__aeabi_dmul+0x32c>
 80011aa:	49ca      	ldr	r1, [pc, #808]	; (80014d4 <__aeabi_dmul+0x390>)
 80011ac:	0f42      	lsrs	r2, r0, #29
 80011ae:	468c      	mov	ip, r1
 80011b0:	9900      	ldr	r1, [sp, #0]
 80011b2:	4463      	add	r3, ip
 80011b4:	00f6      	lsls	r6, r6, #3
 80011b6:	468c      	mov	ip, r1
 80011b8:	4316      	orrs	r6, r2
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	449c      	add	ip, r3
 80011be:	0412      	lsls	r2, r2, #16
 80011c0:	4663      	mov	r3, ip
 80011c2:	4316      	orrs	r6, r2
 80011c4:	00c2      	lsls	r2, r0, #3
 80011c6:	2000      	movs	r0, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	9900      	ldr	r1, [sp, #0]
 80011cc:	4643      	mov	r3, r8
 80011ce:	3101      	adds	r1, #1
 80011d0:	468c      	mov	ip, r1
 80011d2:	4649      	mov	r1, r9
 80011d4:	407b      	eors	r3, r7
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	290f      	cmp	r1, #15
 80011da:	d826      	bhi.n	800122a <__aeabi_dmul+0xe6>
 80011dc:	4bbe      	ldr	r3, [pc, #760]	; (80014d8 <__aeabi_dmul+0x394>)
 80011de:	0089      	lsls	r1, r1, #2
 80011e0:	5859      	ldr	r1, [r3, r1]
 80011e2:	468f      	mov	pc, r1
 80011e4:	4643      	mov	r3, r8
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	0034      	movs	r4, r6
 80011ea:	0015      	movs	r5, r2
 80011ec:	4683      	mov	fp, r0
 80011ee:	465b      	mov	r3, fp
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d016      	beq.n	8001222 <__aeabi_dmul+0xde>
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d100      	bne.n	80011fa <__aeabi_dmul+0xb6>
 80011f8:	e203      	b.n	8001602 <__aeabi_dmul+0x4be>
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d000      	beq.n	8001200 <__aeabi_dmul+0xbc>
 80011fe:	e0cd      	b.n	800139c <__aeabi_dmul+0x258>
 8001200:	2200      	movs	r2, #0
 8001202:	2400      	movs	r4, #0
 8001204:	2500      	movs	r5, #0
 8001206:	9b01      	ldr	r3, [sp, #4]
 8001208:	0512      	lsls	r2, r2, #20
 800120a:	4322      	orrs	r2, r4
 800120c:	07db      	lsls	r3, r3, #31
 800120e:	431a      	orrs	r2, r3
 8001210:	0028      	movs	r0, r5
 8001212:	0011      	movs	r1, r2
 8001214:	b007      	add	sp, #28
 8001216:	bcf0      	pop	{r4, r5, r6, r7}
 8001218:	46bb      	mov	fp, r7
 800121a:	46b2      	mov	sl, r6
 800121c:	46a9      	mov	r9, r5
 800121e:	46a0      	mov	r8, r4
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	2400      	movs	r4, #0
 8001224:	2500      	movs	r5, #0
 8001226:	4aaa      	ldr	r2, [pc, #680]	; (80014d0 <__aeabi_dmul+0x38c>)
 8001228:	e7ed      	b.n	8001206 <__aeabi_dmul+0xc2>
 800122a:	0c28      	lsrs	r0, r5, #16
 800122c:	042d      	lsls	r5, r5, #16
 800122e:	0c2d      	lsrs	r5, r5, #16
 8001230:	002b      	movs	r3, r5
 8001232:	0c11      	lsrs	r1, r2, #16
 8001234:	0412      	lsls	r2, r2, #16
 8001236:	0c12      	lsrs	r2, r2, #16
 8001238:	4353      	muls	r3, r2
 800123a:	4698      	mov	r8, r3
 800123c:	0013      	movs	r3, r2
 800123e:	002f      	movs	r7, r5
 8001240:	4343      	muls	r3, r0
 8001242:	4699      	mov	r9, r3
 8001244:	434f      	muls	r7, r1
 8001246:	444f      	add	r7, r9
 8001248:	46bb      	mov	fp, r7
 800124a:	4647      	mov	r7, r8
 800124c:	000b      	movs	r3, r1
 800124e:	0c3f      	lsrs	r7, r7, #16
 8001250:	46ba      	mov	sl, r7
 8001252:	4343      	muls	r3, r0
 8001254:	44da      	add	sl, fp
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	45d1      	cmp	r9, sl
 800125a:	d904      	bls.n	8001266 <__aeabi_dmul+0x122>
 800125c:	2780      	movs	r7, #128	; 0x80
 800125e:	027f      	lsls	r7, r7, #9
 8001260:	46b9      	mov	r9, r7
 8001262:	444b      	add	r3, r9
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	4653      	mov	r3, sl
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	469b      	mov	fp, r3
 800126c:	4653      	mov	r3, sl
 800126e:	041f      	lsls	r7, r3, #16
 8001270:	4643      	mov	r3, r8
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	0c1b      	lsrs	r3, r3, #16
 8001276:	4698      	mov	r8, r3
 8001278:	003b      	movs	r3, r7
 800127a:	4443      	add	r3, r8
 800127c:	9304      	str	r3, [sp, #16]
 800127e:	0c33      	lsrs	r3, r6, #16
 8001280:	0436      	lsls	r6, r6, #16
 8001282:	0c36      	lsrs	r6, r6, #16
 8001284:	4698      	mov	r8, r3
 8001286:	0033      	movs	r3, r6
 8001288:	4343      	muls	r3, r0
 800128a:	4699      	mov	r9, r3
 800128c:	4643      	mov	r3, r8
 800128e:	4343      	muls	r3, r0
 8001290:	002f      	movs	r7, r5
 8001292:	469a      	mov	sl, r3
 8001294:	4643      	mov	r3, r8
 8001296:	4377      	muls	r7, r6
 8001298:	435d      	muls	r5, r3
 800129a:	0c38      	lsrs	r0, r7, #16
 800129c:	444d      	add	r5, r9
 800129e:	1945      	adds	r5, r0, r5
 80012a0:	45a9      	cmp	r9, r5
 80012a2:	d903      	bls.n	80012ac <__aeabi_dmul+0x168>
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	4699      	mov	r9, r3
 80012aa:	44ca      	add	sl, r9
 80012ac:	043f      	lsls	r7, r7, #16
 80012ae:	0c28      	lsrs	r0, r5, #16
 80012b0:	0c3f      	lsrs	r7, r7, #16
 80012b2:	042d      	lsls	r5, r5, #16
 80012b4:	19ed      	adds	r5, r5, r7
 80012b6:	0c27      	lsrs	r7, r4, #16
 80012b8:	0424      	lsls	r4, r4, #16
 80012ba:	0c24      	lsrs	r4, r4, #16
 80012bc:	0003      	movs	r3, r0
 80012be:	0020      	movs	r0, r4
 80012c0:	4350      	muls	r0, r2
 80012c2:	437a      	muls	r2, r7
 80012c4:	4691      	mov	r9, r2
 80012c6:	003a      	movs	r2, r7
 80012c8:	4453      	add	r3, sl
 80012ca:	9305      	str	r3, [sp, #20]
 80012cc:	0c03      	lsrs	r3, r0, #16
 80012ce:	469a      	mov	sl, r3
 80012d0:	434a      	muls	r2, r1
 80012d2:	4361      	muls	r1, r4
 80012d4:	4449      	add	r1, r9
 80012d6:	4451      	add	r1, sl
 80012d8:	44ab      	add	fp, r5
 80012da:	4589      	cmp	r9, r1
 80012dc:	d903      	bls.n	80012e6 <__aeabi_dmul+0x1a2>
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	4699      	mov	r9, r3
 80012e4:	444a      	add	r2, r9
 80012e6:	0400      	lsls	r0, r0, #16
 80012e8:	0c0b      	lsrs	r3, r1, #16
 80012ea:	0c00      	lsrs	r0, r0, #16
 80012ec:	0409      	lsls	r1, r1, #16
 80012ee:	1809      	adds	r1, r1, r0
 80012f0:	0020      	movs	r0, r4
 80012f2:	4699      	mov	r9, r3
 80012f4:	4643      	mov	r3, r8
 80012f6:	4370      	muls	r0, r6
 80012f8:	435c      	muls	r4, r3
 80012fa:	437e      	muls	r6, r7
 80012fc:	435f      	muls	r7, r3
 80012fe:	0c03      	lsrs	r3, r0, #16
 8001300:	4698      	mov	r8, r3
 8001302:	19a4      	adds	r4, r4, r6
 8001304:	4444      	add	r4, r8
 8001306:	444a      	add	r2, r9
 8001308:	9703      	str	r7, [sp, #12]
 800130a:	42a6      	cmp	r6, r4
 800130c:	d904      	bls.n	8001318 <__aeabi_dmul+0x1d4>
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	4698      	mov	r8, r3
 8001314:	4447      	add	r7, r8
 8001316:	9703      	str	r7, [sp, #12]
 8001318:	0423      	lsls	r3, r4, #16
 800131a:	9e02      	ldr	r6, [sp, #8]
 800131c:	469a      	mov	sl, r3
 800131e:	9b05      	ldr	r3, [sp, #20]
 8001320:	445e      	add	r6, fp
 8001322:	4698      	mov	r8, r3
 8001324:	42ae      	cmp	r6, r5
 8001326:	41ad      	sbcs	r5, r5
 8001328:	1876      	adds	r6, r6, r1
 800132a:	428e      	cmp	r6, r1
 800132c:	4189      	sbcs	r1, r1
 800132e:	0400      	lsls	r0, r0, #16
 8001330:	0c00      	lsrs	r0, r0, #16
 8001332:	4450      	add	r0, sl
 8001334:	4440      	add	r0, r8
 8001336:	426d      	negs	r5, r5
 8001338:	1947      	adds	r7, r0, r5
 800133a:	46b8      	mov	r8, r7
 800133c:	4693      	mov	fp, r2
 800133e:	4249      	negs	r1, r1
 8001340:	4689      	mov	r9, r1
 8001342:	44c3      	add	fp, r8
 8001344:	44d9      	add	r9, fp
 8001346:	4298      	cmp	r0, r3
 8001348:	4180      	sbcs	r0, r0
 800134a:	45a8      	cmp	r8, r5
 800134c:	41ad      	sbcs	r5, r5
 800134e:	4593      	cmp	fp, r2
 8001350:	4192      	sbcs	r2, r2
 8001352:	4589      	cmp	r9, r1
 8001354:	4189      	sbcs	r1, r1
 8001356:	426d      	negs	r5, r5
 8001358:	4240      	negs	r0, r0
 800135a:	4328      	orrs	r0, r5
 800135c:	0c24      	lsrs	r4, r4, #16
 800135e:	4252      	negs	r2, r2
 8001360:	4249      	negs	r1, r1
 8001362:	430a      	orrs	r2, r1
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	1900      	adds	r0, r0, r4
 8001368:	1880      	adds	r0, r0, r2
 800136a:	18c7      	adds	r7, r0, r3
 800136c:	464b      	mov	r3, r9
 800136e:	0ddc      	lsrs	r4, r3, #23
 8001370:	9b04      	ldr	r3, [sp, #16]
 8001372:	0275      	lsls	r5, r6, #9
 8001374:	431d      	orrs	r5, r3
 8001376:	1e6a      	subs	r2, r5, #1
 8001378:	4195      	sbcs	r5, r2
 800137a:	464b      	mov	r3, r9
 800137c:	0df6      	lsrs	r6, r6, #23
 800137e:	027f      	lsls	r7, r7, #9
 8001380:	4335      	orrs	r5, r6
 8001382:	025a      	lsls	r2, r3, #9
 8001384:	433c      	orrs	r4, r7
 8001386:	4315      	orrs	r5, r2
 8001388:	01fb      	lsls	r3, r7, #7
 800138a:	d400      	bmi.n	800138e <__aeabi_dmul+0x24a>
 800138c:	e11c      	b.n	80015c8 <__aeabi_dmul+0x484>
 800138e:	2101      	movs	r1, #1
 8001390:	086a      	lsrs	r2, r5, #1
 8001392:	400d      	ands	r5, r1
 8001394:	4315      	orrs	r5, r2
 8001396:	07e2      	lsls	r2, r4, #31
 8001398:	4315      	orrs	r5, r2
 800139a:	0864      	lsrs	r4, r4, #1
 800139c:	494f      	ldr	r1, [pc, #316]	; (80014dc <__aeabi_dmul+0x398>)
 800139e:	4461      	add	r1, ip
 80013a0:	2900      	cmp	r1, #0
 80013a2:	dc00      	bgt.n	80013a6 <__aeabi_dmul+0x262>
 80013a4:	e0b0      	b.n	8001508 <__aeabi_dmul+0x3c4>
 80013a6:	076b      	lsls	r3, r5, #29
 80013a8:	d009      	beq.n	80013be <__aeabi_dmul+0x27a>
 80013aa:	220f      	movs	r2, #15
 80013ac:	402a      	ands	r2, r5
 80013ae:	2a04      	cmp	r2, #4
 80013b0:	d005      	beq.n	80013be <__aeabi_dmul+0x27a>
 80013b2:	1d2a      	adds	r2, r5, #4
 80013b4:	42aa      	cmp	r2, r5
 80013b6:	41ad      	sbcs	r5, r5
 80013b8:	426d      	negs	r5, r5
 80013ba:	1964      	adds	r4, r4, r5
 80013bc:	0015      	movs	r5, r2
 80013be:	01e3      	lsls	r3, r4, #7
 80013c0:	d504      	bpl.n	80013cc <__aeabi_dmul+0x288>
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <__aeabi_dmul+0x39c>)
 80013c6:	00c9      	lsls	r1, r1, #3
 80013c8:	4014      	ands	r4, r2
 80013ca:	4461      	add	r1, ip
 80013cc:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <__aeabi_dmul+0x3a0>)
 80013ce:	4291      	cmp	r1, r2
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dmul+0x290>
 80013d2:	e726      	b.n	8001222 <__aeabi_dmul+0xde>
 80013d4:	0762      	lsls	r2, r4, #29
 80013d6:	08ed      	lsrs	r5, r5, #3
 80013d8:	0264      	lsls	r4, r4, #9
 80013da:	0549      	lsls	r1, r1, #21
 80013dc:	4315      	orrs	r5, r2
 80013de:	0b24      	lsrs	r4, r4, #12
 80013e0:	0d4a      	lsrs	r2, r1, #21
 80013e2:	e710      	b.n	8001206 <__aeabi_dmul+0xc2>
 80013e4:	4652      	mov	r2, sl
 80013e6:	4332      	orrs	r2, r6
 80013e8:	d100      	bne.n	80013ec <__aeabi_dmul+0x2a8>
 80013ea:	e07f      	b.n	80014ec <__aeabi_dmul+0x3a8>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dmul+0x2ae>
 80013f0:	e0dc      	b.n	80015ac <__aeabi_dmul+0x468>
 80013f2:	0030      	movs	r0, r6
 80013f4:	f000 fd30 	bl	8001e58 <__clzsi2>
 80013f8:	0002      	movs	r2, r0
 80013fa:	3a0b      	subs	r2, #11
 80013fc:	231d      	movs	r3, #29
 80013fe:	0001      	movs	r1, r0
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	4652      	mov	r2, sl
 8001404:	3908      	subs	r1, #8
 8001406:	40da      	lsrs	r2, r3
 8001408:	408e      	lsls	r6, r1
 800140a:	4316      	orrs	r6, r2
 800140c:	4652      	mov	r2, sl
 800140e:	408a      	lsls	r2, r1
 8001410:	9b00      	ldr	r3, [sp, #0]
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <__aeabi_dmul+0x3a4>)
 8001414:	1a18      	subs	r0, r3, r0
 8001416:	0003      	movs	r3, r0
 8001418:	468c      	mov	ip, r1
 800141a:	4463      	add	r3, ip
 800141c:	2000      	movs	r0, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	e6d3      	b.n	80011ca <__aeabi_dmul+0x86>
 8001422:	0025      	movs	r5, r4
 8001424:	4305      	orrs	r5, r0
 8001426:	d04a      	beq.n	80014be <__aeabi_dmul+0x37a>
 8001428:	2c00      	cmp	r4, #0
 800142a:	d100      	bne.n	800142e <__aeabi_dmul+0x2ea>
 800142c:	e0b0      	b.n	8001590 <__aeabi_dmul+0x44c>
 800142e:	0020      	movs	r0, r4
 8001430:	f000 fd12 	bl	8001e58 <__clzsi2>
 8001434:	0001      	movs	r1, r0
 8001436:	0002      	movs	r2, r0
 8001438:	390b      	subs	r1, #11
 800143a:	231d      	movs	r3, #29
 800143c:	0010      	movs	r0, r2
 800143e:	1a5b      	subs	r3, r3, r1
 8001440:	0031      	movs	r1, r6
 8001442:	0035      	movs	r5, r6
 8001444:	3808      	subs	r0, #8
 8001446:	4084      	lsls	r4, r0
 8001448:	40d9      	lsrs	r1, r3
 800144a:	4085      	lsls	r5, r0
 800144c:	430c      	orrs	r4, r1
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <__aeabi_dmul+0x3a4>)
 8001450:	1a83      	subs	r3, r0, r2
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	4699      	mov	r9, r3
 8001458:	469b      	mov	fp, r3
 800145a:	e697      	b.n	800118c <__aeabi_dmul+0x48>
 800145c:	0005      	movs	r5, r0
 800145e:	4325      	orrs	r5, r4
 8001460:	d126      	bne.n	80014b0 <__aeabi_dmul+0x36c>
 8001462:	2208      	movs	r2, #8
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2302      	movs	r3, #2
 8001468:	2400      	movs	r4, #0
 800146a:	4691      	mov	r9, r2
 800146c:	469b      	mov	fp, r3
 800146e:	e68d      	b.n	800118c <__aeabi_dmul+0x48>
 8001470:	4652      	mov	r2, sl
 8001472:	9b00      	ldr	r3, [sp, #0]
 8001474:	4332      	orrs	r2, r6
 8001476:	d110      	bne.n	800149a <__aeabi_dmul+0x356>
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <__aeabi_dmul+0x38c>)
 800147a:	2600      	movs	r6, #0
 800147c:	468c      	mov	ip, r1
 800147e:	4463      	add	r3, ip
 8001480:	4649      	mov	r1, r9
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2302      	movs	r3, #2
 8001486:	4319      	orrs	r1, r3
 8001488:	4689      	mov	r9, r1
 800148a:	2002      	movs	r0, #2
 800148c:	e69d      	b.n	80011ca <__aeabi_dmul+0x86>
 800148e:	465b      	mov	r3, fp
 8001490:	9701      	str	r7, [sp, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d000      	beq.n	8001498 <__aeabi_dmul+0x354>
 8001496:	e6ad      	b.n	80011f4 <__aeabi_dmul+0xb0>
 8001498:	e6c3      	b.n	8001222 <__aeabi_dmul+0xde>
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <__aeabi_dmul+0x38c>)
 800149c:	2003      	movs	r0, #3
 800149e:	4694      	mov	ip, r2
 80014a0:	4463      	add	r3, ip
 80014a2:	464a      	mov	r2, r9
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2303      	movs	r3, #3
 80014a8:	431a      	orrs	r2, r3
 80014aa:	4691      	mov	r9, r2
 80014ac:	4652      	mov	r2, sl
 80014ae:	e68c      	b.n	80011ca <__aeabi_dmul+0x86>
 80014b0:	220c      	movs	r2, #12
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2303      	movs	r3, #3
 80014b6:	0005      	movs	r5, r0
 80014b8:	4691      	mov	r9, r2
 80014ba:	469b      	mov	fp, r3
 80014bc:	e666      	b.n	800118c <__aeabi_dmul+0x48>
 80014be:	2304      	movs	r3, #4
 80014c0:	4699      	mov	r9, r3
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	2400      	movs	r4, #0
 80014ca:	469b      	mov	fp, r3
 80014cc:	e65e      	b.n	800118c <__aeabi_dmul+0x48>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	fffffc01 	.word	0xfffffc01
 80014d8:	08005784 	.word	0x08005784
 80014dc:	000003ff 	.word	0x000003ff
 80014e0:	feffffff 	.word	0xfeffffff
 80014e4:	000007fe 	.word	0x000007fe
 80014e8:	fffffc0d 	.word	0xfffffc0d
 80014ec:	4649      	mov	r1, r9
 80014ee:	2301      	movs	r3, #1
 80014f0:	4319      	orrs	r1, r3
 80014f2:	4689      	mov	r9, r1
 80014f4:	2600      	movs	r6, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	e667      	b.n	80011ca <__aeabi_dmul+0x86>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2480      	movs	r4, #128	; 0x80
 80014fe:	2500      	movs	r5, #0
 8001500:	4a43      	ldr	r2, [pc, #268]	; (8001610 <__aeabi_dmul+0x4cc>)
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	0324      	lsls	r4, r4, #12
 8001506:	e67e      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001508:	2001      	movs	r0, #1
 800150a:	1a40      	subs	r0, r0, r1
 800150c:	2838      	cmp	r0, #56	; 0x38
 800150e:	dd00      	ble.n	8001512 <__aeabi_dmul+0x3ce>
 8001510:	e676      	b.n	8001200 <__aeabi_dmul+0xbc>
 8001512:	281f      	cmp	r0, #31
 8001514:	dd5b      	ble.n	80015ce <__aeabi_dmul+0x48a>
 8001516:	221f      	movs	r2, #31
 8001518:	0023      	movs	r3, r4
 800151a:	4252      	negs	r2, r2
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	40cb      	lsrs	r3, r1
 8001520:	0019      	movs	r1, r3
 8001522:	2820      	cmp	r0, #32
 8001524:	d003      	beq.n	800152e <__aeabi_dmul+0x3ea>
 8001526:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <__aeabi_dmul+0x4d0>)
 8001528:	4462      	add	r2, ip
 800152a:	4094      	lsls	r4, r2
 800152c:	4325      	orrs	r5, r4
 800152e:	1e6a      	subs	r2, r5, #1
 8001530:	4195      	sbcs	r5, r2
 8001532:	002a      	movs	r2, r5
 8001534:	430a      	orrs	r2, r1
 8001536:	2107      	movs	r1, #7
 8001538:	000d      	movs	r5, r1
 800153a:	2400      	movs	r4, #0
 800153c:	4015      	ands	r5, r2
 800153e:	4211      	tst	r1, r2
 8001540:	d05b      	beq.n	80015fa <__aeabi_dmul+0x4b6>
 8001542:	210f      	movs	r1, #15
 8001544:	2400      	movs	r4, #0
 8001546:	4011      	ands	r1, r2
 8001548:	2904      	cmp	r1, #4
 800154a:	d053      	beq.n	80015f4 <__aeabi_dmul+0x4b0>
 800154c:	1d11      	adds	r1, r2, #4
 800154e:	4291      	cmp	r1, r2
 8001550:	4192      	sbcs	r2, r2
 8001552:	4252      	negs	r2, r2
 8001554:	18a4      	adds	r4, r4, r2
 8001556:	000a      	movs	r2, r1
 8001558:	0223      	lsls	r3, r4, #8
 800155a:	d54b      	bpl.n	80015f4 <__aeabi_dmul+0x4b0>
 800155c:	2201      	movs	r2, #1
 800155e:	2400      	movs	r4, #0
 8001560:	2500      	movs	r5, #0
 8001562:	e650      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	031b      	lsls	r3, r3, #12
 8001568:	421c      	tst	r4, r3
 800156a:	d009      	beq.n	8001580 <__aeabi_dmul+0x43c>
 800156c:	421e      	tst	r6, r3
 800156e:	d107      	bne.n	8001580 <__aeabi_dmul+0x43c>
 8001570:	4333      	orrs	r3, r6
 8001572:	031c      	lsls	r4, r3, #12
 8001574:	4643      	mov	r3, r8
 8001576:	0015      	movs	r5, r2
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <__aeabi_dmul+0x4cc>)
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	e642      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	0312      	lsls	r2, r2, #12
 8001584:	4314      	orrs	r4, r2
 8001586:	0324      	lsls	r4, r4, #12
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <__aeabi_dmul+0x4cc>)
 800158a:	0b24      	lsrs	r4, r4, #12
 800158c:	9701      	str	r7, [sp, #4]
 800158e:	e63a      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001590:	f000 fc62 	bl	8001e58 <__clzsi2>
 8001594:	0001      	movs	r1, r0
 8001596:	0002      	movs	r2, r0
 8001598:	3115      	adds	r1, #21
 800159a:	3220      	adds	r2, #32
 800159c:	291c      	cmp	r1, #28
 800159e:	dc00      	bgt.n	80015a2 <__aeabi_dmul+0x45e>
 80015a0:	e74b      	b.n	800143a <__aeabi_dmul+0x2f6>
 80015a2:	0034      	movs	r4, r6
 80015a4:	3808      	subs	r0, #8
 80015a6:	2500      	movs	r5, #0
 80015a8:	4084      	lsls	r4, r0
 80015aa:	e750      	b.n	800144e <__aeabi_dmul+0x30a>
 80015ac:	f000 fc54 	bl	8001e58 <__clzsi2>
 80015b0:	0003      	movs	r3, r0
 80015b2:	001a      	movs	r2, r3
 80015b4:	3215      	adds	r2, #21
 80015b6:	3020      	adds	r0, #32
 80015b8:	2a1c      	cmp	r2, #28
 80015ba:	dc00      	bgt.n	80015be <__aeabi_dmul+0x47a>
 80015bc:	e71e      	b.n	80013fc <__aeabi_dmul+0x2b8>
 80015be:	4656      	mov	r6, sl
 80015c0:	3b08      	subs	r3, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	409e      	lsls	r6, r3
 80015c6:	e723      	b.n	8001410 <__aeabi_dmul+0x2cc>
 80015c8:	9b00      	ldr	r3, [sp, #0]
 80015ca:	469c      	mov	ip, r3
 80015cc:	e6e6      	b.n	800139c <__aeabi_dmul+0x258>
 80015ce:	4912      	ldr	r1, [pc, #72]	; (8001618 <__aeabi_dmul+0x4d4>)
 80015d0:	0022      	movs	r2, r4
 80015d2:	4461      	add	r1, ip
 80015d4:	002e      	movs	r6, r5
 80015d6:	408d      	lsls	r5, r1
 80015d8:	408a      	lsls	r2, r1
 80015da:	40c6      	lsrs	r6, r0
 80015dc:	1e69      	subs	r1, r5, #1
 80015de:	418d      	sbcs	r5, r1
 80015e0:	4332      	orrs	r2, r6
 80015e2:	432a      	orrs	r2, r5
 80015e4:	40c4      	lsrs	r4, r0
 80015e6:	0753      	lsls	r3, r2, #29
 80015e8:	d0b6      	beq.n	8001558 <__aeabi_dmul+0x414>
 80015ea:	210f      	movs	r1, #15
 80015ec:	4011      	ands	r1, r2
 80015ee:	2904      	cmp	r1, #4
 80015f0:	d1ac      	bne.n	800154c <__aeabi_dmul+0x408>
 80015f2:	e7b1      	b.n	8001558 <__aeabi_dmul+0x414>
 80015f4:	0765      	lsls	r5, r4, #29
 80015f6:	0264      	lsls	r4, r4, #9
 80015f8:	0b24      	lsrs	r4, r4, #12
 80015fa:	08d2      	lsrs	r2, r2, #3
 80015fc:	4315      	orrs	r5, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	e601      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0312      	lsls	r2, r2, #12
 8001606:	4314      	orrs	r4, r2
 8001608:	0324      	lsls	r4, r4, #12
 800160a:	4a01      	ldr	r2, [pc, #4]	; (8001610 <__aeabi_dmul+0x4cc>)
 800160c:	0b24      	lsrs	r4, r4, #12
 800160e:	e5fa      	b.n	8001206 <__aeabi_dmul+0xc2>
 8001610:	000007ff 	.word	0x000007ff
 8001614:	0000043e 	.word	0x0000043e
 8001618:	0000041e 	.word	0x0000041e

0800161c <__aeabi_dsub>:
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161e:	4657      	mov	r7, sl
 8001620:	464e      	mov	r6, r9
 8001622:	4645      	mov	r5, r8
 8001624:	46de      	mov	lr, fp
 8001626:	b5e0      	push	{r5, r6, r7, lr}
 8001628:	001e      	movs	r6, r3
 800162a:	0017      	movs	r7, r2
 800162c:	004a      	lsls	r2, r1, #1
 800162e:	030b      	lsls	r3, r1, #12
 8001630:	0d52      	lsrs	r2, r2, #21
 8001632:	0a5b      	lsrs	r3, r3, #9
 8001634:	4690      	mov	r8, r2
 8001636:	0f42      	lsrs	r2, r0, #29
 8001638:	431a      	orrs	r2, r3
 800163a:	0fcd      	lsrs	r5, r1, #31
 800163c:	4ccd      	ldr	r4, [pc, #820]	; (8001974 <__aeabi_dsub+0x358>)
 800163e:	0331      	lsls	r1, r6, #12
 8001640:	00c3      	lsls	r3, r0, #3
 8001642:	4694      	mov	ip, r2
 8001644:	0070      	lsls	r0, r6, #1
 8001646:	0f7a      	lsrs	r2, r7, #29
 8001648:	0a49      	lsrs	r1, r1, #9
 800164a:	00ff      	lsls	r7, r7, #3
 800164c:	469a      	mov	sl, r3
 800164e:	46b9      	mov	r9, r7
 8001650:	0d40      	lsrs	r0, r0, #21
 8001652:	0ff6      	lsrs	r6, r6, #31
 8001654:	4311      	orrs	r1, r2
 8001656:	42a0      	cmp	r0, r4
 8001658:	d100      	bne.n	800165c <__aeabi_dsub+0x40>
 800165a:	e0b1      	b.n	80017c0 <__aeabi_dsub+0x1a4>
 800165c:	2201      	movs	r2, #1
 800165e:	4056      	eors	r6, r2
 8001660:	46b3      	mov	fp, r6
 8001662:	42b5      	cmp	r5, r6
 8001664:	d100      	bne.n	8001668 <__aeabi_dsub+0x4c>
 8001666:	e088      	b.n	800177a <__aeabi_dsub+0x15e>
 8001668:	4642      	mov	r2, r8
 800166a:	1a12      	subs	r2, r2, r0
 800166c:	2a00      	cmp	r2, #0
 800166e:	dc00      	bgt.n	8001672 <__aeabi_dsub+0x56>
 8001670:	e0ae      	b.n	80017d0 <__aeabi_dsub+0x1b4>
 8001672:	2800      	cmp	r0, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x5c>
 8001676:	e0c1      	b.n	80017fc <__aeabi_dsub+0x1e0>
 8001678:	48be      	ldr	r0, [pc, #760]	; (8001974 <__aeabi_dsub+0x358>)
 800167a:	4580      	cmp	r8, r0
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x64>
 800167e:	e151      	b.n	8001924 <__aeabi_dsub+0x308>
 8001680:	2080      	movs	r0, #128	; 0x80
 8001682:	0400      	lsls	r0, r0, #16
 8001684:	4301      	orrs	r1, r0
 8001686:	2a38      	cmp	r2, #56	; 0x38
 8001688:	dd00      	ble.n	800168c <__aeabi_dsub+0x70>
 800168a:	e17b      	b.n	8001984 <__aeabi_dsub+0x368>
 800168c:	2a1f      	cmp	r2, #31
 800168e:	dd00      	ble.n	8001692 <__aeabi_dsub+0x76>
 8001690:	e1ee      	b.n	8001a70 <__aeabi_dsub+0x454>
 8001692:	2020      	movs	r0, #32
 8001694:	003e      	movs	r6, r7
 8001696:	1a80      	subs	r0, r0, r2
 8001698:	000c      	movs	r4, r1
 800169a:	40d6      	lsrs	r6, r2
 800169c:	40d1      	lsrs	r1, r2
 800169e:	4087      	lsls	r7, r0
 80016a0:	4662      	mov	r2, ip
 80016a2:	4084      	lsls	r4, r0
 80016a4:	1a52      	subs	r2, r2, r1
 80016a6:	1e78      	subs	r0, r7, #1
 80016a8:	4187      	sbcs	r7, r0
 80016aa:	4694      	mov	ip, r2
 80016ac:	4334      	orrs	r4, r6
 80016ae:	4327      	orrs	r7, r4
 80016b0:	1bdc      	subs	r4, r3, r7
 80016b2:	42a3      	cmp	r3, r4
 80016b4:	419b      	sbcs	r3, r3
 80016b6:	4662      	mov	r2, ip
 80016b8:	425b      	negs	r3, r3
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4699      	mov	r9, r3
 80016be:	464b      	mov	r3, r9
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dsub+0xaa>
 80016c4:	e118      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 80016c6:	464b      	mov	r3, r9
 80016c8:	0258      	lsls	r0, r3, #9
 80016ca:	0a43      	lsrs	r3, r0, #9
 80016cc:	4699      	mov	r9, r3
 80016ce:	464b      	mov	r3, r9
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dsub+0xba>
 80016d4:	e137      	b.n	8001946 <__aeabi_dsub+0x32a>
 80016d6:	4648      	mov	r0, r9
 80016d8:	f000 fbbe 	bl	8001e58 <__clzsi2>
 80016dc:	0001      	movs	r1, r0
 80016de:	3908      	subs	r1, #8
 80016e0:	2320      	movs	r3, #32
 80016e2:	0022      	movs	r2, r4
 80016e4:	4648      	mov	r0, r9
 80016e6:	1a5b      	subs	r3, r3, r1
 80016e8:	40da      	lsrs	r2, r3
 80016ea:	4088      	lsls	r0, r1
 80016ec:	408c      	lsls	r4, r1
 80016ee:	4643      	mov	r3, r8
 80016f0:	4310      	orrs	r0, r2
 80016f2:	4588      	cmp	r8, r1
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dsub+0xdc>
 80016f6:	e136      	b.n	8001966 <__aeabi_dsub+0x34a>
 80016f8:	1ac9      	subs	r1, r1, r3
 80016fa:	1c4b      	adds	r3, r1, #1
 80016fc:	2b1f      	cmp	r3, #31
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dsub+0xe6>
 8001700:	e0ea      	b.n	80018d8 <__aeabi_dsub+0x2bc>
 8001702:	2220      	movs	r2, #32
 8001704:	0026      	movs	r6, r4
 8001706:	1ad2      	subs	r2, r2, r3
 8001708:	0001      	movs	r1, r0
 800170a:	4094      	lsls	r4, r2
 800170c:	40de      	lsrs	r6, r3
 800170e:	40d8      	lsrs	r0, r3
 8001710:	2300      	movs	r3, #0
 8001712:	4091      	lsls	r1, r2
 8001714:	1e62      	subs	r2, r4, #1
 8001716:	4194      	sbcs	r4, r2
 8001718:	4681      	mov	r9, r0
 800171a:	4698      	mov	r8, r3
 800171c:	4331      	orrs	r1, r6
 800171e:	430c      	orrs	r4, r1
 8001720:	0763      	lsls	r3, r4, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dsub+0x11c>
 8001724:	230f      	movs	r3, #15
 8001726:	4023      	ands	r3, r4
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dsub+0x11c>
 800172c:	1d23      	adds	r3, r4, #4
 800172e:	42a3      	cmp	r3, r4
 8001730:	41a4      	sbcs	r4, r4
 8001732:	4264      	negs	r4, r4
 8001734:	44a1      	add	r9, r4
 8001736:	001c      	movs	r4, r3
 8001738:	464b      	mov	r3, r9
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dsub+0x124>
 800173e:	e0de      	b.n	80018fe <__aeabi_dsub+0x2e2>
 8001740:	4641      	mov	r1, r8
 8001742:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <__aeabi_dsub+0x358>)
 8001744:	3101      	adds	r1, #1
 8001746:	4299      	cmp	r1, r3
 8001748:	d100      	bne.n	800174c <__aeabi_dsub+0x130>
 800174a:	e0e7      	b.n	800191c <__aeabi_dsub+0x300>
 800174c:	464b      	mov	r3, r9
 800174e:	488a      	ldr	r0, [pc, #552]	; (8001978 <__aeabi_dsub+0x35c>)
 8001750:	08e4      	lsrs	r4, r4, #3
 8001752:	4003      	ands	r3, r0
 8001754:	0018      	movs	r0, r3
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	075b      	lsls	r3, r3, #29
 800175a:	0240      	lsls	r0, r0, #9
 800175c:	4323      	orrs	r3, r4
 800175e:	0d4a      	lsrs	r2, r1, #21
 8001760:	0b04      	lsrs	r4, r0, #12
 8001762:	0512      	lsls	r2, r2, #20
 8001764:	07ed      	lsls	r5, r5, #31
 8001766:	4322      	orrs	r2, r4
 8001768:	432a      	orrs	r2, r5
 800176a:	0018      	movs	r0, r3
 800176c:	0011      	movs	r1, r2
 800176e:	bcf0      	pop	{r4, r5, r6, r7}
 8001770:	46bb      	mov	fp, r7
 8001772:	46b2      	mov	sl, r6
 8001774:	46a9      	mov	r9, r5
 8001776:	46a0      	mov	r8, r4
 8001778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800177a:	4642      	mov	r2, r8
 800177c:	1a12      	subs	r2, r2, r0
 800177e:	2a00      	cmp	r2, #0
 8001780:	dd52      	ble.n	8001828 <__aeabi_dsub+0x20c>
 8001782:	2800      	cmp	r0, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dsub+0x16c>
 8001786:	e09c      	b.n	80018c2 <__aeabi_dsub+0x2a6>
 8001788:	45a0      	cmp	r8, r4
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x172>
 800178c:	e0ca      	b.n	8001924 <__aeabi_dsub+0x308>
 800178e:	2080      	movs	r0, #128	; 0x80
 8001790:	0400      	lsls	r0, r0, #16
 8001792:	4301      	orrs	r1, r0
 8001794:	2a38      	cmp	r2, #56	; 0x38
 8001796:	dd00      	ble.n	800179a <__aeabi_dsub+0x17e>
 8001798:	e149      	b.n	8001a2e <__aeabi_dsub+0x412>
 800179a:	2a1f      	cmp	r2, #31
 800179c:	dc00      	bgt.n	80017a0 <__aeabi_dsub+0x184>
 800179e:	e197      	b.n	8001ad0 <__aeabi_dsub+0x4b4>
 80017a0:	0010      	movs	r0, r2
 80017a2:	000e      	movs	r6, r1
 80017a4:	3820      	subs	r0, #32
 80017a6:	40c6      	lsrs	r6, r0
 80017a8:	2a20      	cmp	r2, #32
 80017aa:	d004      	beq.n	80017b6 <__aeabi_dsub+0x19a>
 80017ac:	2040      	movs	r0, #64	; 0x40
 80017ae:	1a82      	subs	r2, r0, r2
 80017b0:	4091      	lsls	r1, r2
 80017b2:	430f      	orrs	r7, r1
 80017b4:	46b9      	mov	r9, r7
 80017b6:	464c      	mov	r4, r9
 80017b8:	1e62      	subs	r2, r4, #1
 80017ba:	4194      	sbcs	r4, r2
 80017bc:	4334      	orrs	r4, r6
 80017be:	e13a      	b.n	8001a36 <__aeabi_dsub+0x41a>
 80017c0:	000a      	movs	r2, r1
 80017c2:	433a      	orrs	r2, r7
 80017c4:	d028      	beq.n	8001818 <__aeabi_dsub+0x1fc>
 80017c6:	46b3      	mov	fp, r6
 80017c8:	42b5      	cmp	r5, r6
 80017ca:	d02b      	beq.n	8001824 <__aeabi_dsub+0x208>
 80017cc:	4a6b      	ldr	r2, [pc, #428]	; (800197c <__aeabi_dsub+0x360>)
 80017ce:	4442      	add	r2, r8
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d05d      	beq.n	8001890 <__aeabi_dsub+0x274>
 80017d4:	4642      	mov	r2, r8
 80017d6:	4644      	mov	r4, r8
 80017d8:	1a82      	subs	r2, r0, r2
 80017da:	2c00      	cmp	r4, #0
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dsub+0x1c4>
 80017de:	e0f5      	b.n	80019cc <__aeabi_dsub+0x3b0>
 80017e0:	4665      	mov	r5, ip
 80017e2:	431d      	orrs	r5, r3
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dsub+0x1cc>
 80017e6:	e19c      	b.n	8001b22 <__aeabi_dsub+0x506>
 80017e8:	1e55      	subs	r5, r2, #1
 80017ea:	2a01      	cmp	r2, #1
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x1d4>
 80017ee:	e1fb      	b.n	8001be8 <__aeabi_dsub+0x5cc>
 80017f0:	4c60      	ldr	r4, [pc, #384]	; (8001974 <__aeabi_dsub+0x358>)
 80017f2:	42a2      	cmp	r2, r4
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dsub+0x1dc>
 80017f6:	e1bd      	b.n	8001b74 <__aeabi_dsub+0x558>
 80017f8:	002a      	movs	r2, r5
 80017fa:	e0f0      	b.n	80019de <__aeabi_dsub+0x3c2>
 80017fc:	0008      	movs	r0, r1
 80017fe:	4338      	orrs	r0, r7
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x1e8>
 8001802:	e0c3      	b.n	800198c <__aeabi_dsub+0x370>
 8001804:	1e50      	subs	r0, r2, #1
 8001806:	2a01      	cmp	r2, #1
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x1f0>
 800180a:	e1a8      	b.n	8001b5e <__aeabi_dsub+0x542>
 800180c:	4c59      	ldr	r4, [pc, #356]	; (8001974 <__aeabi_dsub+0x358>)
 800180e:	42a2      	cmp	r2, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x1f8>
 8001812:	e087      	b.n	8001924 <__aeabi_dsub+0x308>
 8001814:	0002      	movs	r2, r0
 8001816:	e736      	b.n	8001686 <__aeabi_dsub+0x6a>
 8001818:	2201      	movs	r2, #1
 800181a:	4056      	eors	r6, r2
 800181c:	46b3      	mov	fp, r6
 800181e:	42b5      	cmp	r5, r6
 8001820:	d000      	beq.n	8001824 <__aeabi_dsub+0x208>
 8001822:	e721      	b.n	8001668 <__aeabi_dsub+0x4c>
 8001824:	4a55      	ldr	r2, [pc, #340]	; (800197c <__aeabi_dsub+0x360>)
 8001826:	4442      	add	r2, r8
 8001828:	2a00      	cmp	r2, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x212>
 800182c:	e0b5      	b.n	800199a <__aeabi_dsub+0x37e>
 800182e:	4642      	mov	r2, r8
 8001830:	4644      	mov	r4, r8
 8001832:	1a82      	subs	r2, r0, r2
 8001834:	2c00      	cmp	r4, #0
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x21e>
 8001838:	e138      	b.n	8001aac <__aeabi_dsub+0x490>
 800183a:	4e4e      	ldr	r6, [pc, #312]	; (8001974 <__aeabi_dsub+0x358>)
 800183c:	42b0      	cmp	r0, r6
 800183e:	d100      	bne.n	8001842 <__aeabi_dsub+0x226>
 8001840:	e1de      	b.n	8001c00 <__aeabi_dsub+0x5e4>
 8001842:	2680      	movs	r6, #128	; 0x80
 8001844:	4664      	mov	r4, ip
 8001846:	0436      	lsls	r6, r6, #16
 8001848:	4334      	orrs	r4, r6
 800184a:	46a4      	mov	ip, r4
 800184c:	2a38      	cmp	r2, #56	; 0x38
 800184e:	dd00      	ble.n	8001852 <__aeabi_dsub+0x236>
 8001850:	e196      	b.n	8001b80 <__aeabi_dsub+0x564>
 8001852:	2a1f      	cmp	r2, #31
 8001854:	dd00      	ble.n	8001858 <__aeabi_dsub+0x23c>
 8001856:	e224      	b.n	8001ca2 <__aeabi_dsub+0x686>
 8001858:	2620      	movs	r6, #32
 800185a:	1ab4      	subs	r4, r6, r2
 800185c:	46a2      	mov	sl, r4
 800185e:	4664      	mov	r4, ip
 8001860:	4656      	mov	r6, sl
 8001862:	40b4      	lsls	r4, r6
 8001864:	46a1      	mov	r9, r4
 8001866:	001c      	movs	r4, r3
 8001868:	464e      	mov	r6, r9
 800186a:	40d4      	lsrs	r4, r2
 800186c:	4326      	orrs	r6, r4
 800186e:	0034      	movs	r4, r6
 8001870:	4656      	mov	r6, sl
 8001872:	40b3      	lsls	r3, r6
 8001874:	1e5e      	subs	r6, r3, #1
 8001876:	41b3      	sbcs	r3, r6
 8001878:	431c      	orrs	r4, r3
 800187a:	4663      	mov	r3, ip
 800187c:	40d3      	lsrs	r3, r2
 800187e:	18c9      	adds	r1, r1, r3
 8001880:	19e4      	adds	r4, r4, r7
 8001882:	42bc      	cmp	r4, r7
 8001884:	41bf      	sbcs	r7, r7
 8001886:	427f      	negs	r7, r7
 8001888:	46b9      	mov	r9, r7
 800188a:	4680      	mov	r8, r0
 800188c:	4489      	add	r9, r1
 800188e:	e0d8      	b.n	8001a42 <__aeabi_dsub+0x426>
 8001890:	4640      	mov	r0, r8
 8001892:	4c3b      	ldr	r4, [pc, #236]	; (8001980 <__aeabi_dsub+0x364>)
 8001894:	3001      	adds	r0, #1
 8001896:	4220      	tst	r0, r4
 8001898:	d000      	beq.n	800189c <__aeabi_dsub+0x280>
 800189a:	e0b4      	b.n	8001a06 <__aeabi_dsub+0x3ea>
 800189c:	4640      	mov	r0, r8
 800189e:	2800      	cmp	r0, #0
 80018a0:	d000      	beq.n	80018a4 <__aeabi_dsub+0x288>
 80018a2:	e144      	b.n	8001b2e <__aeabi_dsub+0x512>
 80018a4:	4660      	mov	r0, ip
 80018a6:	4318      	orrs	r0, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x290>
 80018aa:	e190      	b.n	8001bce <__aeabi_dsub+0x5b2>
 80018ac:	0008      	movs	r0, r1
 80018ae:	4338      	orrs	r0, r7
 80018b0:	d000      	beq.n	80018b4 <__aeabi_dsub+0x298>
 80018b2:	e1aa      	b.n	8001c0a <__aeabi_dsub+0x5ee>
 80018b4:	4661      	mov	r1, ip
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	0749      	lsls	r1, r1, #29
 80018ba:	430b      	orrs	r3, r1
 80018bc:	4661      	mov	r1, ip
 80018be:	08cc      	lsrs	r4, r1, #3
 80018c0:	e027      	b.n	8001912 <__aeabi_dsub+0x2f6>
 80018c2:	0008      	movs	r0, r1
 80018c4:	4338      	orrs	r0, r7
 80018c6:	d061      	beq.n	800198c <__aeabi_dsub+0x370>
 80018c8:	1e50      	subs	r0, r2, #1
 80018ca:	2a01      	cmp	r2, #1
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x2b4>
 80018ce:	e139      	b.n	8001b44 <__aeabi_dsub+0x528>
 80018d0:	42a2      	cmp	r2, r4
 80018d2:	d027      	beq.n	8001924 <__aeabi_dsub+0x308>
 80018d4:	0002      	movs	r2, r0
 80018d6:	e75d      	b.n	8001794 <__aeabi_dsub+0x178>
 80018d8:	0002      	movs	r2, r0
 80018da:	391f      	subs	r1, #31
 80018dc:	40ca      	lsrs	r2, r1
 80018de:	0011      	movs	r1, r2
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d003      	beq.n	80018ec <__aeabi_dsub+0x2d0>
 80018e4:	2240      	movs	r2, #64	; 0x40
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4098      	lsls	r0, r3
 80018ea:	4304      	orrs	r4, r0
 80018ec:	1e63      	subs	r3, r4, #1
 80018ee:	419c      	sbcs	r4, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4699      	mov	r9, r3
 80018f4:	4698      	mov	r8, r3
 80018f6:	430c      	orrs	r4, r1
 80018f8:	0763      	lsls	r3, r4, #29
 80018fa:	d000      	beq.n	80018fe <__aeabi_dsub+0x2e2>
 80018fc:	e712      	b.n	8001724 <__aeabi_dsub+0x108>
 80018fe:	464b      	mov	r3, r9
 8001900:	464a      	mov	r2, r9
 8001902:	08e4      	lsrs	r4, r4, #3
 8001904:	075b      	lsls	r3, r3, #29
 8001906:	4323      	orrs	r3, r4
 8001908:	08d4      	lsrs	r4, r2, #3
 800190a:	4642      	mov	r2, r8
 800190c:	4919      	ldr	r1, [pc, #100]	; (8001974 <__aeabi_dsub+0x358>)
 800190e:	428a      	cmp	r2, r1
 8001910:	d00e      	beq.n	8001930 <__aeabi_dsub+0x314>
 8001912:	0324      	lsls	r4, r4, #12
 8001914:	0552      	lsls	r2, r2, #21
 8001916:	0b24      	lsrs	r4, r4, #12
 8001918:	0d52      	lsrs	r2, r2, #21
 800191a:	e722      	b.n	8001762 <__aeabi_dsub+0x146>
 800191c:	000a      	movs	r2, r1
 800191e:	2400      	movs	r4, #0
 8001920:	2300      	movs	r3, #0
 8001922:	e71e      	b.n	8001762 <__aeabi_dsub+0x146>
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	4662      	mov	r2, ip
 8001928:	0752      	lsls	r2, r2, #29
 800192a:	4313      	orrs	r3, r2
 800192c:	4662      	mov	r2, ip
 800192e:	08d4      	lsrs	r4, r2, #3
 8001930:	001a      	movs	r2, r3
 8001932:	4322      	orrs	r2, r4
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x31c>
 8001936:	e1fc      	b.n	8001d32 <__aeabi_dsub+0x716>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <__aeabi_dsub+0x358>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	e70d      	b.n	8001762 <__aeabi_dsub+0x146>
 8001946:	0020      	movs	r0, r4
 8001948:	f000 fa86 	bl	8001e58 <__clzsi2>
 800194c:	0001      	movs	r1, r0
 800194e:	3118      	adds	r1, #24
 8001950:	291f      	cmp	r1, #31
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dsub+0x33a>
 8001954:	e6c4      	b.n	80016e0 <__aeabi_dsub+0xc4>
 8001956:	3808      	subs	r0, #8
 8001958:	4084      	lsls	r4, r0
 800195a:	4643      	mov	r3, r8
 800195c:	0020      	movs	r0, r4
 800195e:	2400      	movs	r4, #0
 8001960:	4588      	cmp	r8, r1
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dsub+0x34a>
 8001964:	e6c8      	b.n	80016f8 <__aeabi_dsub+0xdc>
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__aeabi_dsub+0x35c>)
 8001968:	1a5b      	subs	r3, r3, r1
 800196a:	4010      	ands	r0, r2
 800196c:	4698      	mov	r8, r3
 800196e:	4681      	mov	r9, r0
 8001970:	e6d6      	b.n	8001720 <__aeabi_dsub+0x104>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	000007ff 	.word	0x000007ff
 8001978:	ff7fffff 	.word	0xff7fffff
 800197c:	fffff801 	.word	0xfffff801
 8001980:	000007fe 	.word	0x000007fe
 8001984:	430f      	orrs	r7, r1
 8001986:	1e7a      	subs	r2, r7, #1
 8001988:	4197      	sbcs	r7, r2
 800198a:	e691      	b.n	80016b0 <__aeabi_dsub+0x94>
 800198c:	4661      	mov	r1, ip
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	0749      	lsls	r1, r1, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4661      	mov	r1, ip
 8001996:	08cc      	lsrs	r4, r1, #3
 8001998:	e7b8      	b.n	800190c <__aeabi_dsub+0x2f0>
 800199a:	4640      	mov	r0, r8
 800199c:	4cd3      	ldr	r4, [pc, #844]	; (8001cec <__aeabi_dsub+0x6d0>)
 800199e:	3001      	adds	r0, #1
 80019a0:	4220      	tst	r0, r4
 80019a2:	d000      	beq.n	80019a6 <__aeabi_dsub+0x38a>
 80019a4:	e0a2      	b.n	8001aec <__aeabi_dsub+0x4d0>
 80019a6:	4640      	mov	r0, r8
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d000      	beq.n	80019ae <__aeabi_dsub+0x392>
 80019ac:	e101      	b.n	8001bb2 <__aeabi_dsub+0x596>
 80019ae:	4660      	mov	r0, ip
 80019b0:	4318      	orrs	r0, r3
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dsub+0x39a>
 80019b4:	e15e      	b.n	8001c74 <__aeabi_dsub+0x658>
 80019b6:	0008      	movs	r0, r1
 80019b8:	4338      	orrs	r0, r7
 80019ba:	d000      	beq.n	80019be <__aeabi_dsub+0x3a2>
 80019bc:	e15f      	b.n	8001c7e <__aeabi_dsub+0x662>
 80019be:	4661      	mov	r1, ip
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	0749      	lsls	r1, r1, #29
 80019c4:	430b      	orrs	r3, r1
 80019c6:	4661      	mov	r1, ip
 80019c8:	08cc      	lsrs	r4, r1, #3
 80019ca:	e7a2      	b.n	8001912 <__aeabi_dsub+0x2f6>
 80019cc:	4dc8      	ldr	r5, [pc, #800]	; (8001cf0 <__aeabi_dsub+0x6d4>)
 80019ce:	42a8      	cmp	r0, r5
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x3b8>
 80019d2:	e0cf      	b.n	8001b74 <__aeabi_dsub+0x558>
 80019d4:	2580      	movs	r5, #128	; 0x80
 80019d6:	4664      	mov	r4, ip
 80019d8:	042d      	lsls	r5, r5, #16
 80019da:	432c      	orrs	r4, r5
 80019dc:	46a4      	mov	ip, r4
 80019de:	2a38      	cmp	r2, #56	; 0x38
 80019e0:	dc56      	bgt.n	8001a90 <__aeabi_dsub+0x474>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dsub+0x3cc>
 80019e6:	e0d1      	b.n	8001b8c <__aeabi_dsub+0x570>
 80019e8:	2520      	movs	r5, #32
 80019ea:	001e      	movs	r6, r3
 80019ec:	1aad      	subs	r5, r5, r2
 80019ee:	4664      	mov	r4, ip
 80019f0:	40ab      	lsls	r3, r5
 80019f2:	40ac      	lsls	r4, r5
 80019f4:	40d6      	lsrs	r6, r2
 80019f6:	1e5d      	subs	r5, r3, #1
 80019f8:	41ab      	sbcs	r3, r5
 80019fa:	4334      	orrs	r4, r6
 80019fc:	4323      	orrs	r3, r4
 80019fe:	4664      	mov	r4, ip
 8001a00:	40d4      	lsrs	r4, r2
 8001a02:	1b09      	subs	r1, r1, r4
 8001a04:	e049      	b.n	8001a9a <__aeabi_dsub+0x47e>
 8001a06:	4660      	mov	r0, ip
 8001a08:	1bdc      	subs	r4, r3, r7
 8001a0a:	1a46      	subs	r6, r0, r1
 8001a0c:	42a3      	cmp	r3, r4
 8001a0e:	4180      	sbcs	r0, r0
 8001a10:	4240      	negs	r0, r0
 8001a12:	4681      	mov	r9, r0
 8001a14:	0030      	movs	r0, r6
 8001a16:	464e      	mov	r6, r9
 8001a18:	1b80      	subs	r0, r0, r6
 8001a1a:	4681      	mov	r9, r0
 8001a1c:	0200      	lsls	r0, r0, #8
 8001a1e:	d476      	bmi.n	8001b0e <__aeabi_dsub+0x4f2>
 8001a20:	464b      	mov	r3, r9
 8001a22:	4323      	orrs	r3, r4
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dsub+0x40c>
 8001a26:	e652      	b.n	80016ce <__aeabi_dsub+0xb2>
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	e771      	b.n	8001912 <__aeabi_dsub+0x2f6>
 8001a2e:	4339      	orrs	r1, r7
 8001a30:	000c      	movs	r4, r1
 8001a32:	1e62      	subs	r2, r4, #1
 8001a34:	4194      	sbcs	r4, r2
 8001a36:	18e4      	adds	r4, r4, r3
 8001a38:	429c      	cmp	r4, r3
 8001a3a:	419b      	sbcs	r3, r3
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4463      	add	r3, ip
 8001a40:	4699      	mov	r9, r3
 8001a42:	464b      	mov	r3, r9
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	d400      	bmi.n	8001a4a <__aeabi_dsub+0x42e>
 8001a48:	e756      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	469c      	mov	ip, r3
 8001a4e:	4ba8      	ldr	r3, [pc, #672]	; (8001cf0 <__aeabi_dsub+0x6d4>)
 8001a50:	44e0      	add	r8, ip
 8001a52:	4598      	cmp	r8, r3
 8001a54:	d038      	beq.n	8001ac8 <__aeabi_dsub+0x4ac>
 8001a56:	464b      	mov	r3, r9
 8001a58:	48a6      	ldr	r0, [pc, #664]	; (8001cf4 <__aeabi_dsub+0x6d8>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4003      	ands	r3, r0
 8001a5e:	0018      	movs	r0, r3
 8001a60:	0863      	lsrs	r3, r4, #1
 8001a62:	4014      	ands	r4, r2
 8001a64:	431c      	orrs	r4, r3
 8001a66:	07c3      	lsls	r3, r0, #31
 8001a68:	431c      	orrs	r4, r3
 8001a6a:	0843      	lsrs	r3, r0, #1
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	e657      	b.n	8001720 <__aeabi_dsub+0x104>
 8001a70:	0010      	movs	r0, r2
 8001a72:	000e      	movs	r6, r1
 8001a74:	3820      	subs	r0, #32
 8001a76:	40c6      	lsrs	r6, r0
 8001a78:	2a20      	cmp	r2, #32
 8001a7a:	d004      	beq.n	8001a86 <__aeabi_dsub+0x46a>
 8001a7c:	2040      	movs	r0, #64	; 0x40
 8001a7e:	1a82      	subs	r2, r0, r2
 8001a80:	4091      	lsls	r1, r2
 8001a82:	430f      	orrs	r7, r1
 8001a84:	46b9      	mov	r9, r7
 8001a86:	464f      	mov	r7, r9
 8001a88:	1e7a      	subs	r2, r7, #1
 8001a8a:	4197      	sbcs	r7, r2
 8001a8c:	4337      	orrs	r7, r6
 8001a8e:	e60f      	b.n	80016b0 <__aeabi_dsub+0x94>
 8001a90:	4662      	mov	r2, ip
 8001a92:	431a      	orrs	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	4193      	sbcs	r3, r2
 8001a9a:	1afc      	subs	r4, r7, r3
 8001a9c:	42a7      	cmp	r7, r4
 8001a9e:	41bf      	sbcs	r7, r7
 8001aa0:	427f      	negs	r7, r7
 8001aa2:	1bcb      	subs	r3, r1, r7
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	465d      	mov	r5, fp
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	e608      	b.n	80016be <__aeabi_dsub+0xa2>
 8001aac:	4666      	mov	r6, ip
 8001aae:	431e      	orrs	r6, r3
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x498>
 8001ab2:	e0be      	b.n	8001c32 <__aeabi_dsub+0x616>
 8001ab4:	1e56      	subs	r6, r2, #1
 8001ab6:	2a01      	cmp	r2, #1
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x4a0>
 8001aba:	e109      	b.n	8001cd0 <__aeabi_dsub+0x6b4>
 8001abc:	4c8c      	ldr	r4, [pc, #560]	; (8001cf0 <__aeabi_dsub+0x6d4>)
 8001abe:	42a2      	cmp	r2, r4
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x4a8>
 8001ac2:	e119      	b.n	8001cf8 <__aeabi_dsub+0x6dc>
 8001ac4:	0032      	movs	r2, r6
 8001ac6:	e6c1      	b.n	800184c <__aeabi_dsub+0x230>
 8001ac8:	4642      	mov	r2, r8
 8001aca:	2400      	movs	r4, #0
 8001acc:	2300      	movs	r3, #0
 8001ace:	e648      	b.n	8001762 <__aeabi_dsub+0x146>
 8001ad0:	2020      	movs	r0, #32
 8001ad2:	000c      	movs	r4, r1
 8001ad4:	1a80      	subs	r0, r0, r2
 8001ad6:	003e      	movs	r6, r7
 8001ad8:	4087      	lsls	r7, r0
 8001ada:	4084      	lsls	r4, r0
 8001adc:	40d6      	lsrs	r6, r2
 8001ade:	1e78      	subs	r0, r7, #1
 8001ae0:	4187      	sbcs	r7, r0
 8001ae2:	40d1      	lsrs	r1, r2
 8001ae4:	4334      	orrs	r4, r6
 8001ae6:	433c      	orrs	r4, r7
 8001ae8:	448c      	add	ip, r1
 8001aea:	e7a4      	b.n	8001a36 <__aeabi_dsub+0x41a>
 8001aec:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <__aeabi_dsub+0x6d4>)
 8001aee:	4290      	cmp	r0, r2
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x4d8>
 8001af2:	e0e9      	b.n	8001cc8 <__aeabi_dsub+0x6ac>
 8001af4:	19df      	adds	r7, r3, r7
 8001af6:	429f      	cmp	r7, r3
 8001af8:	419b      	sbcs	r3, r3
 8001afa:	4461      	add	r1, ip
 8001afc:	425b      	negs	r3, r3
 8001afe:	18c9      	adds	r1, r1, r3
 8001b00:	07cc      	lsls	r4, r1, #31
 8001b02:	087f      	lsrs	r7, r7, #1
 8001b04:	084b      	lsrs	r3, r1, #1
 8001b06:	4699      	mov	r9, r3
 8001b08:	4680      	mov	r8, r0
 8001b0a:	433c      	orrs	r4, r7
 8001b0c:	e6f4      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001b0e:	1afc      	subs	r4, r7, r3
 8001b10:	42a7      	cmp	r7, r4
 8001b12:	41bf      	sbcs	r7, r7
 8001b14:	4663      	mov	r3, ip
 8001b16:	427f      	negs	r7, r7
 8001b18:	1ac9      	subs	r1, r1, r3
 8001b1a:	1bcb      	subs	r3, r1, r7
 8001b1c:	4699      	mov	r9, r3
 8001b1e:	465d      	mov	r5, fp
 8001b20:	e5d5      	b.n	80016ce <__aeabi_dsub+0xb2>
 8001b22:	08ff      	lsrs	r7, r7, #3
 8001b24:	074b      	lsls	r3, r1, #29
 8001b26:	465d      	mov	r5, fp
 8001b28:	433b      	orrs	r3, r7
 8001b2a:	08cc      	lsrs	r4, r1, #3
 8001b2c:	e6ee      	b.n	800190c <__aeabi_dsub+0x2f0>
 8001b2e:	4662      	mov	r2, ip
 8001b30:	431a      	orrs	r2, r3
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x51a>
 8001b34:	e082      	b.n	8001c3c <__aeabi_dsub+0x620>
 8001b36:	000b      	movs	r3, r1
 8001b38:	433b      	orrs	r3, r7
 8001b3a:	d11b      	bne.n	8001b74 <__aeabi_dsub+0x558>
 8001b3c:	2480      	movs	r4, #128	; 0x80
 8001b3e:	2500      	movs	r5, #0
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	e6f9      	b.n	8001938 <__aeabi_dsub+0x31c>
 8001b44:	19dc      	adds	r4, r3, r7
 8001b46:	429c      	cmp	r4, r3
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4461      	add	r1, ip
 8001b4c:	4689      	mov	r9, r1
 8001b4e:	425b      	negs	r3, r3
 8001b50:	4499      	add	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d444      	bmi.n	8001be2 <__aeabi_dsub+0x5c6>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	e6cc      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001b5e:	1bdc      	subs	r4, r3, r7
 8001b60:	4662      	mov	r2, ip
 8001b62:	42a3      	cmp	r3, r4
 8001b64:	419b      	sbcs	r3, r3
 8001b66:	1a51      	subs	r1, r2, r1
 8001b68:	425b      	negs	r3, r3
 8001b6a:	1acb      	subs	r3, r1, r3
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4698      	mov	r8, r3
 8001b72:	e5a4      	b.n	80016be <__aeabi_dsub+0xa2>
 8001b74:	08ff      	lsrs	r7, r7, #3
 8001b76:	074b      	lsls	r3, r1, #29
 8001b78:	465d      	mov	r5, fp
 8001b7a:	433b      	orrs	r3, r7
 8001b7c:	08cc      	lsrs	r4, r1, #3
 8001b7e:	e6d7      	b.n	8001930 <__aeabi_dsub+0x314>
 8001b80:	4662      	mov	r2, ip
 8001b82:	431a      	orrs	r2, r3
 8001b84:	0014      	movs	r4, r2
 8001b86:	1e63      	subs	r3, r4, #1
 8001b88:	419c      	sbcs	r4, r3
 8001b8a:	e679      	b.n	8001880 <__aeabi_dsub+0x264>
 8001b8c:	0015      	movs	r5, r2
 8001b8e:	4664      	mov	r4, ip
 8001b90:	3d20      	subs	r5, #32
 8001b92:	40ec      	lsrs	r4, r5
 8001b94:	46a0      	mov	r8, r4
 8001b96:	2a20      	cmp	r2, #32
 8001b98:	d005      	beq.n	8001ba6 <__aeabi_dsub+0x58a>
 8001b9a:	2540      	movs	r5, #64	; 0x40
 8001b9c:	4664      	mov	r4, ip
 8001b9e:	1aaa      	subs	r2, r5, r2
 8001ba0:	4094      	lsls	r4, r2
 8001ba2:	4323      	orrs	r3, r4
 8001ba4:	469a      	mov	sl, r3
 8001ba6:	4654      	mov	r4, sl
 8001ba8:	1e63      	subs	r3, r4, #1
 8001baa:	419c      	sbcs	r4, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	4323      	orrs	r3, r4
 8001bb0:	e773      	b.n	8001a9a <__aeabi_dsub+0x47e>
 8001bb2:	4662      	mov	r2, ip
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	d023      	beq.n	8001c00 <__aeabi_dsub+0x5e4>
 8001bb8:	000a      	movs	r2, r1
 8001bba:	433a      	orrs	r2, r7
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dsub+0x5a4>
 8001bbe:	e0a0      	b.n	8001d02 <__aeabi_dsub+0x6e6>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	0752      	lsls	r2, r2, #29
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	4662      	mov	r2, ip
 8001bca:	08d4      	lsrs	r4, r2, #3
 8001bcc:	e6b0      	b.n	8001930 <__aeabi_dsub+0x314>
 8001bce:	000b      	movs	r3, r1
 8001bd0:	433b      	orrs	r3, r7
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x5ba>
 8001bd4:	e728      	b.n	8001a28 <__aeabi_dsub+0x40c>
 8001bd6:	08ff      	lsrs	r7, r7, #3
 8001bd8:	074b      	lsls	r3, r1, #29
 8001bda:	465d      	mov	r5, fp
 8001bdc:	433b      	orrs	r3, r7
 8001bde:	08cc      	lsrs	r4, r1, #3
 8001be0:	e697      	b.n	8001912 <__aeabi_dsub+0x2f6>
 8001be2:	2302      	movs	r3, #2
 8001be4:	4698      	mov	r8, r3
 8001be6:	e736      	b.n	8001a56 <__aeabi_dsub+0x43a>
 8001be8:	1afc      	subs	r4, r7, r3
 8001bea:	42a7      	cmp	r7, r4
 8001bec:	41bf      	sbcs	r7, r7
 8001bee:	4663      	mov	r3, ip
 8001bf0:	427f      	negs	r7, r7
 8001bf2:	1ac9      	subs	r1, r1, r3
 8001bf4:	1bcb      	subs	r3, r1, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	465d      	mov	r5, fp
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	e55e      	b.n	80016be <__aeabi_dsub+0xa2>
 8001c00:	074b      	lsls	r3, r1, #29
 8001c02:	08ff      	lsrs	r7, r7, #3
 8001c04:	433b      	orrs	r3, r7
 8001c06:	08cc      	lsrs	r4, r1, #3
 8001c08:	e692      	b.n	8001930 <__aeabi_dsub+0x314>
 8001c0a:	1bdc      	subs	r4, r3, r7
 8001c0c:	4660      	mov	r0, ip
 8001c0e:	42a3      	cmp	r3, r4
 8001c10:	41b6      	sbcs	r6, r6
 8001c12:	1a40      	subs	r0, r0, r1
 8001c14:	4276      	negs	r6, r6
 8001c16:	1b80      	subs	r0, r0, r6
 8001c18:	4681      	mov	r9, r0
 8001c1a:	0200      	lsls	r0, r0, #8
 8001c1c:	d560      	bpl.n	8001ce0 <__aeabi_dsub+0x6c4>
 8001c1e:	1afc      	subs	r4, r7, r3
 8001c20:	42a7      	cmp	r7, r4
 8001c22:	41bf      	sbcs	r7, r7
 8001c24:	4663      	mov	r3, ip
 8001c26:	427f      	negs	r7, r7
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	1bcb      	subs	r3, r1, r7
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	465d      	mov	r5, fp
 8001c30:	e576      	b.n	8001720 <__aeabi_dsub+0x104>
 8001c32:	08ff      	lsrs	r7, r7, #3
 8001c34:	074b      	lsls	r3, r1, #29
 8001c36:	433b      	orrs	r3, r7
 8001c38:	08cc      	lsrs	r4, r1, #3
 8001c3a:	e667      	b.n	800190c <__aeabi_dsub+0x2f0>
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	08db      	lsrs	r3, r3, #3
 8001c40:	433a      	orrs	r2, r7
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x62a>
 8001c44:	e66f      	b.n	8001926 <__aeabi_dsub+0x30a>
 8001c46:	4662      	mov	r2, ip
 8001c48:	0752      	lsls	r2, r2, #29
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	4662      	mov	r2, ip
 8001c4e:	08d4      	lsrs	r4, r2, #3
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	0312      	lsls	r2, r2, #12
 8001c54:	4214      	tst	r4, r2
 8001c56:	d007      	beq.n	8001c68 <__aeabi_dsub+0x64c>
 8001c58:	08c8      	lsrs	r0, r1, #3
 8001c5a:	4210      	tst	r0, r2
 8001c5c:	d104      	bne.n	8001c68 <__aeabi_dsub+0x64c>
 8001c5e:	465d      	mov	r5, fp
 8001c60:	0004      	movs	r4, r0
 8001c62:	08fb      	lsrs	r3, r7, #3
 8001c64:	0749      	lsls	r1, r1, #29
 8001c66:	430b      	orrs	r3, r1
 8001c68:	0f5a      	lsrs	r2, r3, #29
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	0752      	lsls	r2, r2, #29
 8001c70:	4313      	orrs	r3, r2
 8001c72:	e65d      	b.n	8001930 <__aeabi_dsub+0x314>
 8001c74:	074b      	lsls	r3, r1, #29
 8001c76:	08ff      	lsrs	r7, r7, #3
 8001c78:	433b      	orrs	r3, r7
 8001c7a:	08cc      	lsrs	r4, r1, #3
 8001c7c:	e649      	b.n	8001912 <__aeabi_dsub+0x2f6>
 8001c7e:	19dc      	adds	r4, r3, r7
 8001c80:	429c      	cmp	r4, r3
 8001c82:	419b      	sbcs	r3, r3
 8001c84:	4461      	add	r1, ip
 8001c86:	4689      	mov	r9, r1
 8001c88:	425b      	negs	r3, r3
 8001c8a:	4499      	add	r9, r3
 8001c8c:	464b      	mov	r3, r9
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x678>
 8001c92:	e631      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001c94:	464a      	mov	r2, r9
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <__aeabi_dsub+0x6d8>)
 8001c98:	401a      	ands	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4691      	mov	r9, r2
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	e62a      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001ca2:	0016      	movs	r6, r2
 8001ca4:	4664      	mov	r4, ip
 8001ca6:	3e20      	subs	r6, #32
 8001ca8:	40f4      	lsrs	r4, r6
 8001caa:	46a0      	mov	r8, r4
 8001cac:	2a20      	cmp	r2, #32
 8001cae:	d005      	beq.n	8001cbc <__aeabi_dsub+0x6a0>
 8001cb0:	2640      	movs	r6, #64	; 0x40
 8001cb2:	4664      	mov	r4, ip
 8001cb4:	1ab2      	subs	r2, r6, r2
 8001cb6:	4094      	lsls	r4, r2
 8001cb8:	4323      	orrs	r3, r4
 8001cba:	469a      	mov	sl, r3
 8001cbc:	4654      	mov	r4, sl
 8001cbe:	1e63      	subs	r3, r4, #1
 8001cc0:	419c      	sbcs	r4, r3
 8001cc2:	4643      	mov	r3, r8
 8001cc4:	431c      	orrs	r4, r3
 8001cc6:	e5db      	b.n	8001880 <__aeabi_dsub+0x264>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	2400      	movs	r4, #0
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e548      	b.n	8001762 <__aeabi_dsub+0x146>
 8001cd0:	19dc      	adds	r4, r3, r7
 8001cd2:	42bc      	cmp	r4, r7
 8001cd4:	41bf      	sbcs	r7, r7
 8001cd6:	4461      	add	r1, ip
 8001cd8:	4689      	mov	r9, r1
 8001cda:	427f      	negs	r7, r7
 8001cdc:	44b9      	add	r9, r7
 8001cde:	e738      	b.n	8001b52 <__aeabi_dsub+0x536>
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4323      	orrs	r3, r4
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x6cc>
 8001ce6:	e69f      	b.n	8001a28 <__aeabi_dsub+0x40c>
 8001ce8:	e606      	b.n	80018f8 <__aeabi_dsub+0x2dc>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	000007ff 	.word	0x000007ff
 8001cf4:	ff7fffff 	.word	0xff7fffff
 8001cf8:	08ff      	lsrs	r7, r7, #3
 8001cfa:	074b      	lsls	r3, r1, #29
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	08cc      	lsrs	r4, r1, #3
 8001d00:	e616      	b.n	8001930 <__aeabi_dsub+0x314>
 8001d02:	4662      	mov	r2, ip
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	0752      	lsls	r2, r2, #29
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	4662      	mov	r2, ip
 8001d0c:	08d4      	lsrs	r4, r2, #3
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	0312      	lsls	r2, r2, #12
 8001d12:	4214      	tst	r4, r2
 8001d14:	d007      	beq.n	8001d26 <__aeabi_dsub+0x70a>
 8001d16:	08c8      	lsrs	r0, r1, #3
 8001d18:	4210      	tst	r0, r2
 8001d1a:	d104      	bne.n	8001d26 <__aeabi_dsub+0x70a>
 8001d1c:	465d      	mov	r5, fp
 8001d1e:	0004      	movs	r4, r0
 8001d20:	08fb      	lsrs	r3, r7, #3
 8001d22:	0749      	lsls	r1, r1, #29
 8001d24:	430b      	orrs	r3, r1
 8001d26:	0f5a      	lsrs	r2, r3, #29
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	0752      	lsls	r2, r2, #29
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	e5fe      	b.n	8001930 <__aeabi_dsub+0x314>
 8001d32:	2300      	movs	r3, #0
 8001d34:	4a01      	ldr	r2, [pc, #4]	; (8001d3c <__aeabi_dsub+0x720>)
 8001d36:	001c      	movs	r4, r3
 8001d38:	e513      	b.n	8001762 <__aeabi_dsub+0x146>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	000007ff 	.word	0x000007ff

08001d40 <__aeabi_d2iz>:
 8001d40:	000a      	movs	r2, r1
 8001d42:	b530      	push	{r4, r5, lr}
 8001d44:	4c13      	ldr	r4, [pc, #76]	; (8001d94 <__aeabi_d2iz+0x54>)
 8001d46:	0053      	lsls	r3, r2, #1
 8001d48:	0309      	lsls	r1, r1, #12
 8001d4a:	0005      	movs	r5, r0
 8001d4c:	0b09      	lsrs	r1, r1, #12
 8001d4e:	2000      	movs	r0, #0
 8001d50:	0d5b      	lsrs	r3, r3, #21
 8001d52:	0fd2      	lsrs	r2, r2, #31
 8001d54:	42a3      	cmp	r3, r4
 8001d56:	dd04      	ble.n	8001d62 <__aeabi_d2iz+0x22>
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <__aeabi_d2iz+0x58>)
 8001d5a:	4283      	cmp	r3, r0
 8001d5c:	dd02      	ble.n	8001d64 <__aeabi_d2iz+0x24>
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <__aeabi_d2iz+0x5c>)
 8001d60:	18d0      	adds	r0, r2, r3
 8001d62:	bd30      	pop	{r4, r5, pc}
 8001d64:	2080      	movs	r0, #128	; 0x80
 8001d66:	0340      	lsls	r0, r0, #13
 8001d68:	4301      	orrs	r1, r0
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <__aeabi_d2iz+0x60>)
 8001d6c:	1ac0      	subs	r0, r0, r3
 8001d6e:	281f      	cmp	r0, #31
 8001d70:	dd08      	ble.n	8001d84 <__aeabi_d2iz+0x44>
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <__aeabi_d2iz+0x64>)
 8001d74:	1ac3      	subs	r3, r0, r3
 8001d76:	40d9      	lsrs	r1, r3
 8001d78:	000b      	movs	r3, r1
 8001d7a:	4258      	negs	r0, r3
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d1f0      	bne.n	8001d62 <__aeabi_d2iz+0x22>
 8001d80:	0018      	movs	r0, r3
 8001d82:	e7ee      	b.n	8001d62 <__aeabi_d2iz+0x22>
 8001d84:	4c08      	ldr	r4, [pc, #32]	; (8001da8 <__aeabi_d2iz+0x68>)
 8001d86:	40c5      	lsrs	r5, r0
 8001d88:	46a4      	mov	ip, r4
 8001d8a:	4463      	add	r3, ip
 8001d8c:	4099      	lsls	r1, r3
 8001d8e:	000b      	movs	r3, r1
 8001d90:	432b      	orrs	r3, r5
 8001d92:	e7f2      	b.n	8001d7a <__aeabi_d2iz+0x3a>
 8001d94:	000003fe 	.word	0x000003fe
 8001d98:	0000041d 	.word	0x0000041d
 8001d9c:	7fffffff 	.word	0x7fffffff
 8001da0:	00000433 	.word	0x00000433
 8001da4:	00000413 	.word	0x00000413
 8001da8:	fffffbed 	.word	0xfffffbed

08001dac <__aeabi_i2d>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d016      	beq.n	8001de0 <__aeabi_i2d+0x34>
 8001db2:	17c3      	asrs	r3, r0, #31
 8001db4:	18c5      	adds	r5, r0, r3
 8001db6:	405d      	eors	r5, r3
 8001db8:	0fc4      	lsrs	r4, r0, #31
 8001dba:	0028      	movs	r0, r5
 8001dbc:	f000 f84c 	bl	8001e58 <__clzsi2>
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <__aeabi_i2d+0x5c>)
 8001dc2:	1a12      	subs	r2, r2, r0
 8001dc4:	280a      	cmp	r0, #10
 8001dc6:	dc16      	bgt.n	8001df6 <__aeabi_i2d+0x4a>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	002e      	movs	r6, r5
 8001dcc:	3315      	adds	r3, #21
 8001dce:	409e      	lsls	r6, r3
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	1a18      	subs	r0, r3, r0
 8001dd4:	40c5      	lsrs	r5, r0
 8001dd6:	0552      	lsls	r2, r2, #21
 8001dd8:	032d      	lsls	r5, r5, #12
 8001dda:	0b2d      	lsrs	r5, r5, #12
 8001ddc:	0d53      	lsrs	r3, r2, #21
 8001dde:	e003      	b.n	8001de8 <__aeabi_i2d+0x3c>
 8001de0:	2400      	movs	r4, #0
 8001de2:	2300      	movs	r3, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	432b      	orrs	r3, r5
 8001dec:	07e4      	lsls	r4, r4, #31
 8001dee:	4323      	orrs	r3, r4
 8001df0:	0030      	movs	r0, r6
 8001df2:	0019      	movs	r1, r3
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	380b      	subs	r0, #11
 8001df8:	4085      	lsls	r5, r0
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	032d      	lsls	r5, r5, #12
 8001dfe:	2600      	movs	r6, #0
 8001e00:	0b2d      	lsrs	r5, r5, #12
 8001e02:	0d53      	lsrs	r3, r2, #21
 8001e04:	e7f0      	b.n	8001de8 <__aeabi_i2d+0x3c>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	0000041e 	.word	0x0000041e

08001e0c <__aeabi_ui2d>:
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	1e04      	subs	r4, r0, #0
 8001e10:	d010      	beq.n	8001e34 <__aeabi_ui2d+0x28>
 8001e12:	f000 f821 	bl	8001e58 <__clzsi2>
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <__aeabi_ui2d+0x48>)
 8001e18:	1a1b      	subs	r3, r3, r0
 8001e1a:	280a      	cmp	r0, #10
 8001e1c:	dc11      	bgt.n	8001e42 <__aeabi_ui2d+0x36>
 8001e1e:	220b      	movs	r2, #11
 8001e20:	0021      	movs	r1, r4
 8001e22:	1a12      	subs	r2, r2, r0
 8001e24:	40d1      	lsrs	r1, r2
 8001e26:	3015      	adds	r0, #21
 8001e28:	030a      	lsls	r2, r1, #12
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4084      	lsls	r4, r0
 8001e2e:	0b12      	lsrs	r2, r2, #12
 8001e30:	0d5b      	lsrs	r3, r3, #21
 8001e32:	e001      	b.n	8001e38 <__aeabi_ui2d+0x2c>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2200      	movs	r2, #0
 8001e38:	051b      	lsls	r3, r3, #20
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	0019      	movs	r1, r3
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	0022      	movs	r2, r4
 8001e44:	380b      	subs	r0, #11
 8001e46:	4082      	lsls	r2, r0
 8001e48:	055b      	lsls	r3, r3, #21
 8001e4a:	0312      	lsls	r2, r2, #12
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	0b12      	lsrs	r2, r2, #12
 8001e50:	0d5b      	lsrs	r3, r3, #21
 8001e52:	e7f1      	b.n	8001e38 <__aeabi_ui2d+0x2c>
 8001e54:	0000041e 	.word	0x0000041e

08001e58 <__clzsi2>:
 8001e58:	211c      	movs	r1, #28
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	4298      	cmp	r0, r3
 8001e60:	d301      	bcc.n	8001e66 <__clzsi2+0xe>
 8001e62:	0c00      	lsrs	r0, r0, #16
 8001e64:	3910      	subs	r1, #16
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d301      	bcc.n	8001e70 <__clzsi2+0x18>
 8001e6c:	0a00      	lsrs	r0, r0, #8
 8001e6e:	3908      	subs	r1, #8
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	4298      	cmp	r0, r3
 8001e74:	d301      	bcc.n	8001e7a <__clzsi2+0x22>
 8001e76:	0900      	lsrs	r0, r0, #4
 8001e78:	3904      	subs	r1, #4
 8001e7a:	a202      	add	r2, pc, #8	; (adr r2, 8001e84 <__clzsi2+0x2c>)
 8001e7c:	5c10      	ldrb	r0, [r2, r0]
 8001e7e:	1840      	adds	r0, r0, r1
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	02020304 	.word	0x02020304
 8001e88:	01010101 	.word	0x01010101
	...

08001e94 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <MX_USART1_UART_Init+0x5c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ea0:	22e1      	movs	r2, #225	; 0xe1
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <MX_USART1_UART_Init+0x58>)
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f002 fdd9 	bl	8004a90 <HAL_UART_Init>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8001ee2:	f000 fae3 	bl	80024ac <Error_Handler>
  }
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000034 	.word	0x20000034
 8001ef0:	40013800 	.word	0x40013800

08001ef4 <HAL_UART_RxCpltCallback>:

// void Send_data_back(uint8_t * data2beback, uint16_t data_len, uint32_t timeout) {
//   HAL_UART_Transmit(&huart1, data2beback, data_len, timeout);
// }

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  memcpy(CMD_recv, CMD_recv_buffer, CMD_BUFFER_LEN);
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_UART_RxCpltCallback+0x28>)
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_UART_RxCpltCallback+0x2c>)
 8001f00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f02:	c313      	stmia	r3!, {r0, r1, r4}
 8001f04:	ca03      	ldmia	r2!, {r0, r1}
 8001f06:	c303      	stmia	r3!, {r0, r1}
  HAL_UART_Receive_DMA(&huart1, CMD_recv_buffer, CMD_BUFFER_LEN);
 8001f08:	4905      	ldr	r1, [pc, #20]	; (8001f20 <HAL_UART_RxCpltCallback+0x2c>)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_UART_RxCpltCallback+0x30>)
 8001f0c:	2214      	movs	r2, #20
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f002 fe12 	bl	8004b38 <HAL_UART_Receive_DMA>
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b003      	add	sp, #12
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	200000d0 	.word	0x200000d0
 8001f20:	200000bc 	.word	0x200000bc
 8001f24:	20000034 	.word	0x20000034

08001f28 <DMA_init>:

void DMA_init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, PIN_RS495_RE_Pin, GPIO_PIN_RESET);
 8001f2c:	2390      	movs	r3, #144	; 0x90
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	2200      	movs	r2, #0
 8001f32:	2110      	movs	r1, #16
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 fc29 	bl	800378c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_RS485_DE_Pin, GPIO_PIN_RESET);
 8001f3a:	2390      	movs	r3, #144	; 0x90
 8001f3c:	05db      	lsls	r3, r3, #23
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2102      	movs	r1, #2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f001 fc22 	bl	800378c <HAL_GPIO_WritePin>

  HAL_UART_Receive_DMA(&huart1, CMD_recv_buffer, CMD_BUFFER_LEN);
 8001f48:	4904      	ldr	r1, [pc, #16]	; (8001f5c <DMA_init+0x34>)
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <DMA_init+0x38>)
 8001f4c:	2214      	movs	r2, #20
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f002 fdf2 	bl	8004b38 <HAL_UART_Receive_DMA>
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	200000bc 	.word	0x200000bc
 8001f60:	20000034 	.word	0x20000034

08001f64 <Parse_CMD>:

void Parse_CMD(uint8_t* cmd_recv) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  step_number      = 0;
 8001f6c:	4b49      	ldr	r3, [pc, #292]	; (8002094 <Parse_CMD+0x130>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
  data_start_index = 0;
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <Parse_CMD+0x134>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
  data_stop_index  = 0;
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <Parse_CMD+0x138>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

  if (cmd_recv[0] == 'P') {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b50      	cmp	r3, #80	; 0x50
 8001f84:	d000      	beq.n	8001f88 <Parse_CMD+0x24>
 8001f86:	e081      	b.n	800208c <Parse_CMD+0x128>
    flash_led_once (50);
 8001f88:	2032      	movs	r0, #50	; 0x32
 8001f8a:	f000 f88d 	bl	80020a8 <flash_led_once>

    for (i = 1; i < CMD_BUFFER_LEN; i ++) {
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <Parse_CMD+0x13c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e01e      	b.n	8001fd4 <Parse_CMD+0x70>
      if (cmd_recv[i] == ME_ID) {
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <Parse_CMD+0x13c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b58      	cmp	r3, #88	; 0x58
 8001fa4:	d105      	bne.n	8001fb2 <Parse_CMD+0x4e>
        data_start_index = i + 1;
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <Parse_CMD+0x13c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <Parse_CMD+0x134>)
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e00b      	b.n	8001fca <Parse_CMD+0x66>
      }
      else if (cmd_recv[i] > '9') {
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <Parse_CMD+0x13c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	189b      	adds	r3, r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b39      	cmp	r3, #57	; 0x39
 8001fc0:	d903      	bls.n	8001fca <Parse_CMD+0x66>
        data_stop_index = i;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <Parse_CMD+0x13c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b35      	ldr	r3, [pc, #212]	; (800209c <Parse_CMD+0x138>)
 8001fc8:	601a      	str	r2, [r3, #0]
    for (i = 1; i < CMD_BUFFER_LEN; i ++) {
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <Parse_CMD+0x13c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <Parse_CMD+0x13c>)
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <Parse_CMD+0x13c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b13      	cmp	r3, #19
 8001fda:	dddc      	ble.n	8001f96 <Parse_CMD+0x32>
      }
    }

    for (i = data_start_index; i < data_stop_index; i ++) {
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <Parse_CMD+0x134>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <Parse_CMD+0x13c>)
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e03e      	b.n	8002064 <Parse_CMD+0x100>
      if (cmd_recv[i] == '+') {
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <Parse_CMD+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	001a      	movs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b2b      	cmp	r3, #43	; 0x2b
 8001ff4:	d103      	bne.n	8001ffe <Parse_CMD+0x9a>
        rotation_dir = CLKDIR;
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <Parse_CMD+0x140>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e02d      	b.n	800205a <Parse_CMD+0xf6>
      }
      else if (cmd_recv[i] == '-') {
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <Parse_CMD+0x13c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	001a      	movs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	189b      	adds	r3, r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b2d      	cmp	r3, #45	; 0x2d
 800200c:	d103      	bne.n	8002016 <Parse_CMD+0xb2>
        rotation_dir = COUNTERCLKDIR;
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <Parse_CMD+0x140>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e021      	b.n	800205a <Parse_CMD+0xf6>
      }
      else if (cmd_recv[i] >= '0' && cmd_recv[i] <= '9') {
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <Parse_CMD+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	001a      	movs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	189b      	adds	r3, r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b2f      	cmp	r3, #47	; 0x2f
 8002024:	d919      	bls.n	800205a <Parse_CMD+0xf6>
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <Parse_CMD+0x13c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	001a      	movs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	189b      	adds	r3, r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b39      	cmp	r3, #57	; 0x39
 8002034:	d811      	bhi.n	800205a <Parse_CMD+0xf6>
          step_number = step_number * 10 + (uint32_t)(cmd_recv[i] - '0');
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <Parse_CMD+0x130>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	0013      	movs	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	189b      	adds	r3, r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	001a      	movs	r2, r3
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <Parse_CMD+0x13c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	185b      	adds	r3, r3, r1
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	3b30      	subs	r3, #48	; 0x30
 8002054:	001a      	movs	r2, r3
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <Parse_CMD+0x130>)
 8002058:	601a      	str	r2, [r3, #0]
    for (i = data_start_index; i < data_stop_index; i ++) {
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <Parse_CMD+0x13c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <Parse_CMD+0x13c>)
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <Parse_CMD+0x13c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <Parse_CMD+0x138>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbba      	blt.n	8001fe6 <Parse_CMD+0x82>
      }
    }

    move_steps(rotation_dir, step_number);
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <Parse_CMD+0x140>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <Parse_CMD+0x130>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0019      	movs	r1, r3
 800207a:	0010      	movs	r0, r2
 800207c:	f000 fa84 	bl	8002588 <move_steps>

    memset(cmd_recv, 0, CMD_BUFFER_LEN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2214      	movs	r2, #20
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f003 fafc 	bl	8005684 <memset>
  }

  // flash_led_once (50);
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200000f0 	.word	0x200000f0
 8002098:	200000e8 	.word	0x200000e8
 800209c:	200000ec 	.word	0x200000ec
 80020a0:	200000e4 	.word	0x200000e4
 80020a4:	200000f4 	.word	0x200000f4

080020a8 <flash_led_once>:
#include "debug_FZ.h"

void flash_led_once(uint32_t period) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_SET);
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <flash_led_once+0x30>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	2102      	movs	r1, #2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f001 fb68 	bl	800378c <HAL_GPIO_WritePin>
  HAL_Delay(period);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fd14 	bl	8002aec <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <flash_led_once+0x30>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	2102      	movs	r1, #2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f001 fb5e 	bl	800378c <HAL_GPIO_WritePin>
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	48000400 	.word	0x48000400

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f000 fca0 	bl	8002a24 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f82e 	bl	8002144 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f000 f95e 	bl	80023a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f000 f93e 	bl	800236c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80020f0:	f7ff fed0 	bl	8001e94 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80020f4:	f000 f88c 	bl	8002210 <MX_ADC_Init>
  MX_TIM2_Init();
 80020f8:	f000 f8e6 	bl	80022c8 <MX_TIM2_Init>

  DMA_init();
 80020fc:	f7ff ff14 	bl	8001f28 <DMA_init>

  stepper_init(MICROSTEP_1_8);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 f9d9 	bl	80024b8 <stepper_init>

  HAL_TIM_Base_Start_IT(&htim2);
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <main+0x5c>)
 8002108:	0018      	movs	r0, r3
 800210a:	f002 f8f3 	bl	80042f4 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_SET);
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <main+0x60>)
 8002110:	2201      	movs	r2, #1
 8002112:	2102      	movs	r1, #2
 8002114:	0018      	movs	r0, r3
 8002116:	f001 fb39 	bl	800378c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800211a:	2032      	movs	r0, #50	; 0x32
 800211c:	f000 fce6 	bl	8002aec <HAL_Delay>
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <main+0x60>)
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	0018      	movs	r0, r3
 8002128:	f001 fb30 	bl	800378c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Parse_CMD(CMD_recv);
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <main+0x64>)
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff ff18 	bl	8001f64 <Parse_CMD>
 8002134:	e7fa      	b.n	800212c <main+0x50>
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000138 	.word	0x20000138
 800213c:	48000400 	.word	0x48000400
 8002140:	200000d0 	.word	0x200000d0

08002144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b095      	sub	sp, #84	; 0x54
 8002148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214a:	2420      	movs	r4, #32
 800214c:	193b      	adds	r3, r7, r4
 800214e:	0018      	movs	r0, r3
 8002150:	2330      	movs	r3, #48	; 0x30
 8002152:	001a      	movs	r2, r3
 8002154:	2100      	movs	r1, #0
 8002156:	f003 fa95 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215a:	2310      	movs	r3, #16
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	0018      	movs	r0, r3
 8002160:	2310      	movs	r3, #16
 8002162:	001a      	movs	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	f003 fa8d 	bl	8005684 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216a:	003b      	movs	r3, r7
 800216c:	0018      	movs	r0, r3
 800216e:	2310      	movs	r3, #16
 8002170:	001a      	movs	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f003 fa86 	bl	8005684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002178:	0021      	movs	r1, r4
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2211      	movs	r2, #17
 800217e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002180:	187b      	adds	r3, r7, r1
 8002182:	2201      	movs	r2, #1
 8002184:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002186:	187b      	adds	r3, r7, r1
 8002188:	2201      	movs	r2, #1
 800218a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800218c:	187b      	adds	r3, r7, r1
 800218e:	2210      	movs	r2, #16
 8002190:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002192:	187b      	adds	r3, r7, r1
 8002194:	2202      	movs	r2, #2
 8002196:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	0252      	lsls	r2, r2, #9
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	2200      	movs	r2, #0
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	0018      	movs	r0, r3
 80021b2:	f001 fb23 	bl	80037fc <HAL_RCC_OscConfig>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80021ba:	f000 f977 	bl	80024ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021be:	2110      	movs	r1, #16
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2207      	movs	r2, #7
 80021c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2202      	movs	r2, #2
 80021ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	2101      	movs	r1, #1
 80021dc:	0018      	movs	r0, r3
 80021de:	f001 fe27 	bl	8003e30 <HAL_RCC_ClockConfig>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021e6:	f000 f961 	bl	80024ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021ea:	003b      	movs	r3, r7
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021f0:	003b      	movs	r3, r7
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f6:	003b      	movs	r3, r7
 80021f8:	0018      	movs	r0, r3
 80021fa:	f001 ff5d 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002202:	f000 f953 	bl	80024ac <Error_Handler>
  }
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b015      	add	sp, #84	; 0x54
 800220c:	bd90      	pop	{r4, r7, pc}
	...

08002210 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	0018      	movs	r0, r3
 800221a:	230c      	movs	r3, #12
 800221c:	001a      	movs	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	f003 fa30 	bl	8005684 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002226:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <MX_ADC_Init+0xb4>)
 8002228:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <MX_ADC_Init+0xb0>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <MX_ADC_Init+0xb0>)
 800223e:	2201      	movs	r2, #1
 8002240:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002244:	2204      	movs	r2, #4
 8002246:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_ADC_Init+0xb0>)
 800224a:	2200      	movs	r2, #0
 800224c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002250:	2200      	movs	r2, #0
 8002252:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002256:	2200      	movs	r2, #0
 8002258:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MX_ADC_Init+0xb0>)
 800225c:	2200      	movs	r2, #0
 800225e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002262:	22c2      	movs	r2, #194	; 0xc2
 8002264:	32ff      	adds	r2, #255	; 0xff
 8002266:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_ADC_Init+0xb0>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002270:	2224      	movs	r2, #36	; 0x24
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_ADC_Init+0xb0>)
 8002278:	2201      	movs	r2, #1
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_ADC_Init+0xb0>)
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fc58 	bl	8002b34 <HAL_ADC_Init>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002288:	f000 f910 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2212      	movs	r2, #18
 8002290:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	0152      	lsls	r2, r2, #5
 8002298:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	0552      	lsls	r2, r2, #21
 80022a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80022a2:	1d3a      	adds	r2, r7, #4
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_ADC_Init+0xb0>)
 80022a6:	0011      	movs	r1, r2
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 fd83 	bl	8002db4 <HAL_ADC_ConfigChannel>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d001      	beq.n	80022b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80022b2:	f000 f8fb 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	200000f8 	.word	0x200000f8
 80022c4:	40012400 	.word	0x40012400

080022c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	2308      	movs	r3, #8
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	0018      	movs	r0, r3
 80022d4:	2310      	movs	r3, #16
 80022d6:	001a      	movs	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	f003 f9d3 	bl	8005684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022de:	003b      	movs	r3, r7
 80022e0:	0018      	movs	r0, r3
 80022e2:	2308      	movs	r3, #8
 80022e4:	001a      	movs	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f003 f9cc 	bl	8005684 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <MX_TIM2_Init+0xa0>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	05d2      	lsls	r2, r2, #23
 80022f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <MX_TIM2_Init+0xa0>)
 80022f6:	2232      	movs	r2, #50	; 0x32
 80022f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_TIM2_Init+0xa0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 160;
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <MX_TIM2_Init+0xa0>)
 8002302:	22a0      	movs	r2, #160	; 0xa0
 8002304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_TIM2_Init+0xa0>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <MX_TIM2_Init+0xa0>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_TIM2_Init+0xa0>)
 8002314:	0018      	movs	r0, r3
 8002316:	f001 ff9d 	bl	8004254 <HAL_TIM_Base_Init>
 800231a:	1e03      	subs	r3, r0, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM2_Init+0x5a>
    Error_Handler();
 800231e:	f000 f8c5 	bl	80024ac <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002322:	2108      	movs	r1, #8
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	0152      	lsls	r2, r2, #5
 800232a:	601a      	str	r2, [r3, #0]

  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800232c:	187a      	adds	r2, r7, r1
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_TIM2_Init+0xa0>)
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f002 f940 	bl	80045b8 <HAL_TIM_ConfigClockSource>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM2_Init+0x78>
    Error_Handler();
 800233c:	f000 f8b6 	bl	80024ac <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	003b      	movs	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	003b      	movs	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800234c:	003a      	movs	r2, r7
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_TIM2_Init+0xa0>)
 8002350:	0011      	movs	r1, r2
 8002352:	0018      	movs	r0, r3
 8002354:	f002 fb34 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM2_Init+0x98>
    Error_Handler();
 800235c:	f000 f8a6 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b006      	add	sp, #24
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000138 	.word	0x20000138

0800236c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_DMA_Init+0x38>)
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_DMA_Init+0x38>)
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	615a      	str	r2, [r3, #20]
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_DMA_Init+0x38>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	200a      	movs	r0, #10
 8002390:	f000 feca 	bl	8003128 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002394:	200a      	movs	r0, #10
 8002396:	f000 fedc 	bl	8003152 <HAL_NVIC_EnableIRQ>

}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000

080023a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	240c      	movs	r4, #12
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	0018      	movs	r0, r3
 80023b4:	2314      	movs	r3, #20
 80023b6:	001a      	movs	r2, r3
 80023b8:	2100      	movs	r1, #0
 80023ba:	f003 f963 	bl	8005684 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	03c9      	lsls	r1, r1, #15
 80023c8:	430a      	orrs	r2, r1
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	03db      	lsls	r3, r3, #15
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0289      	lsls	r1, r1, #10
 80023e4:	430a      	orrs	r2, r1
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	4013      	ands	r3, r2
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <MX_GPIO_Init+0xf8>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	02c9      	lsls	r1, r1, #11
 8002400:	430a      	orrs	r2, r1
 8002402:	615a      	str	r2, [r3, #20]
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <MX_GPIO_Init+0xf8>)
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	02db      	lsls	r3, r3, #11
 800240c:	4013      	ands	r3, r2
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_RS485_DE_Pin|PIN_RS495_RE_Pin|PIN_MS1_Pin|PIN_MS2_Pin
 8002412:	4924      	ldr	r1, [pc, #144]	; (80024a4 <MX_GPIO_Init+0xfc>)
 8002414:	2390      	movs	r3, #144	; 0x90
 8002416:	05db      	lsls	r3, r3, #23
 8002418:	2200      	movs	r2, #0
 800241a:	0018      	movs	r0, r3
 800241c:	f001 f9b6 	bl	800378c <HAL_GPIO_WritePin>
                          |PIN_MS3_Pin|PIN_DIR_Pin|PIN_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_GPIO_Port, PIN_LED_Pin, GPIO_PIN_RESET);
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <MX_GPIO_Init+0x100>)
 8002422:	2200      	movs	r2, #0
 8002424:	2102      	movs	r1, #2
 8002426:	0018      	movs	r0, r3
 8002428:	f001 f9b0 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_LIMIT_SW_Pin */
  GPIO_InitStruct.Pin = PIN_LIMIT_SW_Pin;
 800242c:	193b      	adds	r3, r7, r4
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	193b      	adds	r3, r7, r4
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	193b      	adds	r3, r7, r4
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIN_LIMIT_SW_GPIO_Port, &GPIO_InitStruct);
 800243e:	193a      	adds	r2, r7, r4
 8002440:	2390      	movs	r3, #144	; 0x90
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	0011      	movs	r1, r2
 8002446:	0018      	movs	r0, r3
 8002448:	f001 f838 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_RS485_DE_Pin PIN_RS495_RE_Pin PIN_MS1_Pin PIN_MS2_Pin
                           PIN_MS3_Pin PIN_DIR_Pin PIN_STEP_Pin */
  GPIO_InitStruct.Pin = PIN_RS485_DE_Pin|PIN_RS495_RE_Pin|PIN_MS1_Pin|PIN_MS2_Pin
 800244c:	193b      	adds	r3, r7, r4
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <MX_GPIO_Init+0xfc>)
 8002450:	601a      	str	r2, [r3, #0]
                          |PIN_MS3_Pin|PIN_DIR_Pin|PIN_STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2201      	movs	r2, #1
 8002456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	193b      	adds	r3, r7, r4
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	193a      	adds	r2, r7, r4
 8002466:	2390      	movs	r3, #144	; 0x90
 8002468:	05db      	lsls	r3, r3, #23
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f001 f825 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_LED_Pin */
  GPIO_InitStruct.Pin = PIN_LED_Pin;
 8002472:	0021      	movs	r1, r4
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2201      	movs	r2, #1
 800247e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PIN_LED_GPIO_Port, &GPIO_InitStruct);
 800248c:	187b      	adds	r3, r7, r1
 800248e:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <MX_GPIO_Init+0x100>)
 8002490:	0019      	movs	r1, r3
 8002492:	0010      	movs	r0, r2
 8002494:	f001 f812 	bl	80034bc <HAL_GPIO_Init>

}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b009      	add	sp, #36	; 0x24
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	000006f2 	.word	0x000006f2
 80024a8:	48000400 	.word	0x48000400

080024ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80024b4:	e7fe      	b.n	80024b4 <Error_Handler+0x8>
	...

080024b8 <stepper_init>:

static double real_time_speed = SPEED_INIT;
static double acc   = 0.0;
static double acc_t = 0.0;

void stepper_init(uint8_t misro_stepping_confg) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	0002      	movs	r2, r0
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	701a      	strb	r2, [r3, #0]
  ms1 = (misro_stepping_confg)      & 0x01;
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	401a      	ands	r2, r3
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <stepper_init+0x7c>)
 80024ce:	601a      	str	r2, [r3, #0]
  ms2 = (misro_stepping_confg >> 1) & 0x01;
 80024d0:	1dfb      	adds	r3, r7, #7
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	001a      	movs	r2, r3
 80024da:	2301      	movs	r3, #1
 80024dc:	401a      	ands	r2, r3
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <stepper_init+0x80>)
 80024e0:	601a      	str	r2, [r3, #0]
  ms3 = (misro_stepping_confg >> 2) & 0x01;
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	001a      	movs	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	401a      	ands	r2, r3
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <stepper_init+0x84>)
 80024f2:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, PIN_MS1_Pin, ms1);
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <stepper_init+0x7c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	2390      	movs	r3, #144	; 0x90
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	2120      	movs	r1, #32
 8002500:	0018      	movs	r0, r3
 8002502:	f001 f943 	bl	800378c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_MS2_Pin, ms2);
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <stepper_init+0x80>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	2390      	movs	r3, #144	; 0x90
 800250e:	05db      	lsls	r3, r3, #23
 8002510:	2140      	movs	r1, #64	; 0x40
 8002512:	0018      	movs	r0, r3
 8002514:	f001 f93a 	bl	800378c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_MS3_Pin, ms3);
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <stepper_init+0x84>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	2390      	movs	r3, #144	; 0x90
 8002520:	05db      	lsls	r3, r3, #23
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0018      	movs	r0, r3
 8002526:	f001 f931 	bl	800378c <HAL_GPIO_WritePin>
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	200001c4 	.word	0x200001c4
 8002538:	200001c8 	.word	0x200001c8
 800253c:	200001cc 	.word	0x200001cc

08002540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if (start_moving) {
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00f      	beq.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x32>
    int_flag = true;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, PIN_STEP_Pin);
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	00da      	lsls	r2, r3, #3
 800255c:	2390      	movs	r3, #144	; 0x90
 800255e:	05db      	lsls	r3, r3, #23
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f001 f92f 	bl	80037c6 <HAL_GPIO_TogglePin>
    i++;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002570:	601a      	str	r2, [r3, #0]
  }
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	200001d5 	.word	0x200001d5
 8002580:	200001d4 	.word	0x200001d4
 8002584:	200001d0 	.word	0x200001d0

08002588 <move_steps>:

void move_steps(unsigned int direction, uint32_t steps) {
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
  HAL_GPIO_WritePin(GPIOA, PIN_STEP_Pin, GPIO_PIN_RESET);
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	00d9      	lsls	r1, r3, #3
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	2200      	movs	r2, #0
 800259c:	0018      	movs	r0, r3
 800259e:	f001 f8f5 	bl	800378c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PIN_DIR_Pin, direction);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	0099      	lsls	r1, r3, #2
 80025aa:	2390      	movs	r3, #144	; 0x90
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	0018      	movs	r0, r3
 80025b0:	f001 f8ec 	bl	800378c <HAL_GPIO_WritePin>

  stp2move = 2*steps;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <move_steps+0x1f0>)
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6019      	str	r1, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
  i        = 0;
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <move_steps+0x1f4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

  acc_t = (ACC_REGION * stp2move);
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <move_steps+0x1f0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0010      	movs	r0, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	f7fd fe60 	bl	800029c <__aeabi_ul2d>
 80025dc:	4a68      	ldr	r2, [pc, #416]	; (8002780 <move_steps+0x1f8>)
 80025de:	4b69      	ldr	r3, [pc, #420]	; (8002784 <move_steps+0x1fc>)
 80025e0:	f7fe fdb0 	bl	8001144 <__aeabi_dmul>
 80025e4:	0002      	movs	r2, r0
 80025e6:	000b      	movs	r3, r1
 80025e8:	4967      	ldr	r1, [pc, #412]	; (8002788 <move_steps+0x200>)
 80025ea:	600a      	str	r2, [r1, #0]
 80025ec:	604b      	str	r3, [r1, #4]
  acc   = ((double)(SPEED_INIT - SPEED_MAX))/acc_t;
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <move_steps+0x200>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2000      	movs	r0, #0
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <move_steps+0x204>)
 80025f8:	f7fe f9a2 	bl	8000940 <__aeabi_ddiv>
 80025fc:	0002      	movs	r2, r0
 80025fe:	000b      	movs	r3, r1
 8002600:	4963      	ldr	r1, [pc, #396]	; (8002790 <move_steps+0x208>)
 8002602:	600a      	str	r2, [r1, #0]
 8002604:	604b      	str	r3, [r1, #4]
 
  while(i < stp2move) {
 8002606:	e09d      	b.n	8002744 <move_steps+0x1bc>
    start_moving = true;
 8002608:	4b62      	ldr	r3, [pc, #392]	; (8002794 <move_steps+0x20c>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]

    if (i < acc_t) {
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <move_steps+0x1f4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff fbca 	bl	8001dac <__aeabi_i2d>
 8002618:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <move_steps+0x200>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f7fd fe15 	bl	800024c <__aeabi_dcmplt>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d02c      	beq.n	8002680 <move_steps+0xf8>
      if (int_flag == true) {
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <move_steps+0x210>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d100      	bne.n	8002632 <move_steps+0xaa>
 8002630:	e088      	b.n	8002744 <move_steps+0x1bc>
        int_flag = false;
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <move_steps+0x210>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim2, lround(real_time_speed));
 8002638:	4b58      	ldr	r3, [pc, #352]	; (800279c <move_steps+0x214>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0010      	movs	r0, r2
 8002640:	0019      	movs	r1, r3
 8002642:	f003 f827 	bl	8005694 <lround>
 8002646:	0002      	movs	r2, r0
 8002648:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <move_steps+0x218>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
 800264e:	4b53      	ldr	r3, [pc, #332]	; (800279c <move_steps+0x214>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0010      	movs	r0, r2
 8002656:	0019      	movs	r1, r3
 8002658:	f003 f81c 	bl	8005694 <lround>
 800265c:	0003      	movs	r3, r0
 800265e:	001a      	movs	r2, r3
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <move_steps+0x218>)
 8002662:	60da      	str	r2, [r3, #12]
        real_time_speed -= acc;
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <move_steps+0x214>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	4b49      	ldr	r3, [pc, #292]	; (8002790 <move_steps+0x208>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f7fe ffd4 	bl	800161c <__aeabi_dsub>
 8002674:	0002      	movs	r2, r0
 8002676:	000b      	movs	r3, r1
 8002678:	4948      	ldr	r1, [pc, #288]	; (800279c <move_steps+0x214>)
 800267a:	600a      	str	r2, [r1, #0]
 800267c:	604b      	str	r3, [r1, #4]
 800267e:	e061      	b.n	8002744 <move_steps+0x1bc>
      }
    }
    else if (i > (stp2move - acc_t)) {
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <move_steps+0x1f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff fb91 	bl	8001dac <__aeabi_i2d>
 800268a:	6038      	str	r0, [r7, #0]
 800268c:	6079      	str	r1, [r7, #4]
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <move_steps+0x1f0>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0010      	movs	r0, r2
 8002696:	0019      	movs	r1, r3
 8002698:	f7fd fe00 	bl	800029c <__aeabi_ul2d>
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <move_steps+0x200>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f7fe ffbb 	bl	800161c <__aeabi_dsub>
 80026a6:	0002      	movs	r2, r0
 80026a8:	000b      	movs	r3, r1
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	f7fd fde1 	bl	8000274 <__aeabi_dcmpgt>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d02b      	beq.n	800270e <move_steps+0x186>
      if (int_flag == true) {
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <move_steps+0x210>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d041      	beq.n	8002744 <move_steps+0x1bc>
        int_flag = false;
 80026c0:	4b35      	ldr	r3, [pc, #212]	; (8002798 <move_steps+0x210>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim2, lround(real_time_speed));
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <move_steps+0x214>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0010      	movs	r0, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	f002 ffe0 	bl	8005694 <lround>
 80026d4:	0002      	movs	r2, r0
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <move_steps+0x218>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <move_steps+0x214>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0010      	movs	r0, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	f002 ffd5 	bl	8005694 <lround>
 80026ea:	0003      	movs	r3, r0
 80026ec:	001a      	movs	r2, r3
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <move_steps+0x218>)
 80026f0:	60da      	str	r2, [r3, #12]
        real_time_speed += acc;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <move_steps+0x214>)
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <move_steps+0x208>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f7fd fde3 	bl	80002c8 <__aeabi_dadd>
 8002702:	0002      	movs	r2, r0
 8002704:	000b      	movs	r3, r1
 8002706:	4925      	ldr	r1, [pc, #148]	; (800279c <move_steps+0x214>)
 8002708:	600a      	str	r2, [r1, #0]
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e01a      	b.n	8002744 <move_steps+0x1bc>
      }
    }
    else {
      real_time_speed = SPEED_MAX;
 800270e:	4923      	ldr	r1, [pc, #140]	; (800279c <move_steps+0x214>)
 8002710:	2200      	movs	r2, #0
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <move_steps+0x21c>)
 8002714:	600a      	str	r2, [r1, #0]
 8002716:	604b      	str	r3, [r1, #4]
      __HAL_TIM_SET_AUTORELOAD(&htim2, lround(real_time_speed));
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <move_steps+0x214>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0010      	movs	r0, r2
 8002720:	0019      	movs	r1, r3
 8002722:	f002 ffb7 	bl	8005694 <lround>
 8002726:	0002      	movs	r2, r0
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <move_steps+0x218>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <move_steps+0x214>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0010      	movs	r0, r2
 8002736:	0019      	movs	r1, r3
 8002738:	f002 ffac 	bl	8005694 <lround>
 800273c:	0003      	movs	r3, r0
 800273e:	001a      	movs	r2, r3
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <move_steps+0x218>)
 8002742:	60da      	str	r2, [r3, #12]
  while(i < stp2move) {
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <move_steps+0x1f4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	001c      	movs	r4, r3
 800274a:	17db      	asrs	r3, r3, #31
 800274c:	001d      	movs	r5, r3
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <move_steps+0x1f0>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	42ab      	cmp	r3, r5
 8002756:	d900      	bls.n	800275a <move_steps+0x1d2>
 8002758:	e756      	b.n	8002608 <move_steps+0x80>
 800275a:	d102      	bne.n	8002762 <move_steps+0x1da>
 800275c:	42a2      	cmp	r2, r4
 800275e:	d900      	bls.n	8002762 <move_steps+0x1da>
 8002760:	e752      	b.n	8002608 <move_steps+0x80>
    }

  }
  start_moving = false;
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <move_steps+0x20c>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  flash_led_once(50);
 8002768:	2032      	movs	r0, #50	; 0x32
 800276a:	f7ff fc9d 	bl	80020a8 <flash_led_once>
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	200001d8 	.word	0x200001d8
 800277c:	200001d0 	.word	0x200001d0
 8002780:	33333333 	.word	0x33333333
 8002784:	3fc33333 	.word	0x3fc33333
 8002788:	200001e8 	.word	0x200001e8
 800278c:	40690000 	.word	0x40690000
 8002790:	200001e0 	.word	0x200001e0
 8002794:	200001d5 	.word	0x200001d5
 8002798:	200001d4 	.word	0x200001d4
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000138 	.word	0x20000138
 80027a4:	40590000 	.word	0x40590000

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_MspInit+0x44>)
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_MspInit+0x44>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_MspInit+0x44>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_MspInit+0x44>)
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_MspInit+0x44>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	61da      	str	r2, [r3, #28]
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_MspInit+0x44>)
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	055b      	lsls	r3, r3, #21
 80027dc:	4013      	ands	r3, r2
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_ADC_MspInit+0x38>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10d      	bne.n	800281e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_ADC_MspInit+0x3c>)
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_ADC_MspInit+0x3c>)
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	0089      	lsls	r1, r1, #2
 800280c:	430a      	orrs	r2, r1
 800280e:	619a      	str	r2, [r3, #24]
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_ADC_MspInit+0x3c>)
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40012400 	.word	0x40012400
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	05db      	lsls	r3, r3, #23
 8002840:	429a      	cmp	r2, r3
 8002842:	d113      	bne.n	800286c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_TIM_Base_MspInit+0x44>)
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_TIM_Base_MspInit+0x44>)
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_TIM_Base_MspInit+0x44>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	200f      	movs	r0, #15
 8002862:	f000 fc61 	bl	8003128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002866:	200f      	movs	r0, #15
 8002868:	f000 fc73 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b08b      	sub	sp, #44	; 0x2c
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	2414      	movs	r4, #20
 8002882:	193b      	adds	r3, r7, r4
 8002884:	0018      	movs	r0, r3
 8002886:	2314      	movs	r3, #20
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f002 fefa 	bl	8005684 <memset>
  if(huart->Instance==USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2f      	ldr	r2, [pc, #188]	; (8002954 <HAL_UART_MspInit+0xdc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d158      	bne.n	800294c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_UART_MspInit+0xe0>)
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <HAL_UART_MspInit+0xe0>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	01c9      	lsls	r1, r1, #7
 80028a4:	430a      	orrs	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_UART_MspInit+0xe0>)
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	01db      	lsls	r3, r3, #7
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_UART_MspInit+0xe0>)
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_UART_MspInit+0xe0>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0289      	lsls	r1, r1, #10
 80028c0:	430a      	orrs	r2, r1
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_UART_MspInit+0xe0>)
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028d2:	0021      	movs	r1, r4
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	220c      	movs	r2, #12
 80028d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2202      	movs	r2, #2
 80028de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2203      	movs	r2, #3
 80028ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2201      	movs	r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	187a      	adds	r2, r7, r1
 80028f4:	2390      	movs	r3, #144	; 0x90
 80028f6:	05db      	lsls	r3, r3, #23
 80028f8:	0011      	movs	r1, r2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fdde 	bl	80034bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_UART_MspInit+0xe8>)
 8002904:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_UART_MspInit+0xe4>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_UART_MspInit+0xe4>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002926:	2220      	movs	r2, #32
 8002928:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_UART_MspInit+0xe4>)
 800292c:	2200      	movs	r2, #0
 800292e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002932:	0018      	movs	r0, r3
 8002934:	f000 fc2a 	bl	800318c <HAL_DMA_Init>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800293c:	f7ff fdb6 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a06      	ldr	r2, [pc, #24]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002944:	675a      	str	r2, [r3, #116]	; 0x74
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_UART_MspInit+0xe4>)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b00b      	add	sp, #44	; 0x2c
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	40013800 	.word	0x40013800
 8002958:	40021000 	.word	0x40021000
 800295c:	20000180 	.word	0x20000180
 8002960:	40020030 	.word	0x40020030

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002988:	f000 f894 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  // flash_led_once(10);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <DMA1_Channel2_3_IRQHandler+0x14>)
 800299a:	0018      	movs	r0, r3
 800299c:	f000 fca4 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	20000180 	.word	0x20000180

080029ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <TIM2_IRQHandler+0x14>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 fcea 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	20000138 	.word	0x20000138

080029c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d4:	f7ff fff6 	bl	80029c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80029da:	490d      	ldr	r1, [pc, #52]	; (8002a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <LoopForever+0xe>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e0:	e002      	b.n	80029e8 <LoopCopyDataInit>

080029e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e6:	3304      	adds	r3, #4

080029e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029ec:	d3f9      	bcc.n	80029e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f0:	4c0a      	ldr	r4, [pc, #40]	; (8002a1c <LoopForever+0x16>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f4:	e001      	b.n	80029fa <LoopFillZerobss>

080029f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f8:	3204      	adds	r2, #4

080029fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029fc:	d3fb      	bcc.n	80029f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029fe:	f002 fe1d 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a02:	f7ff fb6b 	bl	80020dc <main>

08002a06 <LoopForever>:

LoopForever:
    b LoopForever
 8002a06:	e7fe      	b.n	8002a06 <LoopForever>
  ldr   r0, =_estack
 8002a08:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002a14:	08005804 	.word	0x08005804
  ldr r2, =_sbss
 8002a18:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a1c:	200001f4 	.word	0x200001f4

08002a20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a20:	e7fe      	b.n	8002a20 <ADC1_IRQHandler>
	...

08002a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_Init+0x24>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_Init+0x24>)
 8002a2e:	2110      	movs	r1, #16
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a34:	2003      	movs	r0, #3
 8002a36:	f000 f809 	bl	8002a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a3a:	f7ff feb5 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40022000 	.word	0x40022000

08002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_InitTick+0x5c>)
 8002a56:	681c      	ldr	r4, [r3, #0]
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_InitTick+0x60>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	23fa      	movs	r3, #250	; 0xfa
 8002a60:	0098      	lsls	r0, r3, #2
 8002a62:	f7fd fb51 	bl	8000108 <__udivsi3>
 8002a66:	0003      	movs	r3, r0
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0020      	movs	r0, r4
 8002a6c:	f7fd fb4c 	bl	8000108 <__udivsi3>
 8002a70:	0003      	movs	r3, r0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fb7d 	bl	8003172 <HAL_SYSTICK_Config>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e00f      	b.n	8002aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d80b      	bhi.n	8002a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fb4a 	bl	8003128 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_InitTick+0x64>)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	2000000c 	.word	0x2000000c

08002ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_IncTick+0x1c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	001a      	movs	r2, r3
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	18d2      	adds	r2, r2, r3
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac6:	601a      	str	r2, [r3, #0]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	200001f0 	.word	0x200001f0

08002ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_GetTick+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	200001f0 	.word	0x200001f0

08002aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_Delay+0x44>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	f7ff ffe0 	bl	8002ad8 <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8f7      	bhi.n	8002b14 <HAL_Delay+0x28>
  {
  }
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	20000010 	.word	0x20000010

08002b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e125      	b.n	8002d9e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2234      	movs	r2, #52	; 0x34
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff fe40 	bl	80027f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2210      	movs	r2, #16
 8002b76:	4013      	ands	r3, r2
 8002b78:	d000      	beq.n	8002b7c <HAL_ADC_Init+0x48>
 8002b7a:	e103      	b.n	8002d84 <HAL_ADC_Init+0x250>
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d000      	beq.n	8002b88 <HAL_ADC_Init+0x54>
 8002b86:	e0fd      	b.n	8002d84 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b92:	d000      	beq.n	8002b96 <HAL_ADC_Init+0x62>
 8002b94:	e0f6      	b.n	8002d84 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	4a83      	ldr	r2, [pc, #524]	; (8002da8 <HAL_ADC_Init+0x274>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d112      	bne.n	8002bda <HAL_ADC_Init+0xa6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d009      	beq.n	8002bd6 <HAL_ADC_Init+0xa2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Init+0xa6>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_ADC_Init+0xa8>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2218      	movs	r2, #24
 8002be8:	4393      	bics	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	0899      	lsrs	r1, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4964      	ldr	r1, [pc, #400]	; (8002dac <HAL_ADC_Init+0x278>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7e1b      	ldrb	r3, [r3, #24]
 8002c22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e5b      	ldrb	r3, [r3, #25]
 8002c28:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e9b      	ldrb	r3, [r3, #26]
 8002c30:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c32:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_Init+0x10e>
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	015b      	lsls	r3, r3, #5
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_Init+0x110>
 8002c42:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c4a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_Init+0x124>
 8002c54:	2304      	movs	r3, #4
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_Init+0x126>
 8002c58:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2124      	movs	r1, #36	; 0x24
 8002c60:	5c5b      	ldrb	r3, [r3, r1]
 8002c62:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7edb      	ldrb	r3, [r3, #27]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d115      	bne.n	8002ca0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e9b      	ldrb	r3, [r3, #26]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	0252      	lsls	r2, r2, #9
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	e00b      	b.n	8002ca0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	23c2      	movs	r3, #194	; 0xc2
 8002ca6:	33ff      	adds	r3, #255	; 0xff
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d007      	beq.n	8002cbc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68d9      	ldr	r1, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	055b      	lsls	r3, r3, #21
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d01b      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d017      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d013      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d00f      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d00b      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d007      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d003      	beq.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d112      	bne.n	8002d36 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6959      	ldr	r1, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_ADC_Init+0x27c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	2203      	movs	r2, #3
 8002d52:	4393      	bics	r3, r2
 8002d54:	2201      	movs	r2, #1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d5c:	e01c      	b.n	8002d98 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	2212      	movs	r2, #18
 8002d64:	4393      	bics	r3, r2
 8002d66:	2210      	movs	r2, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	2201      	movs	r2, #1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d82:	e009      	b.n	8002d98 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	2210      	movs	r2, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d90:	230f      	movs	r3, #15
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	fffffefd 	.word	0xfffffefd
 8002dac:	fffe0219 	.word	0xfffe0219
 8002db0:	833fffe7 	.word	0x833fffe7

08002db4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	055b      	lsls	r3, r3, #21
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d011      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d00d      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d005      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d001      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2234      	movs	r2, #52	; 0x34
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x54>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0d0      	b.n	8002faa <HAL_ADC_ConfigChannel+0x1f6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2234      	movs	r2, #52	; 0x34
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2204      	movs	r2, #4
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d000      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x6a>
 8002e1c:	e0b4      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a64      	ldr	r2, [pc, #400]	; (8002fb4 <HAL_ADC_ConfigChannel+0x200>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d100      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x76>
 8002e28:	e082      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	409a      	lsls	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	055b      	lsls	r3, r3, #21
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d037      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d033      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d02f      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d02b      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d027      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d023      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d01f      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d01b      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2107      	movs	r1, #7
 8002e90:	400b      	ands	r3, r1
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d012      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2107      	movs	r1, #7
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6959      	ldr	r1, [r3, #20]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d007      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x120>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d003      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x120>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b12      	cmp	r3, #18
 8002ed2:	d163      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_ADC_ConfigChannel+0x204>)
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d009      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0x140>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b11      	cmp	r3, #17
 8002ee6:	d102      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x13a>
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	03db      	lsls	r3, r3, #15
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x144>
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	045b      	lsls	r3, r3, #17
 8002ef2:	e001      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x144>
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_ADC_ConfigChannel+0x204>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d14a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f06:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_ADC_ConfigChannel+0x208>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	492d      	ldr	r1, [pc, #180]	; (8002fc0 <HAL_ADC_ConfigChannel+0x20c>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f7fd f8fb 	bl	8000108 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	0013      	movs	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f9      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x16e>
 8002f2e:	e035      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4099      	lsls	r1, r3
 8002f3e:	000b      	movs	r3, r1
 8002f40:	43d9      	mvns	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	400a      	ands	r2, r1
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d007      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x1ae>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b11      	cmp	r3, #17
 8002f58:	d003      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x1ae>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d11c      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_ADC_ConfigChannel+0x204>)
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d007      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x1ca>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b11      	cmp	r3, #17
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x1c6>
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_ADC_ConfigChannel+0x210>)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1cc>
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_ADC_ConfigChannel+0x214>)
 8002f7c:	e000      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1cc>
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_ADC_ConfigChannel+0x218>)
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_ADC_ConfigChannel+0x204>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e009      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2234      	movs	r2, #52	; 0x34
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	00001001 	.word	0x00001001
 8002fb8:	40012708 	.word	0x40012708
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	000f4240 	.word	0x000f4240
 8002fc4:	ffbfffff 	.word	0xffbfffff
 8002fc8:	feffffff 	.word	0xfeffffff
 8002fcc:	ff7fffff 	.word	0xff7fffff

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	1dfb      	adds	r3, r7, #7
 8002fda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe2:	d809      	bhi.n	8002ff8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	001a      	movs	r2, r3
 8002fea:	231f      	movs	r3, #31
 8002fec:	401a      	ands	r2, r3
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <__NVIC_EnableIRQ+0x30>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4091      	lsls	r1, r2
 8002ff4:	000a      	movs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
  }
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b7f      	cmp	r3, #127	; 0x7f
 8003018:	d828      	bhi.n	800306c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800301a:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <__NVIC_SetPriority+0xd4>)
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b25b      	sxtb	r3, r3
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	33c0      	adds	r3, #192	; 0xc0
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	589b      	ldr	r3, [r3, r2]
 800302a:	1dfa      	adds	r2, r7, #7
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	0011      	movs	r1, r2
 8003030:	2203      	movs	r2, #3
 8003032:	400a      	ands	r2, r1
 8003034:	00d2      	lsls	r2, r2, #3
 8003036:	21ff      	movs	r1, #255	; 0xff
 8003038:	4091      	lsls	r1, r2
 800303a:	000a      	movs	r2, r1
 800303c:	43d2      	mvns	r2, r2
 800303e:	401a      	ands	r2, r3
 8003040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	22ff      	movs	r2, #255	; 0xff
 8003048:	401a      	ands	r2, r3
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	0018      	movs	r0, r3
 8003050:	2303      	movs	r3, #3
 8003052:	4003      	ands	r3, r0
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003058:	481f      	ldr	r0, [pc, #124]	; (80030d8 <__NVIC_SetPriority+0xd4>)
 800305a:	1dfb      	adds	r3, r7, #7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25b      	sxtb	r3, r3
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	430a      	orrs	r2, r1
 8003064:	33c0      	adds	r3, #192	; 0xc0
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800306a:	e031      	b.n	80030d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <__NVIC_SetPriority+0xd8>)
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	0019      	movs	r1, r3
 8003074:	230f      	movs	r3, #15
 8003076:	400b      	ands	r3, r1
 8003078:	3b08      	subs	r3, #8
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3306      	adds	r3, #6
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	3304      	adds	r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1dfa      	adds	r2, r7, #7
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	0011      	movs	r1, r2
 800308c:	2203      	movs	r2, #3
 800308e:	400a      	ands	r2, r1
 8003090:	00d2      	lsls	r2, r2, #3
 8003092:	21ff      	movs	r1, #255	; 0xff
 8003094:	4091      	lsls	r1, r2
 8003096:	000a      	movs	r2, r1
 8003098:	43d2      	mvns	r2, r2
 800309a:	401a      	ands	r2, r3
 800309c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	22ff      	movs	r2, #255	; 0xff
 80030a4:	401a      	ands	r2, r3
 80030a6:	1dfb      	adds	r3, r7, #7
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	0018      	movs	r0, r3
 80030ac:	2303      	movs	r3, #3
 80030ae:	4003      	ands	r3, r0
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030b4:	4809      	ldr	r0, [pc, #36]	; (80030dc <__NVIC_SetPriority+0xd8>)
 80030b6:	1dfb      	adds	r3, r7, #7
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	001c      	movs	r4, r3
 80030bc:	230f      	movs	r3, #15
 80030be:	4023      	ands	r3, r4
 80030c0:	3b08      	subs	r3, #8
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	430a      	orrs	r2, r1
 80030c6:	3306      	adds	r3, #6
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	18c3      	adds	r3, r0, r3
 80030cc:	3304      	adds	r3, #4
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b003      	add	sp, #12
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1e5a      	subs	r2, r3, #1
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	045b      	lsls	r3, r3, #17
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d301      	bcc.n	80030f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f4:	2301      	movs	r3, #1
 80030f6:	e010      	b.n	800311a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <SysTick_Config+0x44>)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	3a01      	subs	r2, #1
 80030fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003100:	2301      	movs	r3, #1
 8003102:	425b      	negs	r3, r3
 8003104:	2103      	movs	r1, #3
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff ff7c 	bl	8003004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SysTick_Config+0x44>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <SysTick_Config+0x44>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	210f      	movs	r1, #15
 8003134:	187b      	adds	r3, r7, r1
 8003136:	1c02      	adds	r2, r0, #0
 8003138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	187b      	adds	r3, r7, r1
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b25b      	sxtb	r3, r3
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff ff5d 	bl	8003004 <__NVIC_SetPriority>
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	0002      	movs	r2, r0
 800315a:	1dfb      	adds	r3, r7, #7
 800315c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315e:	1dfb      	adds	r3, r7, #7
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b25b      	sxtb	r3, r3
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff ff33 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff ffaf 	bl	80030e0 <SysTick_Config>
 8003182:	0003      	movs	r3, r0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e036      	b.n	8003210 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2221      	movs	r2, #33	; 0x21
 80031a6:	2102      	movs	r1, #2
 80031a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_DMA_Init+0x8c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 f946 	bl	8003484 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2221      	movs	r2, #33	; 0x21
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b004      	add	sp, #16
 8003216:	bd80      	pop	{r7, pc}
 8003218:	ffffc00f 	.word	0xffffc00f

0800321c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2317      	movs	r3, #23
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_DMA_Start_IT+0x24>
 800323c:	2302      	movs	r3, #2
 800323e:	e04f      	b.n	80032e0 <HAL_DMA_Start_IT+0xc4>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2221      	movs	r2, #33	; 0x21
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d13a      	bne.n	80032ca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	2102      	movs	r1, #2
 800325a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	438a      	bics	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8d7 	bl	800342c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	210e      	movs	r1, #14
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e00f      	b.n	80032b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	210a      	movs	r1, #10
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2104      	movs	r1, #4
 80032b4:	438a      	bics	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032d2:	2317      	movs	r3, #23
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80032da:	2317      	movs	r3, #23
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	781b      	ldrb	r3, [r3, #0]
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b006      	add	sp, #24
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2204      	movs	r2, #4
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	d024      	beq.n	800335a <HAL_DMA_IRQHandler+0x72>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2204      	movs	r2, #4
 8003314:	4013      	ands	r3, r2
 8003316:	d020      	beq.n	800335a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	4013      	ands	r3, r2
 8003322:	d107      	bne.n	8003334 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2104      	movs	r1, #4
 8003330:	438a      	bics	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	2104      	movs	r1, #4
 800333e:	4091      	lsls	r1, r2
 8003340:	000a      	movs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d100      	bne.n	800334e <HAL_DMA_IRQHandler+0x66>
 800334c:	e06a      	b.n	8003424 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	0010      	movs	r0, r2
 8003356:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003358:	e064      	b.n	8003424 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2202      	movs	r2, #2
 8003360:	409a      	lsls	r2, r3
 8003362:	0013      	movs	r3, r2
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xda>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2202      	movs	r2, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d10b      	bne.n	8003396 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	210a      	movs	r1, #10
 800338a:	438a      	bics	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2221      	movs	r2, #33	; 0x21
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2102      	movs	r1, #2
 80033a0:	4091      	lsls	r1, r2
 80033a2:	000a      	movs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d036      	beq.n	8003424 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	0010      	movs	r0, r2
 80033be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033c0:	e030      	b.n	8003424 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2208      	movs	r2, #8
 80033c8:	409a      	lsls	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	d028      	beq.n	8003424 <HAL_DMA_IRQHandler+0x13c>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2208      	movs	r2, #8
 80033d6:	4013      	ands	r3, r2
 80033d8:	d024      	beq.n	8003424 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	210e      	movs	r1, #14
 80033e6:	438a      	bics	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2101      	movs	r1, #1
 80033f4:	4091      	lsls	r1, r2
 80033f6:	000a      	movs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2221      	movs	r2, #33	; 0x21
 8003404:	2101      	movs	r1, #1
 8003406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	0010      	movs	r0, r2
 8003420:	4798      	blx	r3
    }
  }
}
 8003422:	e7ff      	b.n	8003424 <HAL_DMA_IRQHandler+0x13c>
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}

0800342c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2101      	movs	r1, #1
 8003444:	4091      	lsls	r1, r2
 8003446:	000a      	movs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b10      	cmp	r3, #16
 8003458:	d108      	bne.n	800346c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800346a:	e007      	b.n	800347c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}

08003484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <DMA_CalcBaseAndBitshift+0x30>)
 8003492:	4694      	mov	ip, r2
 8003494:	4463      	add	r3, ip
 8003496:	2114      	movs	r1, #20
 8003498:	0018      	movs	r0, r3
 800349a:	f7fc fe35 	bl	8000108 <__udivsi3>
 800349e:	0003      	movs	r3, r0
 80034a0:	009a      	lsls	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <DMA_CalcBaseAndBitshift+0x34>)
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	bffdfff8 	.word	0xbffdfff8
 80034b8:	40020000 	.word	0x40020000

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e149      	b.n	8003760 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4091      	lsls	r1, r2
 80034d6:	000a      	movs	r2, r1
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <HAL_GPIO_Init+0x28>
 80034e2:	e13a      	b.n	800375a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d130      	bne.n	800355e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	409a      	lsls	r2, r3
 800350a:	0013      	movs	r3, r2
 800350c:	43da      	mvns	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	409a      	lsls	r2, r3
 800351e:	0013      	movs	r3, r2
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003532:	2201      	movs	r2, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	43da      	mvns	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	2201      	movs	r2, #1
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	4013      	ands	r3, r2
 8003566:	2b03      	cmp	r3, #3
 8003568:	d017      	beq.n	800359a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	409a      	lsls	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	43da      	mvns	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d123      	bne.n	80035ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	58d3      	ldr	r3, [r2, r3]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2207      	movs	r2, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2107      	movs	r1, #7
 80035d2:	400b      	ands	r3, r1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	6939      	ldr	r1, [r7, #16]
 80035ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	43da      	mvns	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2203      	movs	r2, #3
 800360c:	401a      	ands	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	0013      	movs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	23c0      	movs	r3, #192	; 0xc0
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_GPIO_Init+0x174>
 800362e:	e094      	b.n	800375a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003630:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	4b4e      	ldr	r3, [pc, #312]	; (8003778 <HAL_GPIO_Init+0x2bc>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_GPIO_Init+0x2c0>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	589b      	ldr	r3, [r3, r2]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2203      	movs	r2, #3
 800365a:	4013      	ands	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	220f      	movs	r2, #15
 8003660:	409a      	lsls	r2, r3
 8003662:	0013      	movs	r3, r2
 8003664:	43da      	mvns	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	2390      	movs	r3, #144	; 0x90
 8003670:	05db      	lsls	r3, r3, #23
 8003672:	429a      	cmp	r2, r3
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x1d6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a41      	ldr	r2, [pc, #260]	; (8003780 <HAL_GPIO_Init+0x2c4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x1d2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a40      	ldr	r2, [pc, #256]	; (8003784 <HAL_GPIO_Init+0x2c8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x1ce>
 8003686:	2302      	movs	r3, #2
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 800368a:	2305      	movs	r3, #5
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x1d8>
 8003692:	2300      	movs	r3, #0
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	2103      	movs	r1, #3
 8003698:	400a      	ands	r2, r1
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	; (800377c <HAL_GPIO_Init+0x2c0>)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	035b      	lsls	r3, r3, #13
 80036ca:	4013      	ands	r3, r2
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	039b      	lsls	r3, r3, #14
 80036f4:	4013      	ands	r3, r2
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	4013      	ands	r3, r2
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	025b      	lsls	r3, r3, #9
 8003748:	4013      	ands	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_GPIO_Init+0x2cc>)
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	40da      	lsrs	r2, r3
 8003768:	1e13      	subs	r3, r2, #0
 800376a:	d000      	beq.n	800376e <HAL_GPIO_Init+0x2b2>
 800376c:	e6ae      	b.n	80034cc <HAL_GPIO_Init+0x10>
  } 
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	0008      	movs	r0, r1
 8003796:	0011      	movs	r1, r2
 8003798:	1cbb      	adds	r3, r7, #2
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	1c7b      	adds	r3, r7, #1
 80037a0:	1c0a      	adds	r2, r1, #0
 80037a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a4:	1c7b      	adds	r3, r7, #1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	1cbb      	adds	r3, r7, #2
 80037b8:	881a      	ldrh	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	000a      	movs	r2, r1
 80037d0:	1cbb      	adds	r3, r7, #2
 80037d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037da:	1cbb      	adds	r3, r7, #2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4013      	ands	r3, r2
 80037e2:	041a      	lsls	r2, r3, #16
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	1cb9      	adds	r1, r7, #2
 80037ea:	8809      	ldrh	r1, [r1, #0]
 80037ec:	400b      	ands	r3, r1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e301      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d100      	bne.n	800381a <HAL_RCC_OscConfig+0x1e>
 8003818:	e08d      	b.n	8003936 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800381a:	4bc3      	ldr	r3, [pc, #780]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	220c      	movs	r2, #12
 8003820:	4013      	ands	r3, r2
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00e      	beq.n	8003844 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003826:	4bc0      	ldr	r3, [pc, #768]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	220c      	movs	r2, #12
 800382c:	4013      	ands	r3, r2
 800382e:	2b08      	cmp	r3, #8
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x64>
 8003832:	4bbd      	ldr	r3, [pc, #756]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	025b      	lsls	r3, r3, #9
 800383a:	401a      	ands	r2, r3
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	025b      	lsls	r3, r3, #9
 8003840:	429a      	cmp	r2, r3
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4bb8      	ldr	r3, [pc, #736]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	4013      	ands	r3, r2
 800384e:	d100      	bne.n	8003852 <HAL_RCC_OscConfig+0x56>
 8003850:	e070      	b.n	8003934 <HAL_RCC_OscConfig+0x138>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d000      	beq.n	800385c <HAL_RCC_OscConfig+0x60>
 800385a:	e06b      	b.n	8003934 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e2d8      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_RCC_OscConfig+0x7c>
 8003868:	4baf      	ldr	r3, [pc, #700]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4bae      	ldr	r3, [pc, #696]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	0249      	lsls	r1, r1, #9
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e02f      	b.n	80038d8 <HAL_RCC_OscConfig+0xdc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10c      	bne.n	800389a <HAL_RCC_OscConfig+0x9e>
 8003880:	4ba9      	ldr	r3, [pc, #676]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4ba8      	ldr	r3, [pc, #672]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003886:	49a9      	ldr	r1, [pc, #676]	; (8003b2c <HAL_RCC_OscConfig+0x330>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4ba6      	ldr	r3, [pc, #664]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4ba5      	ldr	r3, [pc, #660]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003892:	49a7      	ldr	r1, [pc, #668]	; (8003b30 <HAL_RCC_OscConfig+0x334>)
 8003894:	400a      	ands	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e01e      	b.n	80038d8 <HAL_RCC_OscConfig+0xdc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d10e      	bne.n	80038c0 <HAL_RCC_OscConfig+0xc4>
 80038a2:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4ba0      	ldr	r3, [pc, #640]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	02c9      	lsls	r1, r1, #11
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	4b9d      	ldr	r3, [pc, #628]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b9c      	ldr	r3, [pc, #624]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	0249      	lsls	r1, r1, #9
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xdc>
 80038c0:	4b99      	ldr	r3, [pc, #612]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b98      	ldr	r3, [pc, #608]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038c6:	4999      	ldr	r1, [pc, #612]	; (8003b2c <HAL_RCC_OscConfig+0x330>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	4b96      	ldr	r3, [pc, #600]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b95      	ldr	r3, [pc, #596]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038d2:	4997      	ldr	r1, [pc, #604]	; (8003b30 <HAL_RCC_OscConfig+0x334>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d014      	beq.n	800390a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7ff f8fa 	bl	8002ad8 <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ea:	f7ff f8f5 	bl	8002ad8 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e28a      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fc:	4b8a      	ldr	r3, [pc, #552]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	029b      	lsls	r3, r3, #10
 8003904:	4013      	ands	r3, r2
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0xee>
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7ff f8e5 	bl	8002ad8 <HAL_GetTick>
 800390e:	0003      	movs	r3, r0
 8003910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff f8e0 	bl	8002ad8 <HAL_GetTick>
 8003918:	0002      	movs	r2, r0
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e275      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	029b      	lsls	r3, r3, #10
 800392e:	4013      	ands	r3, r2
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x118>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d100      	bne.n	8003942 <HAL_RCC_OscConfig+0x146>
 8003940:	e069      	b.n	8003a16 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003942:	4b79      	ldr	r3, [pc, #484]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	220c      	movs	r2, #12
 8003948:	4013      	ands	r3, r2
 800394a:	d00b      	beq.n	8003964 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800394c:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	220c      	movs	r2, #12
 8003952:	4013      	ands	r3, r2
 8003954:	2b08      	cmp	r3, #8
 8003956:	d11c      	bne.n	8003992 <HAL_RCC_OscConfig+0x196>
 8003958:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	4013      	ands	r3, r2
 8003962:	d116      	bne.n	8003992 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003964:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x17e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e24b      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	22f8      	movs	r2, #248	; 0xf8
 8003980:	4393      	bics	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	00da      	lsls	r2, r3, #3
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003990:	e041      	b.n	8003a16 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d024      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7ff f897 	bl	8002ad8 <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7ff f892 	bl	8002ad8 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e227      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f1      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	22f8      	movs	r2, #248	; 0xf8
 80039d2:	4393      	bics	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00da      	lsls	r2, r3, #3
 80039dc:	4b52      	ldr	r3, [pc, #328]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	2101      	movs	r1, #1
 80039ec:	438a      	bics	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff f872 	bl	8002ad8 <HAL_GetTick>
 80039f4:	0003      	movs	r3, r0
 80039f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fa:	f7ff f86d 	bl	8002ad8 <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e202      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2202      	movs	r2, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d1f1      	bne.n	80039fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d019      	beq.n	8003a5c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7ff f850 	bl	8002ad8 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7ff f84b 	bl	8002ad8 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1e0      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2202      	movs	r2, #2
 8003a56:	4013      	ands	r3, r2
 8003a58:	d0f1      	beq.n	8003a3e <HAL_RCC_OscConfig+0x242>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a62:	2101      	movs	r1, #1
 8003a64:	438a      	bics	r2, r1
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7ff f836 	bl	8002ad8 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a72:	f7ff f831 	bl	8002ad8 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1c6      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2202      	movs	r2, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d1f1      	bne.n	8003a72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	4013      	ands	r3, r2
 8003a96:	d100      	bne.n	8003a9a <HAL_RCC_OscConfig+0x29e>
 8003a98:	e0b4      	b.n	8003c04 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	201f      	movs	r0, #31
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	055b      	lsls	r3, r3, #21
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d110      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0549      	lsls	r1, r1, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	61da      	str	r2, [r3, #28]
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d11a      	bne.n	8003b12 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0049      	lsls	r1, r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fff5 	bl	8002ad8 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fe fff0 	bl	8002ad8 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e185      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10e      	bne.n	8003b38 <HAL_RCC_OscConfig+0x33c>
 8003b1a:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	4b02      	ldr	r3, [pc, #8]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	430a      	orrs	r2, r1
 8003b24:	621a      	str	r2, [r3, #32]
 8003b26:	e035      	b.n	8003b94 <HAL_RCC_OscConfig+0x398>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	fffeffff 	.word	0xfffeffff
 8003b30:	fffbffff 	.word	0xfffbffff
 8003b34:	40007000 	.word	0x40007000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <HAL_RCC_OscConfig+0x35e>
 8003b40:	4bb6      	ldr	r3, [pc, #728]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	4bb5      	ldr	r3, [pc, #724]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b46:	2101      	movs	r1, #1
 8003b48:	438a      	bics	r2, r1
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	4bb3      	ldr	r3, [pc, #716]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b4e:	6a1a      	ldr	r2, [r3, #32]
 8003b50:	4bb2      	ldr	r3, [pc, #712]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b52:	2104      	movs	r1, #4
 8003b54:	438a      	bics	r2, r1
 8003b56:	621a      	str	r2, [r3, #32]
 8003b58:	e01c      	b.n	8003b94 <HAL_RCC_OscConfig+0x398>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x380>
 8003b62:	4bae      	ldr	r3, [pc, #696]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	4bad      	ldr	r3, [pc, #692]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b68:	2104      	movs	r1, #4
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	621a      	str	r2, [r3, #32]
 8003b6e:	4bab      	ldr	r3, [pc, #684]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	4baa      	ldr	r3, [pc, #680]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	621a      	str	r2, [r3, #32]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0x398>
 8003b7c:	4ba7      	ldr	r3, [pc, #668]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	4ba6      	ldr	r3, [pc, #664]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	621a      	str	r2, [r3, #32]
 8003b88:	4ba4      	ldr	r3, [pc, #656]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b8a:	6a1a      	ldr	r2, [r3, #32]
 8003b8c:	4ba3      	ldr	r3, [pc, #652]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003b8e:	2104      	movs	r1, #4
 8003b90:	438a      	bics	r2, r1
 8003b92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d014      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe ff9c 	bl	8002ad8 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe ff97 	bl	8002ad8 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a9b      	ldr	r2, [pc, #620]	; (8003e20 <HAL_RCC_OscConfig+0x624>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e12b      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	4b98      	ldr	r3, [pc, #608]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3aa>
 8003bc4:	e013      	b.n	8003bee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe ff87 	bl	8002ad8 <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	e009      	b.n	8003be4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff82 	bl	8002ad8 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	4a91      	ldr	r2, [pc, #580]	; (8003e20 <HAL_RCC_OscConfig+0x624>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e116      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	4b8d      	ldr	r3, [pc, #564]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2202      	movs	r2, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bee:	231f      	movs	r3, #31
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	4b87      	ldr	r3, [pc, #540]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003bfe:	4989      	ldr	r1, [pc, #548]	; (8003e24 <HAL_RCC_OscConfig+0x628>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d063      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d12a      	bne.n	8003c6c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c16:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	4b80      	ldr	r3, [pc, #512]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c22:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c26:	4b7d      	ldr	r3, [pc, #500]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c28:	2101      	movs	r1, #1
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe ff53 	bl	8002ad8 <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c38:	f7fe ff4e 	bl	8002ad8 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0e3      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c4a:	4b74      	ldr	r3, [pc, #464]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	2202      	movs	r2, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d0f1      	beq.n	8003c38 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c54:	4b71      	ldr	r3, [pc, #452]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	22f8      	movs	r2, #248	; 0xf8
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	00da      	lsls	r2, r3, #3
 8003c64:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6a:	e034      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	3305      	adds	r3, #5
 8003c72:	d111      	bne.n	8003c98 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c74:	4b69      	ldr	r3, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	22f8      	movs	r2, #248	; 0xf8
 8003c86:	4393      	bics	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c92:	430a      	orrs	r2, r1
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
 8003c96:	e01e      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c98:	4b60      	ldr	r3, [pc, #384]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9c:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fe ff12 	bl	8002ad8 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cba:	f7fe ff0d 	bl	8002ad8 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0a2      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f1      	bne.n	8003cba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d100      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4e4>
 8003cde:	e097      	b.n	8003e10 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce0:	4b4e      	ldr	r3, [pc, #312]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	220c      	movs	r2, #12
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d100      	bne.n	8003cee <HAL_RCC_OscConfig+0x4f2>
 8003cec:	e06b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d14c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b48      	ldr	r3, [pc, #288]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003cfc:	494a      	ldr	r1, [pc, #296]	; (8003e28 <HAL_RCC_OscConfig+0x62c>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe fee9 	bl	8002ad8 <HAL_GetTick>
 8003d06:	0003      	movs	r3, r0
 8003d08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe fee4 	bl	8002ad8 <HAL_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e079      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	049b      	lsls	r3, r3, #18
 8003d26:	4013      	ands	r3, r2
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2a:	4b3c      	ldr	r3, [pc, #240]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	220f      	movs	r2, #15
 8003d30:	4393      	bics	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x630>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	431a      	orrs	r2, r3
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d5e:	2180      	movs	r1, #128	; 0x80
 8003d60:	0449      	lsls	r1, r1, #17
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe feb7 	bl	8002ad8 <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe feb2 	bl	8002ad8 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e047      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	049b      	lsls	r3, r3, #18
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x574>
 8003d8e:	e03f      	b.n	8003e10 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d96:	4924      	ldr	r1, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x62c>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fe9c 	bl	8002ad8 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fe97 	bl	8002ad8 <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e02c      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	049b      	lsls	r3, r3, #18
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x5aa>
 8003dc4:	e024      	b.n	8003e10 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01f      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d10e      	bne.n	8003e0c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	220f      	movs	r2, #15
 8003df2:	401a      	ands	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	23f0      	movs	r3, #240	; 0xf0
 8003e00:	039b      	lsls	r3, r3, #14
 8003e02:	401a      	ands	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b008      	add	sp, #32
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	00001388 	.word	0x00001388
 8003e24:	efffffff 	.word	0xefffffff
 8003e28:	feffffff 	.word	0xfeffffff
 8003e2c:	ffc2ffff 	.word	0xffc2ffff

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0b3      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b5b      	ldr	r3, [pc, #364]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d911      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4393      	bics	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e09a      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2204      	movs	r2, #4
 8003e86:	4013      	ands	r3, r2
 8003e88:	d006      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003e90:	21e0      	movs	r1, #224	; 0xe0
 8003e92:	00c9      	lsls	r1, r1, #3
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	22f0      	movs	r2, #240	; 0xf0
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	4b44      	ldr	r3, [pc, #272]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d040      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d114      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06e      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	049b      	lsls	r3, r3, #18
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e062      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e05b      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2203      	movs	r2, #3
 8003efa:	4393      	bics	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f08:	f7fe fde6 	bl	8002ad8 <HAL_GetTick>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f10:	e009      	b.n	8003f26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f12:	f7fe fde1 	bl	8002ad8 <HAL_GetTick>
 8003f16:	0002      	movs	r2, r0
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_RCC_ClockConfig+0x18c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e042      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	220c      	movs	r2, #12
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1ec      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4013      	ands	r3, r2
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d211      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4393      	bics	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_RCC_ClockConfig+0x184>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4013      	ands	r3, r2
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e020      	b.n	8003fac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	4013      	ands	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <HAL_RCC_ClockConfig+0x190>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f88:	f000 f820 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8c:	0001      	movs	r1, r0
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x188>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	220f      	movs	r2, #15
 8003f96:	4013      	ands	r3, r2
 8003f98:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x194>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	40da      	lsrs	r2, r3
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x198>)
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f7fe fd51 	bl	8002a4c <HAL_InitTick>
  
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	00001388 	.word	0x00001388
 8003fc0:	fffff8ff 	.word	0xfffff8ff
 8003fc4:	080057c4 	.word	0x080057c4
 8003fc8:	20000008 	.word	0x20000008

08003fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	220c      	movs	r2, #12
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x30>
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x36>
 8003ffa:	e02c      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ffe:	613b      	str	r3, [r7, #16]
      break;
 8004000:	e02c      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	0c9b      	lsrs	r3, r3, #18
 8004006:	220f      	movs	r2, #15
 8004008:	4013      	ands	r3, r2
 800400a:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_RCC_GetSysClockFreq+0xa4>)
 800400c:	5cd3      	ldrb	r3, [r2, r3]
 800400e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004010:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	220f      	movs	r2, #15
 8004016:	4013      	ands	r3, r2
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <HAL_RCC_GetSysClockFreq+0xa8>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	025b      	lsls	r3, r3, #9
 8004024:	4013      	ands	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4810      	ldr	r0, [pc, #64]	; (800406c <HAL_RCC_GetSysClockFreq+0xa0>)
 800402c:	f7fc f86c 	bl	8000108 <__udivsi3>
 8004030:	0003      	movs	r3, r0
 8004032:	001a      	movs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4353      	muls	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e009      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	000a      	movs	r2, r1
 8004040:	0152      	lsls	r2, r2, #5
 8004042:	1a52      	subs	r2, r2, r1
 8004044:	0193      	lsls	r3, r2, #6
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	185b      	adds	r3, r3, r1
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
      break;
 8004054:	e002      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004058:	613b      	str	r3, [r7, #16]
      break;
 800405a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800405c:	693b      	ldr	r3, [r7, #16]
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b006      	add	sp, #24
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	40021000 	.word	0x40021000
 800406c:	007a1200 	.word	0x007a1200
 8004070:	080057dc 	.word	0x080057dc
 8004074:	080057ec 	.word	0x080057ec

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <HAL_RCC_GetHCLKFreq+0x10>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000008 	.word	0x20000008

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004090:	f7ff fff2 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004094:	0001      	movs	r1, r0
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	2207      	movs	r2, #7
 800409e:	4013      	ands	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	40d9      	lsrs	r1, r3
 80040a6:	000b      	movs	r3, r1
}    
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	080057d4 	.word	0x080057d4

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	4013      	ands	r3, r2
 80040d2:	d100      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80040d4:	e08e      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2017      	movs	r0, #23
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	055b      	lsls	r3, r3, #21
 80040e6:	4013      	ands	r3, r2
 80040e8:	d110      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	4b54      	ldr	r3, [pc, #336]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	0549      	lsls	r1, r1, #21
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	055b      	lsls	r3, r3, #21
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	183b      	adds	r3, r7, r0
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d11a      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004118:	4b49      	ldr	r3, [pc, #292]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b48      	ldr	r3, [pc, #288]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0049      	lsls	r1, r1, #1
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fe fcd7 	bl	8002ad8 <HAL_GetTick>
 800412a:	0003      	movs	r3, r0
 800412c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fe fcd2 	bl	8002ad8 <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e077      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d0f0      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004150:	6a1a      	ldr	r2, [r3, #32]
 8004152:	23c0      	movs	r3, #192	; 0xc0
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4013      	ands	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d034      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	23c0      	movs	r3, #192	; 0xc0
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4013      	ands	r3, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d02c      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800417c:	6a1a      	ldr	r2, [r3, #32]
 800417e:	4b2f      	ldr	r3, [pc, #188]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0249      	lsls	r1, r1, #9
 8004184:	430a      	orrs	r2, r1
 8004186:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004188:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800418e:	492e      	ldr	r1, [pc, #184]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004190:	400a      	ands	r2, r1
 8004192:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004194:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	4013      	ands	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fe fc99 	bl	8002ad8 <HAL_GetTick>
 80041a6:	0003      	movs	r3, r0
 80041a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	e009      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fe fc94 	bl	8002ad8 <HAL_GetTick>
 80041b0:	0002      	movs	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e038      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041de:	2317      	movs	r3, #23
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041ee:	4918      	ldr	r1, [pc, #96]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2203      	movs	r2, #3
 8004204:	4393      	bics	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800420e:	430a      	orrs	r2, r1
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	4013      	ands	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2210      	movs	r2, #16
 8004222:	4393      	bics	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800422c:	430a      	orrs	r2, r1
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b006      	add	sp, #24
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	fffffcff 	.word	0xfffffcff
 8004248:	fffeffff 	.word	0xfffeffff
 800424c:	00001388 	.word	0x00001388
 8004250:	efffffff 	.word	0xefffffff

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e042      	b.n	80042ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	223d      	movs	r2, #61	; 0x3d
 800426a:	5c9b      	ldrb	r3, [r3, r2]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	223c      	movs	r2, #60	; 0x3c
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f7fe fad7 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	223d      	movs	r2, #61	; 0x3d
 8004286:	2102      	movs	r1, #2
 8004288:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	0019      	movs	r1, r3
 8004294:	0010      	movs	r0, r2
 8004296:	f000 fa83 	bl	80047a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2246      	movs	r2, #70	; 0x46
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223e      	movs	r2, #62	; 0x3e
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	223f      	movs	r2, #63	; 0x3f
 80042ae:	2101      	movs	r1, #1
 80042b0:	5499      	strb	r1, [r3, r2]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2240      	movs	r2, #64	; 0x40
 80042b6:	2101      	movs	r1, #1
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2242      	movs	r2, #66	; 0x42
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2243      	movs	r2, #67	; 0x43
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2244      	movs	r2, #68	; 0x44
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2245      	movs	r2, #69	; 0x45
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223d      	movs	r2, #61	; 0x3d
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223d      	movs	r2, #61	; 0x3d
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e036      	b.n	800437a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	223d      	movs	r2, #61	; 0x3d
 8004310:	2102      	movs	r1, #2
 8004312:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <HAL_TIM_Base_Start_IT+0x90>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00a      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0x50>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	05db      	lsls	r3, r3, #23
 8004336:	429a      	cmp	r2, r3
 8004338:	d004      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0x50>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <HAL_TIM_Base_Start_IT+0x94>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d111      	bne.n	8004368 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2207      	movs	r2, #7
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b06      	cmp	r3, #6
 8004354:	d010      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	e007      	b.n	8004378 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2101      	movs	r1, #1
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400

0800438c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2202      	movs	r2, #2
 800439c:	4013      	ands	r3, r2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d124      	bne.n	80043ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2202      	movs	r2, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11d      	bne.n	80043ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2203      	movs	r2, #3
 80043b6:	4252      	negs	r2, r2
 80043b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2203      	movs	r2, #3
 80043c8:	4013      	ands	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f9ce 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e007      	b.n	80043e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f000 f9c1 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f9cd 	bl	8004780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2204      	movs	r2, #4
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d125      	bne.n	8004446 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	2b04      	cmp	r3, #4
 8004406:	d11e      	bne.n	8004446 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2205      	movs	r2, #5
 800440e:	4252      	negs	r2, r2
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	23c0      	movs	r3, #192	; 0xc0
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4013      	ands	r3, r2
 8004424:	d004      	beq.n	8004430 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f9a1 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 800442e:	e007      	b.n	8004440 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f994 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 f9a0 	bl	8004780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2208      	movs	r2, #8
 800444e:	4013      	ands	r3, r2
 8004450:	2b08      	cmp	r3, #8
 8004452:	d124      	bne.n	800449e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2208      	movs	r2, #8
 800445c:	4013      	ands	r3, r2
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11d      	bne.n	800449e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2209      	movs	r2, #9
 8004468:	4252      	negs	r2, r2
 800446a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2204      	movs	r2, #4
 8004470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2203      	movs	r2, #3
 800447a:	4013      	ands	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 f975 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 8004486:	e007      	b.n	8004498 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f968 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0018      	movs	r0, r3
 8004494:	f000 f974 	bl	8004780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2210      	movs	r2, #16
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d125      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2210      	movs	r2, #16
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d11e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2211      	movs	r2, #17
 80044c0:	4252      	negs	r2, r2
 80044c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2208      	movs	r2, #8
 80044c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	23c0      	movs	r3, #192	; 0xc0
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4013      	ands	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 f948 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80044e0:	e007      	b.n	80044f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f93b 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f947 	bl	8004780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10f      	bne.n	8004526 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	2b01      	cmp	r3, #1
 8004512:	d108      	bne.n	8004526 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2202      	movs	r2, #2
 800451a:	4252      	negs	r2, r2
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	0018      	movs	r0, r3
 8004522:	f7fe f80d 	bl	8002540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	4013      	ands	r3, r2
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	d10f      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2280      	movs	r2, #128	; 0x80
 800453c:	4013      	ands	r3, r2
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d108      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2281      	movs	r2, #129	; 0x81
 8004548:	4252      	negs	r2, r2
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fa96 	bl	8004a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	4013      	ands	r3, r2
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d10f      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	4013      	ands	r3, r2
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d108      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2241      	movs	r2, #65	; 0x41
 8004576:	4252      	negs	r2, r2
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 f907 	bl	8004790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	2b20      	cmp	r3, #32
 800458e:	d10f      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	4013      	ands	r3, r2
 800459a:	2b20      	cmp	r3, #32
 800459c:	d108      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2221      	movs	r2, #33	; 0x21
 80045a4:	4252      	negs	r2, r2
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f000 fa60 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	230f      	movs	r3, #15
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	223c      	movs	r2, #60	; 0x3c
 80045ce:	5c9b      	ldrb	r3, [r3, r2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_ConfigClockSource+0x20>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0bc      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x19a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	223c      	movs	r2, #60	; 0x3c
 80045dc:	2101      	movs	r1, #1
 80045de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	223d      	movs	r2, #61	; 0x3d
 80045e4:	2102      	movs	r1, #2
 80045e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2277      	movs	r2, #119	; 0x77
 80045f4:	4393      	bics	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_TIM_ConfigClockSource+0x1a4>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2280      	movs	r2, #128	; 0x80
 800460e:	0192      	lsls	r2, r2, #6
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xde>
 8004614:	2280      	movs	r2, #128	; 0x80
 8004616:	0192      	lsls	r2, r2, #6
 8004618:	4293      	cmp	r3, r2
 800461a:	d900      	bls.n	800461e <HAL_TIM_ConfigClockSource+0x66>
 800461c:	e088      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	0152      	lsls	r2, r2, #5
 8004622:	4293      	cmp	r3, r2
 8004624:	d100      	bne.n	8004628 <HAL_TIM_ConfigClockSource+0x70>
 8004626:	e088      	b.n	800473a <HAL_TIM_ConfigClockSource+0x182>
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	0152      	lsls	r2, r2, #5
 800462c:	4293      	cmp	r3, r2
 800462e:	d900      	bls.n	8004632 <HAL_TIM_ConfigClockSource+0x7a>
 8004630:	e07e      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 8004632:	2b70      	cmp	r3, #112	; 0x70
 8004634:	d018      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0xb0>
 8004636:	d900      	bls.n	800463a <HAL_TIM_ConfigClockSource+0x82>
 8004638:	e07a      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 800463a:	2b60      	cmp	r3, #96	; 0x60
 800463c:	d04f      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x126>
 800463e:	d900      	bls.n	8004642 <HAL_TIM_ConfigClockSource+0x8a>
 8004640:	e076      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 8004642:	2b50      	cmp	r3, #80	; 0x50
 8004644:	d03b      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x106>
 8004646:	d900      	bls.n	800464a <HAL_TIM_ConfigClockSource+0x92>
 8004648:	e072      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d057      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x146>
 800464e:	d900      	bls.n	8004652 <HAL_TIM_ConfigClockSource+0x9a>
 8004650:	e06e      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 8004652:	2b30      	cmp	r3, #48	; 0x30
 8004654:	d063      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x166>
 8004656:	d86b      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d060      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x166>
 800465c:	d868      	bhi.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d05d      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x166>
 8004662:	2b10      	cmp	r3, #16
 8004664:	d05b      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x166>
 8004666:	e063      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f000 f982 	bl	8004980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2277      	movs	r2, #119	; 0x77
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
      break;
 8004694:	e052      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f000 f96b 	bl	8004980 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	01c9      	lsls	r1, r1, #7
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
      break;
 80046bc:	e03e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	001a      	movs	r2, r3
 80046cc:	f000 f8de 	bl	800488c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2150      	movs	r1, #80	; 0x50
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 f938 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 80046dc:	e02e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	001a      	movs	r2, r3
 80046ec:	f000 f8fc 	bl	80048e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2160      	movs	r1, #96	; 0x60
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 f928 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 80046fc:	e01e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	001a      	movs	r2, r3
 800470c:	f000 f8be 	bl	800488c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2140      	movs	r1, #64	; 0x40
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f918 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 800471c:	e00e      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0019      	movs	r1, r3
 8004728:	0010      	movs	r0, r2
 800472a:	f000 f90f 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 800472e:	e005      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004730:	230f      	movs	r3, #15
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
      break;
 8004738:	e000      	b.n	800473c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800473a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	223d      	movs	r2, #61	; 0x3d
 8004740:	2101      	movs	r1, #1
 8004742:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	223c      	movs	r2, #60	; 0x3c
 8004748:	2100      	movs	r1, #0
 800474a:	5499      	strb	r1, [r3, r2]

  return status;
 800474c:	230f      	movs	r3, #15
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	781b      	ldrb	r3, [r3, #0]
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	ffff00ff 	.word	0xffff00ff

08004760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <TIM_Base_SetConfig+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d008      	beq.n	80047ca <TIM_Base_SetConfig+0x2a>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	05db      	lsls	r3, r3, #23
 80047be:	429a      	cmp	r2, r3
 80047c0:	d003      	beq.n	80047ca <TIM_Base_SetConfig+0x2a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <TIM_Base_SetConfig+0xd8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d108      	bne.n	80047dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2270      	movs	r2, #112	; 0x70
 80047ce:	4393      	bics	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <TIM_Base_SetConfig+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d014      	beq.n	800480e <TIM_Base_SetConfig+0x6e>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	05db      	lsls	r3, r3, #23
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0x6e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <TIM_Base_SetConfig+0xd8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0x6e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <TIM_Base_SetConfig+0xdc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0x6e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <TIM_Base_SetConfig+0xe0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0x6e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <TIM_Base_SetConfig+0xe4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <TIM_Base_SetConfig+0xe8>)
 8004812:	4013      	ands	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	4393      	bics	r3, r2
 8004826:	001a      	movs	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <TIM_Base_SetConfig+0xd4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <TIM_Base_SetConfig+0xbe>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <TIM_Base_SetConfig+0xe0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_Base_SetConfig+0xbe>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <TIM_Base_SetConfig+0xe4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d103      	bne.n	8004866 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	615a      	str	r2, [r3, #20]
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b004      	add	sp, #16
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400
 800487c:	40002000 	.word	0x40002000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	fffffcff 	.word	0xfffffcff

0800488c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2201      	movs	r2, #1
 80048a4:	4393      	bics	r3, r2
 80048a6:	001a      	movs	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	22f0      	movs	r2, #240	; 0xf0
 80048b6:	4393      	bics	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	220a      	movs	r2, #10
 80048c8:	4393      	bics	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2210      	movs	r2, #16
 80048fa:	4393      	bics	r3, r2
 80048fc:	001a      	movs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <TIM_TI2_ConfigInputStage+0x60>)
 8004912:	4013      	ands	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	22a0      	movs	r2, #160	; 0xa0
 8004924:	4393      	bics	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b006      	add	sp, #24
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	ffff0fff 	.word	0xffff0fff

0800494c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2270      	movs	r2, #112	; 0x70
 8004960:	4393      	bics	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	2207      	movs	r2, #7
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <TIM_ETR_SetConfig+0x3c>)
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b006      	add	sp, #24
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	ffff00ff 	.word	0xffff00ff

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	223c      	movs	r2, #60	; 0x3c
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e042      	b.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223c      	movs	r2, #60	; 0x3c
 80049dc:	2101      	movs	r1, #1
 80049de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	223d      	movs	r2, #61	; 0x3d
 80049e4:	2102      	movs	r1, #2
 80049e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2270      	movs	r2, #112	; 0x70
 80049fc:	4393      	bics	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00a      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	05db      	lsls	r3, r3, #23
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d004      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10c      	bne.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	4393      	bics	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	223d      	movs	r2, #61	; 0x3d
 8004a50:	2101      	movs	r1, #1
 8004a52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	223c      	movs	r2, #60	; 0x3c
 8004a58:	2100      	movs	r1, #0
 8004a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b004      	add	sp, #16
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e044      	b.n	8004b2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2278      	movs	r2, #120	; 0x78
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fd fedf 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2224      	movs	r2, #36	; 0x24
 8004abe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2101      	movs	r1, #1
 8004acc:	438a      	bics	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 f8a2 	bl	8004c1c <UART_SetConfig>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e024      	b.n	8004b2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f000 f9bd 	bl	8004e6c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	490d      	ldr	r1, [pc, #52]	; (8004b34 <HAL_UART_Init+0xa4>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	212a      	movs	r1, #42	; 0x2a
 8004b0e:	438a      	bics	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fa55 	bl	8004fd4 <UART_CheckIdleState>
 8004b2a:	0003      	movs	r3, r0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	ffffb7ff 	.word	0xffffb7ff

08004b38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	1dbb      	adds	r3, r7, #6
 8004b44:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	589b      	ldr	r3, [r3, r2]
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d145      	bne.n	8004bdc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_UART_Receive_DMA+0x26>
 8004b56:	1dbb      	adds	r3, r7, #6
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e03d      	b.n	8004bde <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	015b      	lsls	r3, r3, #5
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d109      	bne.n	8004b82 <HAL_UART_Receive_DMA+0x4a>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d105      	bne.n	8004b82 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d001      	beq.n	8004b82 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e02d      	b.n	8004bde <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	041b      	lsls	r3, r3, #16
 8004b92:	4013      	ands	r3, r2
 8004b94:	d019      	beq.n	8004bca <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b96:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f383 8810 	msr	PRIMASK, r3
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	04c9      	lsls	r1, r1, #19
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f383 8810 	msr	PRIMASK, r3
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004bca:	1dbb      	adds	r3, r7, #6
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 fb10 	bl	80051f8 <UART_Start_Receive_DMA>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	e000      	b.n	8004bde <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
  }
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b008      	add	sp, #32
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	000a      	movs	r2, r1
 8004c10:	1cbb      	adds	r3, r7, #2
 8004c12:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c24:	231e      	movs	r3, #30
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a83      	ldr	r2, [pc, #524]	; (8004e58 <UART_SetConfig+0x23c>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a7e      	ldr	r2, [pc, #504]	; (8004e5c <UART_SetConfig+0x240>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a75      	ldr	r2, [pc, #468]	; (8004e60 <UART_SetConfig+0x244>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c98:	4b72      	ldr	r3, [pc, #456]	; (8004e64 <UART_SetConfig+0x248>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d00d      	beq.n	8004cc0 <UART_SetConfig+0xa4>
 8004ca4:	d81b      	bhi.n	8004cde <UART_SetConfig+0xc2>
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d014      	beq.n	8004cd4 <UART_SetConfig+0xb8>
 8004caa:	d818      	bhi.n	8004cde <UART_SetConfig+0xc2>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <UART_SetConfig+0x9a>
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d00a      	beq.n	8004cca <UART_SetConfig+0xae>
 8004cb4:	e013      	b.n	8004cde <UART_SetConfig+0xc2>
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e012      	b.n	8004ce6 <UART_SetConfig+0xca>
 8004cc0:	231f      	movs	r3, #31
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e00d      	b.n	8004ce6 <UART_SetConfig+0xca>
 8004cca:	231f      	movs	r3, #31
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2204      	movs	r2, #4
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e008      	b.n	8004ce6 <UART_SetConfig+0xca>
 8004cd4:	231f      	movs	r3, #31
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2208      	movs	r2, #8
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e003      	b.n	8004ce6 <UART_SetConfig+0xca>
 8004cde:	231f      	movs	r3, #31
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d15c      	bne.n	8004dae <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8004cf4:	231f      	movs	r3, #31
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d015      	beq.n	8004d2a <UART_SetConfig+0x10e>
 8004cfe:	dc18      	bgt.n	8004d32 <UART_SetConfig+0x116>
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d00d      	beq.n	8004d20 <UART_SetConfig+0x104>
 8004d04:	dc15      	bgt.n	8004d32 <UART_SetConfig+0x116>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <UART_SetConfig+0xf4>
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d005      	beq.n	8004d1a <UART_SetConfig+0xfe>
 8004d0e:	e010      	b.n	8004d32 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d10:	f7ff f9bc 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8004d14:	0003      	movs	r3, r0
 8004d16:	61bb      	str	r3, [r7, #24]
        break;
 8004d18:	e012      	b.n	8004d40 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1a:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <UART_SetConfig+0x24c>)
 8004d1c:	61bb      	str	r3, [r7, #24]
        break;
 8004d1e:	e00f      	b.n	8004d40 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d20:	f7ff f954 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8004d24:	0003      	movs	r3, r0
 8004d26:	61bb      	str	r3, [r7, #24]
        break;
 8004d28:	e00a      	b.n	8004d40 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e006      	b.n	8004d40 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d36:	231e      	movs	r3, #30
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]
        break;
 8004d3e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d100      	bne.n	8004d48 <UART_SetConfig+0x12c>
 8004d46:	e07a      	b.n	8004e3e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	005a      	lsls	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	18d2      	adds	r2, r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fb f9d4 	bl	8000108 <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d91c      	bls.n	8004da4 <UART_SetConfig+0x188>
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	025b      	lsls	r3, r3, #9
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d217      	bcs.n	8004da4 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	200e      	movs	r0, #14
 8004d7a:	183b      	adds	r3, r7, r0
 8004d7c:	210f      	movs	r1, #15
 8004d7e:	438a      	bics	r2, r1
 8004d80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2207      	movs	r2, #7
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b299      	uxth	r1, r3
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	183a      	adds	r2, r7, r0
 8004d92:	8812      	ldrh	r2, [r2, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	183a      	adds	r2, r7, r0
 8004d9e:	8812      	ldrh	r2, [r2, #0]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	e04c      	b.n	8004e3e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8004da4:	231e      	movs	r3, #30
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e047      	b.n	8004e3e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dae:	231f      	movs	r3, #31
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d015      	beq.n	8004de4 <UART_SetConfig+0x1c8>
 8004db8:	dc18      	bgt.n	8004dec <UART_SetConfig+0x1d0>
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d00d      	beq.n	8004dda <UART_SetConfig+0x1be>
 8004dbe:	dc15      	bgt.n	8004dec <UART_SetConfig+0x1d0>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <UART_SetConfig+0x1ae>
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d005      	beq.n	8004dd4 <UART_SetConfig+0x1b8>
 8004dc8:	e010      	b.n	8004dec <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff f95f 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	61bb      	str	r3, [r7, #24]
        break;
 8004dd2:	e012      	b.n	8004dfa <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <UART_SetConfig+0x24c>)
 8004dd6:	61bb      	str	r3, [r7, #24]
        break;
 8004dd8:	e00f      	b.n	8004dfa <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7ff f8f7 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8004dde:	0003      	movs	r3, r0
 8004de0:	61bb      	str	r3, [r7, #24]
        break;
 8004de2:	e00a      	b.n	8004dfa <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	61bb      	str	r3, [r7, #24]
        break;
 8004dea:	e006      	b.n	8004dfa <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004df0:	231e      	movs	r3, #30
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
        break;
 8004df8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01e      	beq.n	8004e3e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	085a      	lsrs	r2, r3, #1
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	18d2      	adds	r2, r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0019      	movs	r1, r3
 8004e10:	0010      	movs	r0, r2
 8004e12:	f7fb f979 	bl	8000108 <__udivsi3>
 8004e16:	0003      	movs	r3, r0
 8004e18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b0f      	cmp	r3, #15
 8004e1e:	d90a      	bls.n	8004e36 <UART_SetConfig+0x21a>
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	025b      	lsls	r3, r3, #9
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d205      	bcs.n	8004e36 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e003      	b.n	8004e3e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8004e36:	231e      	movs	r3, #30
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e4a:	231e      	movs	r3, #30
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b008      	add	sp, #32
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	ffff69f3 	.word	0xffff69f3
 8004e5c:	ffffcfff 	.word	0xffffcfff
 8004e60:	fffff4ff 	.word	0xfffff4ff
 8004e64:	40021000 	.word	0x40021000
 8004e68:	007a1200 	.word	0x007a1200

08004e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a4a      	ldr	r2, [pc, #296]	; (8004fb0 <UART_AdvFeatureConfig+0x144>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	0019      	movs	r1, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4a43      	ldr	r2, [pc, #268]	; (8004fb4 <UART_AdvFeatureConfig+0x148>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a3b      	ldr	r2, [pc, #236]	; (8004fb8 <UART_AdvFeatureConfig+0x14c>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2208      	movs	r2, #8
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4a34      	ldr	r2, [pc, #208]	; (8004fbc <UART_AdvFeatureConfig+0x150>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2210      	movs	r2, #16
 8004f02:	4013      	ands	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <UART_AdvFeatureConfig+0x154>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2220      	movs	r2, #32
 8004f24:	4013      	ands	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <UART_AdvFeatureConfig+0x158>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	0019      	movs	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	4013      	ands	r3, r2
 8004f48:	d01d      	beq.n	8004f86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <UART_AdvFeatureConfig+0x15c>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	035b      	lsls	r3, r3, #13
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d10b      	bne.n	8004f86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <UART_AdvFeatureConfig+0x160>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <UART_AdvFeatureConfig+0x164>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	fffdffff 	.word	0xfffdffff
 8004fb4:	fffeffff 	.word	0xfffeffff
 8004fb8:	fffbffff 	.word	0xfffbffff
 8004fbc:	ffff7fff 	.word	0xffff7fff
 8004fc0:	ffffefff 	.word	0xffffefff
 8004fc4:	ffffdfff 	.word	0xffffdfff
 8004fc8:	ffefffff 	.word	0xffefffff
 8004fcc:	ff9fffff 	.word	0xff9fffff
 8004fd0:	fff7ffff 	.word	0xfff7ffff

08004fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b092      	sub	sp, #72	; 0x48
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2284      	movs	r2, #132	; 0x84
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe4:	f7fd fd78 	bl	8002ad8 <HAL_GetTick>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d12c      	bne.n	8005054 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	0391      	lsls	r1, r2, #14
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4a46      	ldr	r2, [pc, #280]	; (800511c <UART_CheckIdleState+0x148>)
 8005004:	9200      	str	r2, [sp, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	f000 f88c 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 800500c:	1e03      	subs	r3, r0, #0
 800500e:	d021      	beq.n	8005054 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005010:	f3ef 8310 	mrs	r3, PRIMASK
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
 800501a:	2301      	movs	r3, #1
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	438a      	bics	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2278      	movs	r2, #120	; 0x78
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e05f      	b.n	8005114 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	2b04      	cmp	r3, #4
 8005060:	d146      	bne.n	80050f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	2280      	movs	r2, #128	; 0x80
 8005066:	03d1      	lsls	r1, r2, #15
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4a2c      	ldr	r2, [pc, #176]	; (800511c <UART_CheckIdleState+0x148>)
 800506c:	9200      	str	r2, [sp, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	f000 f858 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d03b      	beq.n	80050f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005078:	f3ef 8310 	mrs	r3, PRIMASK
 800507c:	60fb      	str	r3, [r7, #12]
  return(result);
 800507e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
 8005082:	2301      	movs	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f383 8810 	msr	PRIMASK, r3
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4921      	ldr	r1, [pc, #132]	; (8005120 <UART_CheckIdleState+0x14c>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f383 8810 	msr	PRIMASK, r3
}
 80050a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050aa:	f3ef 8310 	mrs	r3, PRIMASK
 80050ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80050b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
 80050b4:	2301      	movs	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2101      	movs	r1, #1
 80050cc:	438a      	bics	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	2120      	movs	r1, #32
 80050e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2278      	movs	r2, #120	; 0x78
 80050e8:	2100      	movs	r1, #0
 80050ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2280      	movs	r2, #128	; 0x80
 80050fa:	2120      	movs	r1, #32
 80050fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2278      	movs	r2, #120	; 0x78
 800510e:	2100      	movs	r1, #0
 8005110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b010      	add	sp, #64	; 0x40
 800511a:	bd80      	pop	{r7, pc}
 800511c:	01ffffff 	.word	0x01ffffff
 8005120:	fffffedf 	.word	0xfffffedf

08005124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	e04b      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	3301      	adds	r3, #1
 800513a:	d048      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	f7fd fccc 	bl	8002ad8 <HAL_GetTick>
 8005140:	0002      	movs	r2, r0
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	429a      	cmp	r2, r3
 800514a:	d302      	bcc.n	8005152 <UART_WaitOnFlagUntilTimeout+0x2e>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e04b      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2204      	movs	r2, #4
 800515e:	4013      	ands	r3, r2
 8005160:	d035      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2208      	movs	r2, #8
 800516a:	4013      	ands	r3, r2
 800516c:	2b08      	cmp	r3, #8
 800516e:	d111      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2208      	movs	r2, #8
 8005176:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 f900 	bl	8005380 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2284      	movs	r2, #132	; 0x84
 8005184:	2108      	movs	r1, #8
 8005186:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2278      	movs	r2, #120	; 0x78
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e02c      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	401a      	ands	r2, r3
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d112      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2280      	movs	r2, #128	; 0x80
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 f8e3 	bl	8005380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2284      	movs	r2, #132	; 0x84
 80051be:	2120      	movs	r1, #32
 80051c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2278      	movs	r2, #120	; 0x78
 80051c6:	2100      	movs	r1, #0
 80051c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e00f      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	4013      	ands	r3, r2
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	425a      	negs	r2, r3
 80051de:	4153      	adcs	r3, r2
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	001a      	movs	r2, r3
 80051e4:	1dfb      	adds	r3, r7, #7
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d0a4      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b090      	sub	sp, #64	; 0x40
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	1dbb      	adds	r3, r7, #6
 8005204:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1dba      	adds	r2, r7, #6
 8005210:	2158      	movs	r1, #88	; 0x58
 8005212:	8812      	ldrh	r2, [r2, #0]
 8005214:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2284      	movs	r2, #132	; 0x84
 800521a:	2100      	movs	r1, #0
 800521c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2280      	movs	r2, #128	; 0x80
 8005222:	2122      	movs	r1, #34	; 0x22
 8005224:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522a:	2b00      	cmp	r3, #0
 800522c:	d028      	beq.n	8005280 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	4a3e      	ldr	r2, [pc, #248]	; (800532c <UART_Start_Receive_DMA+0x134>)
 8005234:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523a:	4a3d      	ldr	r2, [pc, #244]	; (8005330 <UART_Start_Receive_DMA+0x138>)
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005242:	4a3c      	ldr	r2, [pc, #240]	; (8005334 <UART_Start_Receive_DMA+0x13c>)
 8005244:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	2200      	movs	r2, #0
 800524c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	0019      	movs	r1, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	001a      	movs	r2, r3
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	f7fd ffda 	bl	800321c <HAL_DMA_Start_IT>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d009      	beq.n	8005280 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2284      	movs	r2, #132	; 0x84
 8005270:	2110      	movs	r1, #16
 8005272:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	2120      	movs	r1, #32
 800527a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e050      	b.n	8005322 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d019      	beq.n	80052bc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005292:	2301      	movs	r3, #1
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0049      	lsls	r1, r1, #1
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052bc:	f3ef 8310 	mrs	r3, PRIMASK
 80052c0:	613b      	str	r3, [r7, #16]
  return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c6:	2301      	movs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80052f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
 80052f8:	2301      	movs	r3, #1
 80052fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b010      	add	sp, #64	; 0x40
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	08005449 	.word	0x08005449
 8005330:	08005575 	.word	0x08005575
 8005334:	080055b7 	.word	0x080055b7

08005338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	60bb      	str	r3, [r7, #8]
  return(result);
 8005346:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	21c0      	movs	r1, #192	; 0xc0
 8005362:	438a      	bics	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	617b      	str	r3, [r7, #20]
  return(result);
 800538e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
 8005392:	2301      	movs	r3, #1
 8005394:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4926      	ldr	r1, [pc, #152]	; (8005444 <UART_EndRxTransfer+0xc4>)
 80053aa:	400a      	ands	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	623b      	str	r3, [r7, #32]
  return(result);
 80053c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
 80053c4:	2301      	movs	r3, #1
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2101      	movs	r1, #1
 80053dc:	438a      	bics	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d118      	bne.n	8005426 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f4:	f3ef 8310 	mrs	r3, PRIMASK
 80053f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fe:	2301      	movs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f383 8810 	msr	PRIMASK, r3
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2110      	movs	r1, #16
 8005416:	438a      	bics	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f383 8810 	msr	PRIMASK, r3
}
 8005424:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	2120      	movs	r1, #32
 800542c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	669a      	str	r2, [r3, #104]	; 0x68
}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	46bd      	mov	sp, r7
 800543e:	b00e      	add	sp, #56	; 0x38
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	fffffedf 	.word	0xfffffedf

08005448 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b094      	sub	sp, #80	; 0x50
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b20      	cmp	r3, #32
 800545c:	d06f      	beq.n	800553e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	225a      	movs	r2, #90	; 0x5a
 8005462:	2100      	movs	r1, #0
 8005464:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005466:	f3ef 8310 	mrs	r3, PRIMASK
 800546a:	61bb      	str	r3, [r7, #24]
  return(result);
 800546c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005470:	2301      	movs	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	493a      	ldr	r1, [pc, #232]	; (8005570 <UART_DMAReceiveCplt+0x128>)
 8005488:	400a      	ands	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	2301      	movs	r3, #1
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	438a      	bics	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ca:	f3ef 8310 	mrs	r3, PRIMASK
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
 80054d4:	2301      	movs	r3, #1
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	438a      	bics	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	2120      	movs	r1, #32
 8005502:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b01      	cmp	r3, #1
 800550a:	d118      	bne.n	800553e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550c:	f3ef 8310 	mrs	r3, PRIMASK
 8005510:	60fb      	str	r3, [r7, #12]
  return(result);
 8005512:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005516:	2301      	movs	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2110      	movs	r1, #16
 800552e:	438a      	bics	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f383 8810 	msr	PRIMASK, r3
}
 800553c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	2200      	movs	r2, #0
 8005542:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	d108      	bne.n	800555e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554e:	2258      	movs	r2, #88	; 0x58
 8005550:	5a9a      	ldrh	r2, [r3, r2]
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	0011      	movs	r1, r2
 8005556:	0018      	movs	r0, r3
 8005558:	f7ff fb55 	bl	8004c06 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800555c:	e003      	b.n	8005566 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	0018      	movs	r0, r3
 8005562:	f7fc fcc7 	bl	8001ef4 <HAL_UART_RxCpltCallback>
}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	46bd      	mov	sp, r7
 800556a:	b014      	add	sp, #80	; 0x50
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	fffffeff 	.word	0xfffffeff

08005574 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10a      	bne.n	80055a6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2258      	movs	r2, #88	; 0x58
 8005594:	5a9b      	ldrh	r3, [r3, r2]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0011      	movs	r1, r2
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff fb31 	bl	8004c06 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055a4:	e003      	b.n	80055ae <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff fb1c 	bl	8004be6 <HAL_UART_RxHalfCpltCallback>
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2280      	movs	r2, #128	; 0x80
 80055ce:	589b      	ldr	r3, [r3, r2]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	4013      	ands	r3, r2
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d10a      	bne.n	80055f6 <UART_DMAError+0x40>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b21      	cmp	r3, #33	; 0x21
 80055e4:	d107      	bne.n	80055f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2252      	movs	r2, #82	; 0x52
 80055ea:	2100      	movs	r1, #0
 80055ec:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fea1 	bl	8005338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2240      	movs	r2, #64	; 0x40
 80055fe:	4013      	ands	r3, r2
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d10a      	bne.n	800561a <UART_DMAError+0x64>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b22      	cmp	r3, #34	; 0x22
 8005608:	d107      	bne.n	800561a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	225a      	movs	r2, #90	; 0x5a
 800560e:	2100      	movs	r1, #0
 8005610:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	0018      	movs	r0, r3
 8005616:	f7ff feb3 	bl	8005380 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2284      	movs	r2, #132	; 0x84
 800561e:	589b      	ldr	r3, [r3, r2]
 8005620:	2210      	movs	r2, #16
 8005622:	431a      	orrs	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2184      	movs	r1, #132	; 0x84
 8005628:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff fae2 	bl	8004bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b006      	add	sp, #24
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	2600      	movs	r6, #0
 8005640:	4d0c      	ldr	r5, [pc, #48]	; (8005674 <__libc_init_array+0x38>)
 8005642:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	2600      	movs	r6, #0
 800564e:	f000 f86d 	bl	800572c <_init>
 8005652:	4d0a      	ldr	r5, [pc, #40]	; (800567c <__libc_init_array+0x40>)
 8005654:	4c0a      	ldr	r4, [pc, #40]	; (8005680 <__libc_init_array+0x44>)
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	00b3      	lsls	r3, r6, #2
 8005662:	58eb      	ldr	r3, [r5, r3]
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	00b3      	lsls	r3, r6, #2
 800566c:	58eb      	ldr	r3, [r5, r3]
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	080057fc 	.word	0x080057fc
 8005678:	080057fc 	.word	0x080057fc
 800567c:	080057fc 	.word	0x080057fc
 8005680:	08005800 	.word	0x08005800

08005684 <memset>:
 8005684:	0003      	movs	r3, r0
 8005686:	1882      	adds	r2, r0, r2
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	7019      	strb	r1, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <lround>:
 8005694:	2301      	movs	r3, #1
 8005696:	b570      	push	{r4, r5, r6, lr}
 8005698:	000d      	movs	r5, r1
 800569a:	2680      	movs	r6, #128	; 0x80
 800569c:	0004      	movs	r4, r0
 800569e:	17c8      	asrs	r0, r1, #31
 80056a0:	4318      	orrs	r0, r3
 80056a2:	0049      	lsls	r1, r1, #1
 80056a4:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <lround+0x8c>)
 80056a6:	0d49      	lsrs	r1, r1, #21
 80056a8:	18ca      	adds	r2, r1, r3
 80056aa:	032b      	lsls	r3, r5, #12
 80056ac:	0b1b      	lsrs	r3, r3, #12
 80056ae:	0376      	lsls	r6, r6, #13
 80056b0:	4333      	orrs	r3, r6
 80056b2:	2a13      	cmp	r2, #19
 80056b4:	dc0d      	bgt.n	80056d2 <lround+0x3e>
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	da02      	bge.n	80056c0 <lround+0x2c>
 80056ba:	1c53      	adds	r3, r2, #1
 80056bc:	d12d      	bne.n	800571a <lround+0x86>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0309      	lsls	r1, r1, #12
 80056c4:	4111      	asrs	r1, r2
 80056c6:	18cb      	adds	r3, r1, r3
 80056c8:	2114      	movs	r1, #20
 80056ca:	1a8a      	subs	r2, r1, r2
 80056cc:	40d3      	lsrs	r3, r2
 80056ce:	4358      	muls	r0, r3
 80056d0:	e7f5      	b.n	80056be <lround+0x2a>
 80056d2:	2a1e      	cmp	r2, #30
 80056d4:	d81c      	bhi.n	8005710 <lround+0x7c>
 80056d6:	4d13      	ldr	r5, [pc, #76]	; (8005724 <lround+0x90>)
 80056d8:	0026      	movs	r6, r4
 80056da:	194d      	adds	r5, r1, r5
 80056dc:	2a33      	cmp	r2, #51	; 0x33
 80056de:	dd05      	ble.n	80056ec <lround+0x58>
 80056e0:	4a11      	ldr	r2, [pc, #68]	; (8005728 <lround+0x94>)
 80056e2:	40ab      	lsls	r3, r5
 80056e4:	1889      	adds	r1, r1, r2
 80056e6:	408c      	lsls	r4, r1
 80056e8:	4323      	orrs	r3, r4
 80056ea:	e7f0      	b.n	80056ce <lround+0x3a>
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0609      	lsls	r1, r1, #24
 80056f0:	40e9      	lsrs	r1, r5
 80056f2:	190c      	adds	r4, r1, r4
 80056f4:	42b4      	cmp	r4, r6
 80056f6:	4189      	sbcs	r1, r1
 80056f8:	4249      	negs	r1, r1
 80056fa:	185b      	adds	r3, r3, r1
 80056fc:	2134      	movs	r1, #52	; 0x34
 80056fe:	40ab      	lsls	r3, r5
 8005700:	1a8a      	subs	r2, r1, r2
 8005702:	2100      	movs	r1, #0
 8005704:	2a20      	cmp	r2, #32
 8005706:	d001      	beq.n	800570c <lround+0x78>
 8005708:	0021      	movs	r1, r4
 800570a:	40d1      	lsrs	r1, r2
 800570c:	430b      	orrs	r3, r1
 800570e:	e7de      	b.n	80056ce <lround+0x3a>
 8005710:	0020      	movs	r0, r4
 8005712:	0029      	movs	r1, r5
 8005714:	f7fc fb14 	bl	8001d40 <__aeabi_d2iz>
 8005718:	e7d1      	b.n	80056be <lround+0x2a>
 800571a:	2000      	movs	r0, #0
 800571c:	e7cf      	b.n	80056be <lround+0x2a>
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	fffffc01 	.word	0xfffffc01
 8005724:	fffffbed 	.word	0xfffffbed
 8005728:	fffffbcd 	.word	0xfffffbcd

0800572c <_init>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr

08005738 <_fini>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr
